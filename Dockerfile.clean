# Terry Escape - Multi-stage Docker build
# This Dockerfile builds both the gamemaster (backend) and frontend

# ============================================
# Stage 1: Base image with dependencies
# ============================================
FROM node:22-alpine AS base

# Install required system packages
RUN apk add --no-cache bash python3 py3-pip

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@10.4.1 --activate

WORKDIR /app

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml tsconfig.base.json ./
COPY packages/keypairs/package.json ./packages/keypairs/
COPY packages/noir/package.json ./packages/noir/
COPY packages/noir/utils ./packages/noir/utils/
COPY packages/noir/circuits ./packages/noir/circuits/
COPY packages/zklib/package.json ./packages/zklib/
COPY packages/client/package.json ./packages/client/
COPY packages/frontend/package.json ./packages/frontend/
COPY packages/gamemaster/package.json ./packages/gamemaster/

# Install all dependencies
RUN pnpm install --frozen-lockfile || pnpm install

# ============================================
# Stage 2: Builder - compiles all TypeScript
# ============================================
FROM base AS builder

WORKDIR /app

# Copy all source code
COPY packages ./packages

# Build packages in dependency order
RUN pnpm --filter keypairs build
RUN cd packages/noir && pnpm prepare || true
RUN pnpm --filter noir build
RUN pnpm --filter zklib build
RUN pnpm --filter zklib build:web
RUN pnpm --filter client build
RUN pnpm --filter frontend build

# Copy the built frontend bundle to public directory
RUN cp packages/frontend/dist/bundle.js packages/frontend/public/out.js

# Try to build gamemaster (may fail due to type errors, but tsx will run it anyway)
RUN pnpm --filter gamemaster build || true

# ============================================
# Stage 3: Production runtime
# ============================================
FROM node:22-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache bash supervisor
RUN corepack enable && corepack prepare pnpm@10.4.1 --activate
RUN npm install -g tsx

WORKDIR /app

# Copy the entire built application
COPY --from=builder /app ./

# Copy configuration files
COPY supervisord.conf /etc/supervisord.conf
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Set default environment variables
ENV NODE_ENV=production
ENV JWT_SECRET=change-me-in-production
ENV FRONTEND_URL=http://localhost:8000
ENV API_URL=http://localhost:2448
ENV GAMEMASTER_PORT=2448
ENV FRONTEND_PORT=8000

# Expose ports
EXPOSE 2448 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8000 || exit 1

# Use our entrypoint script
ENTRYPOINT ["/docker-entrypoint.sh"]