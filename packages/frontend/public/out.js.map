{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.js", "../../../node_modules/.pnpm/xstate@5.19.2/node_modules/xstate/dev/dist/xstate-dev.esm.js", "../../../node_modules/.pnpm/xstate@5.19.2/node_modules/xstate/dist/raise-c17ec2bc.esm.js", "../../../node_modules/.pnpm/xstate@5.19.2/node_modules/xstate/actors/dist/xstate-actors.esm.js", "../../../node_modules/.pnpm/xstate@5.19.2/node_modules/xstate/dist/log-3d9d72a9.esm.js", "../../../node_modules/.pnpm/xstate@5.19.2/node_modules/xstate/dist/xstate.esm.js", "../../client/src/types/gameMessages.ts", "../../client/src/client/game/gameclient.ts", "../../../node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.mjs", "../../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/esm/commons.js", "../../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/esm/encodePacket.browser.js", "../../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js", "../../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/esm/decodePacket.browser.js", "../../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/esm/index.js", "../../../node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/globals.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/util.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/contrib/parseqs.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/transport.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/transports/polling.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/contrib/has-cors.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/transports/polling-xhr.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/transports/websocket.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/transports/webtransport.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/transports/index.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/contrib/parseuri.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/socket.js", "../../../node_modules/.pnpm/engine.io-client@6.6.3/node_modules/engine.io-client/build/esm/index.js", "../../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/esm/url.js", "../../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/index.js", "../../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/is-binary.js", "../../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/binary.js", "../../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/esm/on.js", "../../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/esm/socket.js", "../../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/esm/contrib/backo2.js", "../../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/esm/manager.js", "../../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/esm/index.js", "../../client/src/utils.ts", "../../client/src/client/messageLog.ts", "../../client/src/client/sockets/socketManager.ts", "../../client/src/client/init.ts", "../src/script.ts"],
  "sourcesContent": ["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n}\nfunction getDevTools() {\n  const w = getGlobal();\n  if (w.__xstate__) {\n    return w.__xstate__;\n  }\n  return undefined;\n}\nfunction registerService(service) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n}\nconst devToolsAdapter = service => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n};\n\nexport { devToolsAdapter, getGlobal, registerService };\n", "import { devToolsAdapter } from '../dev/dist/xstate-dev.esm.js';\n\nclass Mailbox {\n  constructor(_process) {\n    this._process = _process;\n    this._active = false;\n    this._current = null;\n    this._last = null;\n  }\n  start() {\n    this._active = true;\n    this.flush();\n  }\n  clear() {\n    // we can't set _current to null because we might be currently processing\n    // and enqueue following clear shouldnt start processing the enqueued item immediately\n    if (this._current) {\n      this._current.next = null;\n      this._last = this._current;\n    }\n  }\n  enqueue(event) {\n    const enqueued = {\n      value: event,\n      next: null\n    };\n    if (this._current) {\n      this._last.next = enqueued;\n      this._last = enqueued;\n      return;\n    }\n    this._current = enqueued;\n    this._last = enqueued;\n    if (this._active) {\n      this.flush();\n    }\n  }\n  flush() {\n    while (this._current) {\n      // atm the given _process is responsible for implementing proper try/catch handling\n      // we assume here that this won't throw in a way that can affect this mailbox\n      const consumed = this._current;\n      this._process(consumed.value);\n      this._current = consumed.next;\n    }\n    this._last = null;\n  }\n}\n\nconst STATE_DELIMITER = '.';\nconst TARGETLESS_KEY = '';\nconst NULL_EVENT = '';\nconst STATE_IDENTIFIER = '#';\nconst WILDCARD = '*';\nconst XSTATE_INIT = 'xstate.init';\nconst XSTATE_ERROR = 'xstate.error';\nconst XSTATE_STOP = 'xstate.stop';\n\n/**\n * Returns an event that represents an implicit event that is sent after the\n * specified `delay`.\n *\n * @param delayRef The delay in milliseconds\n * @param id The state node ID where this event is handled\n */\nfunction createAfterEvent(delayRef, id) {\n  return {\n    type: `xstate.after.${delayRef}.${id}`\n  };\n}\n\n/**\n * Returns an event that represents that a final state node has been reached in\n * the parent state node.\n *\n * @param id The final state node's parent state node `id`\n * @param output The data to pass into the event\n */\nfunction createDoneStateEvent(id, output) {\n  return {\n    type: `xstate.done.state.${id}`,\n    output\n  };\n}\n\n/**\n * Returns an event that represents that an invoked service has terminated.\n *\n * An invoked service is terminated when it has reached a top-level final state\n * node, but not when it is canceled.\n *\n * @param invokeId The invoked service ID\n * @param output The data to pass into the event\n */\nfunction createDoneActorEvent(invokeId, output) {\n  return {\n    type: `xstate.done.actor.${invokeId}`,\n    output,\n    actorId: invokeId\n  };\n}\nfunction createErrorActorEvent(id, error) {\n  return {\n    type: `xstate.error.actor.${id}`,\n    error,\n    actorId: id\n  };\n}\nfunction createInitEvent(input) {\n  return {\n    type: XSTATE_INIT,\n    input\n  };\n}\n\n/**\n * This function makes sure that unhandled errors are thrown in a separate\n * macrotask. It allows those errors to be detected by global error handlers and\n * reported to bug tracking services without interrupting our own stack of\n * execution.\n *\n * @param err Error to be thrown\n */\nfunction reportUnhandledError(err) {\n  setTimeout(() => {\n    throw err;\n  });\n}\n\nconst symbolObservable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n\nfunction matchesState(parentStateId, childStateId) {\n  const parentStateValue = toStateValue(parentStateId);\n  const childStateValue = toStateValue(childStateId);\n  if (typeof childStateValue === 'string') {\n    if (typeof parentStateValue === 'string') {\n      return childStateValue === parentStateValue;\n    }\n\n    // Parent more specific than child\n    return false;\n  }\n  if (typeof parentStateValue === 'string') {\n    return parentStateValue in childStateValue;\n  }\n  return Object.keys(parentStateValue).every(key => {\n    if (!(key in childStateValue)) {\n      return false;\n    }\n    return matchesState(parentStateValue[key], childStateValue[key]);\n  });\n}\nfunction toStatePath(stateId) {\n  if (isArray(stateId)) {\n    return stateId;\n  }\n  const result = [];\n  let segment = '';\n  for (let i = 0; i < stateId.length; i++) {\n    const char = stateId.charCodeAt(i);\n    switch (char) {\n      // \\\n      case 92:\n        // consume the next character\n        segment += stateId[i + 1];\n        // and skip over it\n        i++;\n        continue;\n      // .\n      case 46:\n        result.push(segment);\n        segment = '';\n        continue;\n    }\n    segment += stateId[i];\n  }\n  result.push(segment);\n  return result;\n}\nfunction toStateValue(stateValue) {\n  if (isMachineSnapshot(stateValue)) {\n    return stateValue.value;\n  }\n  if (typeof stateValue !== 'string') {\n    return stateValue;\n  }\n  const statePath = toStatePath(stateValue);\n  return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n  if (statePath.length === 1) {\n    return statePath[0];\n  }\n  const value = {};\n  let marker = value;\n  for (let i = 0; i < statePath.length - 1; i++) {\n    if (i === statePath.length - 2) {\n      marker[statePath[i]] = statePath[i + 1];\n    } else {\n      const previous = marker;\n      marker = {};\n      previous[statePath[i]] = marker;\n    }\n  }\n  return value;\n}\nfunction mapValues(collection, iteratee) {\n  const result = {};\n  const collectionKeys = Object.keys(collection);\n  for (let i = 0; i < collectionKeys.length; i++) {\n    const key = collectionKeys[i];\n    result[key] = iteratee(collection[key], key, collection, i);\n  }\n  return result;\n}\nfunction toArrayStrict(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\nfunction toArray(value) {\n  if (value === undefined) {\n    return [];\n  }\n  return toArrayStrict(value);\n}\nfunction resolveOutput(mapper, context, event, self) {\n  if (typeof mapper === 'function') {\n    return mapper({\n      context,\n      event,\n      self\n    });\n  }\n  return mapper;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isErrorActorEvent(event) {\n  return event.type.startsWith('xstate.error.actor');\n}\nfunction toTransitionConfigArray(configLike) {\n  return toArrayStrict(configLike).map(transitionLike => {\n    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string') {\n      return {\n        target: transitionLike\n      };\n    }\n    return transitionLike;\n  });\n}\nfunction normalizeTarget(target) {\n  if (target === undefined || target === TARGETLESS_KEY) {\n    return undefined;\n  }\n  return toArray(target);\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)\n  };\n}\nfunction createInvokeId(stateNodeId, index) {\n  return `${index}.${stateNodeId}`;\n}\nfunction resolveReferencedActor(machine, src) {\n  const match = src.match(/^xstate\\.invoke\\.(\\d+)\\.(.*)/);\n  if (!match) {\n    return machine.implementations.actors[src];\n  }\n  const [, indexStr, nodeId] = match;\n  const node = machine.getStateNodeById(nodeId);\n  const invokeConfig = node.config.invoke;\n  return (Array.isArray(invokeConfig) ? invokeConfig[indexStr] : invokeConfig).src;\n}\nfunction getAllOwnEventDescriptors(snapshot) {\n  return [...new Set([...snapshot._nodes.flatMap(sn => sn.ownEvents)])];\n}\n\nfunction createScheduledEventId(actorRef, id) {\n  return `${actorRef.sessionId}.${id}`;\n}\nlet idCounter = 0;\nfunction createSystem(rootActor, options) {\n  const children = new Map();\n  const keyedActors = new Map();\n  const reverseKeyedActors = new WeakMap();\n  const inspectionObservers = new Set();\n  const timerMap = {};\n  const {\n    clock,\n    logger\n  } = options;\n  const scheduler = {\n    schedule: (source, target, event, delay, id = Math.random().toString(36).slice(2)) => {\n      const scheduledEvent = {\n        source,\n        target,\n        event,\n        delay,\n        id,\n        startedAt: Date.now()\n      };\n      const scheduledEventId = createScheduledEventId(source, id);\n      system._snapshot._scheduledEvents[scheduledEventId] = scheduledEvent;\n      const timeout = clock.setTimeout(() => {\n        delete timerMap[scheduledEventId];\n        delete system._snapshot._scheduledEvents[scheduledEventId];\n        system._relay(source, target, event);\n      }, delay);\n      timerMap[scheduledEventId] = timeout;\n    },\n    cancel: (source, id) => {\n      const scheduledEventId = createScheduledEventId(source, id);\n      const timeout = timerMap[scheduledEventId];\n      delete timerMap[scheduledEventId];\n      delete system._snapshot._scheduledEvents[scheduledEventId];\n      if (timeout !== undefined) {\n        clock.clearTimeout(timeout);\n      }\n    },\n    cancelAll: actorRef => {\n      for (const scheduledEventId in system._snapshot._scheduledEvents) {\n        const scheduledEvent = system._snapshot._scheduledEvents[scheduledEventId];\n        if (scheduledEvent.source === actorRef) {\n          scheduler.cancel(actorRef, scheduledEvent.id);\n        }\n      }\n    }\n  };\n  const sendInspectionEvent = event => {\n    if (!inspectionObservers.size) {\n      return;\n    }\n    const resolvedInspectionEvent = {\n      ...event,\n      rootId: rootActor.sessionId\n    };\n    inspectionObservers.forEach(observer => observer.next?.(resolvedInspectionEvent));\n  };\n  const system = {\n    _snapshot: {\n      _scheduledEvents: (options?.snapshot && options.snapshot.scheduler) ?? {}\n    },\n    _bookId: () => `x:${idCounter++}`,\n    _register: (sessionId, actorRef) => {\n      children.set(sessionId, actorRef);\n      return sessionId;\n    },\n    _unregister: actorRef => {\n      children.delete(actorRef.sessionId);\n      const systemId = reverseKeyedActors.get(actorRef);\n      if (systemId !== undefined) {\n        keyedActors.delete(systemId);\n        reverseKeyedActors.delete(actorRef);\n      }\n    },\n    get: systemId => {\n      return keyedActors.get(systemId);\n    },\n    _set: (systemId, actorRef) => {\n      const existing = keyedActors.get(systemId);\n      if (existing && existing !== actorRef) {\n        throw new Error(`Actor with system ID '${systemId}' already exists.`);\n      }\n      keyedActors.set(systemId, actorRef);\n      reverseKeyedActors.set(actorRef, systemId);\n    },\n    inspect: observerOrFn => {\n      const observer = toObserver(observerOrFn);\n      inspectionObservers.add(observer);\n      return {\n        unsubscribe() {\n          inspectionObservers.delete(observer);\n        }\n      };\n    },\n    _sendInspectionEvent: sendInspectionEvent,\n    _relay: (source, target, event) => {\n      system._sendInspectionEvent({\n        type: '@xstate.event',\n        sourceRef: source,\n        actorRef: target,\n        event\n      });\n      target._send(event);\n    },\n    scheduler,\n    getSnapshot: () => {\n      return {\n        _scheduledEvents: {\n          ...system._snapshot._scheduledEvents\n        }\n      };\n    },\n    start: () => {\n      const scheduledEvents = system._snapshot._scheduledEvents;\n      system._snapshot._scheduledEvents = {};\n      for (const scheduledId in scheduledEvents) {\n        const {\n          source,\n          target,\n          event,\n          delay,\n          id\n        } = scheduledEvents[scheduledId];\n        scheduler.schedule(source, target, event, delay, id);\n      }\n    },\n    _clock: clock,\n    _logger: logger\n  };\n  return system;\n}\n\nlet executingCustomAction = false;\nconst $$ACTOR_TYPE = 1;\n\n// those values are currently used by @xstate/react directly so it's important to keep the assigned values in sync\nlet ProcessingStatus = /*#__PURE__*/function (ProcessingStatus) {\n  ProcessingStatus[ProcessingStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  ProcessingStatus[ProcessingStatus[\"Running\"] = 1] = \"Running\";\n  ProcessingStatus[ProcessingStatus[\"Stopped\"] = 2] = \"Stopped\";\n  return ProcessingStatus;\n}({});\nconst defaultOptions = {\n  clock: {\n    setTimeout: (fn, ms) => {\n      return setTimeout(fn, ms);\n    },\n    clearTimeout: id => {\n      return clearTimeout(id);\n    }\n  },\n  logger: console.log.bind(console),\n  devTools: false\n};\n\n/**\n * An Actor is a running process that can receive events, send events and change\n * its behavior based on the events it receives, which can cause effects outside\n * of the actor. When you run a state machine, it becomes an actor.\n */\nclass Actor {\n  /**\n   * Creates a new actor instance for the given logic with the provided options,\n   * if any.\n   *\n   * @param logic The logic to create an actor from\n   * @param options Actor options\n   */\n  constructor(logic, options) {\n    this.logic = logic;\n    /** The current internal state of the actor. */\n    this._snapshot = void 0;\n    /**\n     * The clock that is responsible for setting and clearing timeouts, such as\n     * delayed events and transitions.\n     */\n    this.clock = void 0;\n    this.options = void 0;\n    /** The unique identifier for this actor relative to its parent. */\n    this.id = void 0;\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this.observers = new Set();\n    this.eventListeners = new Map();\n    this.logger = void 0;\n    /** @internal */\n    this._processingStatus = ProcessingStatus.NotStarted;\n    // Actor Ref\n    this._parent = void 0;\n    /** @internal */\n    this._syncSnapshot = void 0;\n    this.ref = void 0;\n    // TODO: add typings for system\n    this._actorScope = void 0;\n    this._systemId = void 0;\n    /** The globally unique process ID for this invocation. */\n    this.sessionId = void 0;\n    /** The system to which this actor belongs. */\n    this.system = void 0;\n    this._doneEvent = void 0;\n    this.src = void 0;\n    // array of functions to defer\n    this._deferred = [];\n    const resolvedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    const {\n      clock,\n      logger,\n      parent,\n      syncSnapshot,\n      id,\n      systemId,\n      inspect\n    } = resolvedOptions;\n    this.system = parent ? parent.system : createSystem(this, {\n      clock,\n      logger\n    });\n    if (inspect && !parent) {\n      // Always inspect at the system-level\n      this.system.inspect(toObserver(inspect));\n    }\n    this.sessionId = this.system._bookId();\n    this.id = id ?? this.sessionId;\n    this.logger = options?.logger ?? this.system._logger;\n    this.clock = options?.clock ?? this.system._clock;\n    this._parent = parent;\n    this._syncSnapshot = syncSnapshot;\n    this.options = resolvedOptions;\n    this.src = resolvedOptions.src ?? logic;\n    this.ref = this;\n    this._actorScope = {\n      self: this,\n      id: this.id,\n      sessionId: this.sessionId,\n      logger: this.logger,\n      defer: fn => {\n        this._deferred.push(fn);\n      },\n      system: this.system,\n      stopChild: child => {\n        if (child._parent !== this) {\n          throw new Error(`Cannot stop child actor ${child.id} of ${this.id} because it is not a child`);\n        }\n        child._stop();\n      },\n      emit: emittedEvent => {\n        const listeners = this.eventListeners.get(emittedEvent.type);\n        const wildcardListener = this.eventListeners.get('*');\n        if (!listeners && !wildcardListener) {\n          return;\n        }\n        const allListeners = [...(listeners ? listeners.values() : []), ...(wildcardListener ? wildcardListener.values() : [])];\n        for (const handler of allListeners) {\n          handler(emittedEvent);\n        }\n      },\n      actionExecutor: action => {\n        const exec = () => {\n          this._actorScope.system._sendInspectionEvent({\n            type: '@xstate.action',\n            actorRef: this,\n            action: {\n              type: action.type,\n              params: action.params\n            }\n          });\n          if (!action.exec) {\n            return;\n          }\n          const saveExecutingCustomAction = executingCustomAction;\n          try {\n            executingCustomAction = true;\n            action.exec(action.info, action.params);\n          } finally {\n            executingCustomAction = saveExecutingCustomAction;\n          }\n        };\n        if (this._processingStatus === ProcessingStatus.Running) {\n          exec();\n        } else {\n          this._deferred.push(exec);\n        }\n      }\n    };\n\n    // Ensure that the send method is bound to this Actor instance\n    // if destructured\n    this.send = this.send.bind(this);\n    this.system._sendInspectionEvent({\n      type: '@xstate.actor',\n      actorRef: this\n    });\n    if (systemId) {\n      this._systemId = systemId;\n      this.system._set(systemId, this);\n    }\n    this._initState(options?.snapshot ?? options?.state);\n    if (systemId && this._snapshot.status !== 'active') {\n      this.system._unregister(this);\n    }\n  }\n  _initState(persistedState) {\n    try {\n      this._snapshot = persistedState ? this.logic.restoreSnapshot ? this.logic.restoreSnapshot(persistedState, this._actorScope) : persistedState : this.logic.getInitialSnapshot(this._actorScope, this.options?.input);\n    } catch (err) {\n      // if we get here then it means that we assign a value to this._snapshot that is not of the correct type\n      // we can't get the true `TSnapshot & { status: 'error'; }`, it's impossible\n      // so right now this is a lie of sorts\n      this._snapshot = {\n        status: 'error',\n        output: undefined,\n        error: err\n      };\n    }\n  }\n  update(snapshot, event) {\n    // Update state\n    this._snapshot = snapshot;\n\n    // Execute deferred effects\n    let deferredFn;\n    while (deferredFn = this._deferred.shift()) {\n      try {\n        deferredFn();\n      } catch (err) {\n        // this error can only be caught when executing *initial* actions\n        // it's the only time when we call actions provided by the user through those deferreds\n        // when the actor is already running we always execute them synchronously while transitioning\n        // no \"builtin deferred\" should actually throw an error since they are either safe\n        // or the control flow is passed through the mailbox and errors should be caught by the `_process` used by the mailbox\n        this._deferred.length = 0;\n        this._snapshot = {\n          ...snapshot,\n          status: 'error',\n          error: err\n        };\n      }\n    }\n    switch (this._snapshot.status) {\n      case 'active':\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        break;\n      case 'done':\n        // next observers are meant to be notified about done snapshots\n        // this can be seen as something that is different from how observable work\n        // but with observables `complete` callback is called without any arguments\n        // it's more ergonomic for XState to treat a done snapshot as a \"next\" value\n        // and the completion event as something that is separate,\n        // something that merely follows emitting that done snapshot\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        this._stopProcedure();\n        this._complete();\n        this._doneEvent = createDoneActorEvent(this.id, this._snapshot.output);\n        if (this._parent) {\n          this.system._relay(this, this._parent, this._doneEvent);\n        }\n        break;\n      case 'error':\n        this._error(this._snapshot.error);\n        break;\n    }\n    this.system._sendInspectionEvent({\n      type: '@xstate.snapshot',\n      actorRef: this,\n      event,\n      snapshot\n    });\n  }\n\n  /**\n   * Subscribe an observer to an actor\u2019s snapshot values.\n   *\n   * @remarks\n   * The observer will receive the actor\u2019s snapshot value when it is emitted.\n   * The observer can be:\n   *\n   * - A plain function that receives the latest snapshot, or\n   * - An observer object whose `.next(snapshot)` method receives the latest\n   *   snapshot\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as a plain function\n   * const subscription = actor.subscribe((snapshot) => {\n   *   console.log(snapshot);\n   * });\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as an object\n   * const subscription = actor.subscribe({\n   *   next(snapshot) {\n   *     console.log(snapshot);\n   *   },\n   *   error(err) {\n   *     // ...\n   *   },\n   *   complete() {\n   *     // ...\n   *   }\n   * });\n   * ```\n   *\n   * The return value of `actor.subscribe(observer)` is a subscription object\n   * that has an `.unsubscribe()` method. You can call\n   * `subscription.unsubscribe()` to unsubscribe the observer:\n   *\n   * @example\n   *\n   * ```ts\n   * const subscription = actor.subscribe((snapshot) => {\n   *   // ...\n   * });\n   *\n   * // Unsubscribe the observer\n   * subscription.unsubscribe();\n   * ```\n   *\n   * When the actor is stopped, all of its observers will automatically be\n   * unsubscribed.\n   *\n   * @param observer - Either a plain function that receives the latest\n   *   snapshot, or an observer object whose `.next(snapshot)` method receives\n   *   the latest snapshot\n   */\n\n  subscribe(nextListenerOrObserver, errorListener, completeListener) {\n    const observer = toObserver(nextListenerOrObserver, errorListener, completeListener);\n    if (this._processingStatus !== ProcessingStatus.Stopped) {\n      this.observers.add(observer);\n    } else {\n      switch (this._snapshot.status) {\n        case 'done':\n          try {\n            observer.complete?.();\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n          break;\n        case 'error':\n          {\n            const err = this._snapshot.error;\n            if (!observer.error) {\n              reportUnhandledError(err);\n            } else {\n              try {\n                observer.error(err);\n              } catch (err) {\n                reportUnhandledError(err);\n              }\n            }\n            break;\n          }\n      }\n    }\n    return {\n      unsubscribe: () => {\n        this.observers.delete(observer);\n      }\n    };\n  }\n  on(type, handler) {\n    let listeners = this.eventListeners.get(type);\n    if (!listeners) {\n      listeners = new Set();\n      this.eventListeners.set(type, listeners);\n    }\n    const wrappedHandler = handler.bind(undefined);\n    listeners.add(wrappedHandler);\n    return {\n      unsubscribe: () => {\n        listeners.delete(wrappedHandler);\n      }\n    };\n  }\n\n  /** Starts the Actor from the initial state */\n  start() {\n    if (this._processingStatus === ProcessingStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    }\n    if (this._syncSnapshot) {\n      this.subscribe({\n        next: snapshot => {\n          if (snapshot.status === 'active') {\n            this.system._relay(this, this._parent, {\n              type: `xstate.snapshot.${this.id}`,\n              snapshot\n            });\n          }\n        },\n        error: () => {}\n      });\n    }\n    this.system._register(this.sessionId, this);\n    if (this._systemId) {\n      this.system._set(this._systemId, this);\n    }\n    this._processingStatus = ProcessingStatus.Running;\n\n    // TODO: this isn't correct when rehydrating\n    const initEvent = createInitEvent(this.options.input);\n    this.system._sendInspectionEvent({\n      type: '@xstate.event',\n      sourceRef: this._parent,\n      actorRef: this,\n      event: initEvent\n    });\n    const status = this._snapshot.status;\n    switch (status) {\n      case 'done':\n        // a state machine can be \"done\" upon initialization (it could reach a final state using initial microsteps)\n        // we still need to complete observers, flush deferreds etc\n        this.update(this._snapshot, initEvent);\n        // TODO: rethink cleanup of observers, mailbox, etc\n        return this;\n      case 'error':\n        this._error(this._snapshot.error);\n        return this;\n    }\n    if (!this._parent) {\n      this.system.start();\n    }\n    if (this.logic.start) {\n      try {\n        this.logic.start(this._snapshot, this._actorScope);\n      } catch (err) {\n        this._snapshot = {\n          ...this._snapshot,\n          status: 'error',\n          error: err\n        };\n        this._error(err);\n        return this;\n      }\n    }\n\n    // TODO: this notifies all subscribers but usually this is redundant\n    // there is no real change happening here\n    // we need to rethink if this needs to be refactored\n    this.update(this._snapshot, initEvent);\n    if (this.options.devTools) {\n      this.attachDevTools();\n    }\n    this.mailbox.start();\n    return this;\n  }\n  _process(event) {\n    let nextState;\n    let caughtError;\n    try {\n      nextState = this.logic.transition(this._snapshot, event, this._actorScope);\n    } catch (err) {\n      // we wrap it in a box so we can rethrow it later even if falsy value gets caught here\n      caughtError = {\n        err\n      };\n    }\n    if (caughtError) {\n      const {\n        err\n      } = caughtError;\n      this._snapshot = {\n        ...this._snapshot,\n        status: 'error',\n        error: err\n      };\n      this._error(err);\n      return;\n    }\n    this.update(nextState, event);\n    if (event.type === XSTATE_STOP) {\n      this._stopProcedure();\n      this._complete();\n    }\n  }\n  _stop() {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return this;\n    }\n    this.mailbox.clear();\n    if (this._processingStatus === ProcessingStatus.NotStarted) {\n      this._processingStatus = ProcessingStatus.Stopped;\n      return this;\n    }\n    this.mailbox.enqueue({\n      type: XSTATE_STOP\n    });\n    return this;\n  }\n\n  /** Stops the Actor and unsubscribe all listeners. */\n  stop() {\n    if (this._parent) {\n      throw new Error('A non-root actor cannot be stopped directly.');\n    }\n    return this._stop();\n  }\n  _complete() {\n    for (const observer of this.observers) {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    this.observers.clear();\n  }\n  _reportError(err) {\n    if (!this.observers.size) {\n      if (!this._parent) {\n        reportUnhandledError(err);\n      }\n      return;\n    }\n    let reportError = false;\n    for (const observer of this.observers) {\n      const errorListener = observer.error;\n      reportError ||= !errorListener;\n      try {\n        errorListener?.(err);\n      } catch (err2) {\n        reportUnhandledError(err2);\n      }\n    }\n    this.observers.clear();\n    if (reportError) {\n      reportUnhandledError(err);\n    }\n  }\n  _error(err) {\n    this._stopProcedure();\n    this._reportError(err);\n    if (this._parent) {\n      this.system._relay(this, this._parent, createErrorActorEvent(this.id, err));\n    }\n  }\n  // TODO: atm children don't belong entirely to the actor so\n  // in a way - it's not even super aware of them\n  // so we can't stop them from here but we really should!\n  // right now, they are being stopped within the machine's transition\n  // but that could throw and leave us with \"orphaned\" active actors\n  _stopProcedure() {\n    if (this._processingStatus !== ProcessingStatus.Running) {\n      // Actor already stopped; do nothing\n      return this;\n    }\n\n    // Cancel all delayed events\n    this.system.scheduler.cancelAll(this);\n\n    // TODO: mailbox.reset\n    this.mailbox.clear();\n    // TODO: after `stop` we must prepare ourselves for receiving events again\n    // events sent *after* stop signal must be queued\n    // it seems like this should be the common behavior for all of our consumers\n    // so perhaps this should be unified somehow for all of them\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this._processingStatus = ProcessingStatus.Stopped;\n    this.system._unregister(this);\n    return this;\n  }\n\n  /** @internal */\n  _send(event) {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    this.mailbox.enqueue(event);\n  }\n\n  /**\n   * Sends an event to the running Actor to trigger a transition.\n   *\n   * @param event The event to send\n   */\n  send(event) {\n    this.system._relay(undefined, this, event);\n  }\n  attachDevTools() {\n    const {\n      devTools\n    } = this.options;\n    if (devTools) {\n      const resolvedDevToolsAdapter = typeof devTools === 'function' ? devTools : devToolsAdapter;\n      resolvedDevToolsAdapter(this);\n    }\n  }\n  toJSON() {\n    return {\n      xstate$$type: $$ACTOR_TYPE,\n      id: this.id\n    };\n  }\n\n  /**\n   * Obtain the internal state of the actor, which can be persisted.\n   *\n   * @remarks\n   * The internal state can be persisted from any actor, not only machines.\n   *\n   * Note that the persisted state is not the same as the snapshot from\n   * {@link Actor.getSnapshot}. Persisted state represents the internal state of\n   * the actor, while snapshots represent the actor's last emitted value.\n   *\n   * Can be restored with {@link ActorOptions.state}\n   * @see https://stately.ai/docs/persistence\n   */\n\n  getPersistedSnapshot(options) {\n    return this.logic.getPersistedSnapshot(this._snapshot, options);\n  }\n  [symbolObservable]() {\n    return this;\n  }\n\n  /**\n   * Read an actor\u2019s snapshot synchronously.\n   *\n   * @remarks\n   * The snapshot represent an actor's last emitted value.\n   *\n   * When an actor receives an event, its internal state may change. An actor\n   * may emit a snapshot when a state transition occurs.\n   *\n   * Note that some actors, such as callback actors generated with\n   * `fromCallback`, will not emit snapshots.\n   * @see {@link Actor.subscribe} to subscribe to an actor\u2019s snapshot values.\n   * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).\n   */\n  getSnapshot() {\n    return this._snapshot;\n  }\n}\n/**\n * Creates a new actor instance for the given actor logic with the provided\n * options, if any.\n *\n * @remarks\n * When you create an actor from actor logic via `createActor(logic)`, you\n * implicitly create an actor system where the created actor is the root actor.\n * Any actors spawned from this root actor and its descendants are part of that\n * actor system.\n * @example\n *\n * ```ts\n * import { createActor } from 'xstate';\n * import { someActorLogic } from './someActorLogic.ts';\n *\n * // Creating the actor, which implicitly creates an actor system with itself as the root actor\n * const actor = createActor(someActorLogic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * // Actors must be started by calling `actor.start()`, which will also start the actor system.\n * actor.start();\n *\n * // Actors can receive events\n * actor.send({ type: 'someEvent' });\n *\n * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.\n * actor.stop();\n * ```\n *\n * @param logic - The actor logic to create an actor from. For a state machine\n *   actor logic creator, see {@link createMachine}. Other actor logic creators\n *   include {@link fromCallback}, {@link fromEventObservable},\n *   {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.\n * @param options - Actor options\n */\nfunction createActor(logic, ...[options]) {\n  return new Actor(logic, options);\n}\n\n/**\n * Creates a new Interpreter instance for the given machine with the provided\n * options, if any.\n *\n * @deprecated Use `createActor` instead\n * @alias\n */\nconst interpret = createActor;\n\n/**\n * @deprecated Use `Actor` instead.\n * @alias\n */\n\nfunction resolveCancel(_, snapshot, actionArgs, actionParams, {\n  sendId\n}) {\n  const resolvedSendId = typeof sendId === 'function' ? sendId(actionArgs, actionParams) : sendId;\n  return [snapshot, {\n    sendId: resolvedSendId\n  }, undefined];\n}\nfunction executeCancel(actorScope, params) {\n  actorScope.defer(() => {\n    actorScope.system.scheduler.cancel(actorScope.self, params.sendId);\n  });\n}\n/**\n * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The\n * canceled `sendTo(...)` action will not send its event or execute, unless the\n * `delay` has already elapsed before `cancel(...)` is called.\n *\n * @example\n *\n * ```ts\n * import { createMachine, sendTo, cancel } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     sendEvent: {\n *       actions: sendTo(\n *         'some-actor',\n *         { type: 'someEvent' },\n *         {\n *           id: 'some-id',\n *           delay: 1000\n *         }\n *       )\n *     },\n *     cancelEvent: {\n *       actions: cancel('some-id')\n *     }\n *   }\n * });\n * ```\n *\n * @param sendId The `id` of the `sendTo(...)` action to cancel.\n */\nfunction cancel(sendId) {\n  function cancel(_args, _params) {\n  }\n  cancel.type = 'xstate.cancel';\n  cancel.sendId = sendId;\n  cancel.resolve = resolveCancel;\n  cancel.execute = executeCancel;\n  return cancel;\n}\n\nfunction resolveSpawn(actorScope, snapshot, actionArgs, _actionParams, {\n  id,\n  systemId,\n  src,\n  input,\n  syncSnapshot\n}) {\n  const logic = typeof src === 'string' ? resolveReferencedActor(snapshot.machine, src) : src;\n  const resolvedId = typeof id === 'function' ? id(actionArgs) : id;\n  let actorRef;\n  let resolvedInput = undefined;\n  if (logic) {\n    resolvedInput = typeof input === 'function' ? input({\n      context: snapshot.context,\n      event: actionArgs.event,\n      self: actorScope.self\n    }) : input;\n    actorRef = createActor(logic, {\n      id: resolvedId,\n      src,\n      parent: actorScope.self,\n      syncSnapshot,\n      systemId,\n      input: resolvedInput\n    });\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children: {\n      ...snapshot.children,\n      [resolvedId]: actorRef\n    }\n  }), {\n    id,\n    systemId,\n    actorRef,\n    src,\n    input: resolvedInput\n  }, undefined];\n}\nfunction executeSpawn(actorScope, {\n  actorRef\n}) {\n  if (!actorRef) {\n    return;\n  }\n  actorScope.defer(() => {\n    if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    actorRef.start();\n  });\n}\nfunction spawnChild(...[src, {\n  id,\n  systemId,\n  input,\n  syncSnapshot = false\n} = {}]) {\n  function spawnChild(_args, _params) {\n  }\n  spawnChild.type = 'xstate.spawnChild';\n  spawnChild.id = id;\n  spawnChild.systemId = systemId;\n  spawnChild.src = src;\n  spawnChild.input = input;\n  spawnChild.syncSnapshot = syncSnapshot;\n  spawnChild.resolve = resolveSpawn;\n  spawnChild.execute = executeSpawn;\n  return spawnChild;\n}\n\nfunction resolveStop(_, snapshot, args, actionParams, {\n  actorRef\n}) {\n  const actorRefOrString = typeof actorRef === 'function' ? actorRef(args, actionParams) : actorRef;\n  const resolvedActorRef = typeof actorRefOrString === 'string' ? snapshot.children[actorRefOrString] : actorRefOrString;\n  let children = snapshot.children;\n  if (resolvedActorRef) {\n    children = {\n      ...children\n    };\n    delete children[resolvedActorRef.id];\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children\n  }), resolvedActorRef, undefined];\n}\nfunction executeStop(actorScope, actorRef) {\n  if (!actorRef) {\n    return;\n  }\n\n  // we need to eagerly unregister it here so a new actor with the same systemId can be registered immediately\n  // since we defer actual stopping of the actor but we don't defer actor creations (and we can't do that)\n  // this could throw on `systemId` collision, for example, when dealing with reentering transitions\n  actorScope.system._unregister(actorRef);\n\n  // this allows us to prevent an actor from being started if it gets stopped within the same macrostep\n  // this can happen, for example, when the invoking state is being exited immediately by an always transition\n  if (actorRef._processingStatus !== ProcessingStatus.Running) {\n    actorScope.stopChild(actorRef);\n    return;\n  }\n  // stopping a child enqueues a stop event in the child actor's mailbox\n  // we need for all of the already enqueued events to be processed before we stop the child\n  // the parent itself might want to send some events to a child (for example from exit actions on the invoking state)\n  // and we don't want to ignore those events\n  actorScope.defer(() => {\n    actorScope.stopChild(actorRef);\n  });\n}\n/**\n * Stops a child actor.\n *\n * @param actorRef The actor to stop.\n */\nfunction stopChild(actorRef) {\n  function stop(_args, _params) {\n  }\n  stop.type = 'xstate.stopChild';\n  stop.actorRef = actorRef;\n  stop.resolve = resolveStop;\n  stop.execute = executeStop;\n  return stop;\n}\n\n/**\n * Stops a child actor.\n *\n * @deprecated Use `stopChild(...)` instead\n * @alias\n */\nconst stop = stopChild;\n\nfunction checkStateIn(snapshot, _, {\n  stateValue\n}) {\n  if (typeof stateValue === 'string' && isStateId(stateValue)) {\n    const target = snapshot.machine.getStateNodeById(stateValue);\n    return snapshot._nodes.some(sn => sn === target);\n  }\n  return snapshot.matches(stateValue);\n}\nfunction stateIn(stateValue) {\n  function stateIn() {\n    return false;\n  }\n  stateIn.check = checkStateIn;\n  stateIn.stateValue = stateValue;\n  return stateIn;\n}\nfunction checkNot(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return !evaluateGuard(guards[0], context, event, snapshot);\n}\n\n/**\n * Higher-order guard that evaluates to `true` if the `guard` passed to it\n * evaluates to `false`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, not } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => false\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: not('someNamedGuard'),\n *       actions: () => {\n *         // will be executed if guard in `not(...)`\n *         // evaluates to `false`\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard\n */\nfunction not(guard) {\n  function not(_args, _params) {\n    return false;\n  }\n  not.check = checkNot;\n  not.guards = [guard];\n  return not;\n}\nfunction checkAnd(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.every(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if all `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, and } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: and([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if all guards in `and(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction and(guards) {\n  function and(_args, _params) {\n    return false;\n  }\n  and.check = checkAnd;\n  and.guards = guards;\n  return and;\n}\nfunction checkOr(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.some(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if any of the `guards` passed to\n * it evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, or } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: or([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if any of the guards in `or(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction or(guards) {\n  function or(_args, _params) {\n    return false;\n  }\n  or.check = checkOr;\n  or.guards = guards;\n  return or;\n}\n\n// TODO: throw on cycles (depth check should be enough)\nfunction evaluateGuard(guard, context, event, snapshot) {\n  const {\n    machine\n  } = snapshot;\n  const isInline = typeof guard === 'function';\n  const resolved = isInline ? guard : machine.implementations.guards[typeof guard === 'string' ? guard : guard.type];\n  if (!isInline && !resolved) {\n    throw new Error(`Guard '${typeof guard === 'string' ? guard : guard.type}' is not implemented.'.`);\n  }\n  if (typeof resolved !== 'function') {\n    return evaluateGuard(resolved, context, event, snapshot);\n  }\n  const guardArgs = {\n    context,\n    event\n  };\n  const guardParams = isInline || typeof guard === 'string' ? undefined : 'params' in guard ? typeof guard.params === 'function' ? guard.params({\n    context,\n    event\n  }) : guard.params : undefined;\n  if (!('check' in resolved)) {\n    // the existing type of `.guards` assumes non-nullable `TExpressionGuard`\n    // inline guards expect `TExpressionGuard` to be set to `undefined`\n    // it's fine to cast this here, our logic makes sure that we call those 2 \"variants\" correctly\n    return resolved(guardArgs, guardParams);\n  }\n  const builtinGuard = resolved;\n  return builtinGuard.check(snapshot, guardArgs, resolved // this holds all params\n  );\n}\n\nconst isAtomicStateNode = stateNode => stateNode.type === 'atomic' || stateNode.type === 'final';\nfunction getChildren(stateNode) {\n  return Object.values(stateNode.states).filter(sn => sn.type !== 'history');\n}\nfunction getProperAncestors(stateNode, toStateNode) {\n  const ancestors = [];\n  if (toStateNode === stateNode) {\n    return ancestors;\n  }\n\n  // add all ancestors\n  let m = stateNode.parent;\n  while (m && m !== toStateNode) {\n    ancestors.push(m);\n    m = m.parent;\n  }\n  return ancestors;\n}\nfunction getAllStateNodes(stateNodes) {\n  const nodeSet = new Set(stateNodes);\n  const adjList = getAdjList(nodeSet);\n\n  // add descendants\n  for (const s of nodeSet) {\n    // if previously active, add existing child nodes\n    if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n      getInitialStateNodesWithTheirAncestors(s).forEach(sn => nodeSet.add(sn));\n    } else {\n      if (s.type === 'parallel') {\n        for (const child of getChildren(s)) {\n          if (child.type === 'history') {\n            continue;\n          }\n          if (!nodeSet.has(child)) {\n            const initialStates = getInitialStateNodesWithTheirAncestors(child);\n            for (const initialStateNode of initialStates) {\n              nodeSet.add(initialStateNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // add all ancestors\n  for (const s of nodeSet) {\n    let m = s.parent;\n    while (m) {\n      nodeSet.add(m);\n      m = m.parent;\n    }\n  }\n  return nodeSet;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n  const childStateNodes = adjList.get(baseNode);\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n  if (baseNode.type === 'compound') {\n    const childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isAtomicStateNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n  const stateValue = {};\n  for (const childStateNode of childStateNodes) {\n    stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);\n  }\n  return stateValue;\n}\nfunction getAdjList(stateNodes) {\n  const adjList = new Map();\n  for (const s of stateNodes) {\n    if (!adjList.has(s)) {\n      adjList.set(s, []);\n    }\n    if (s.parent) {\n      if (!adjList.has(s.parent)) {\n        adjList.set(s.parent, []);\n      }\n      adjList.get(s.parent).push(s);\n    }\n  }\n  return adjList;\n}\nfunction getStateValue(rootNode, stateNodes) {\n  const config = getAllStateNodes(stateNodes);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction isInFinalState(stateNodeSet, stateNode) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(s => s.type === 'final' && stateNodeSet.has(s));\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(sn => isInFinalState(stateNodeSet, sn));\n  }\n  return stateNode.type === 'final';\n}\nconst isStateId = str => str[0] === STATE_IDENTIFIER;\nfunction getCandidates(stateNode, receivedEventType) {\n  const candidates = stateNode.transitions.get(receivedEventType) || [...stateNode.transitions.keys()].filter(eventDescriptor => {\n    // check if transition is a wildcard transition,\n    // which matches any non-transient events\n    if (eventDescriptor === WILDCARD) {\n      return true;\n    }\n    if (!eventDescriptor.endsWith('.*')) {\n      return false;\n    }\n    const partialEventTokens = eventDescriptor.split('.');\n    const eventTokens = receivedEventType.split('.');\n    for (let tokenIndex = 0; tokenIndex < partialEventTokens.length; tokenIndex++) {\n      const partialEventToken = partialEventTokens[tokenIndex];\n      const eventToken = eventTokens[tokenIndex];\n      if (partialEventToken === '*') {\n        const isLastToken = tokenIndex === partialEventTokens.length - 1;\n        return isLastToken;\n      }\n      if (partialEventToken !== eventToken) {\n        return false;\n      }\n    }\n    return true;\n  }).sort((a, b) => b.length - a.length).flatMap(key => stateNode.transitions.get(key));\n  return candidates;\n}\n\n/** All delayed transitions from the config. */\nfunction getDelayedTransitions(stateNode) {\n  const afterConfig = stateNode.config.after;\n  if (!afterConfig) {\n    return [];\n  }\n  const mutateEntryExit = delay => {\n    const afterEvent = createAfterEvent(delay, stateNode.id);\n    const eventType = afterEvent.type;\n    stateNode.entry.push(raise(afterEvent, {\n      id: eventType,\n      delay\n    }));\n    stateNode.exit.push(cancel(eventType));\n    return eventType;\n  };\n  const delayedTransitions = Object.keys(afterConfig).flatMap(delay => {\n    const configTransition = afterConfig[delay];\n    const resolvedTransition = typeof configTransition === 'string' ? {\n      target: configTransition\n    } : configTransition;\n    const resolvedDelay = Number.isNaN(+delay) ? delay : +delay;\n    const eventType = mutateEntryExit(resolvedDelay);\n    return toArray(resolvedTransition).map(transition => ({\n      ...transition,\n      event: eventType,\n      delay: resolvedDelay\n    }));\n  });\n  return delayedTransitions.map(delayedTransition => {\n    const {\n      delay\n    } = delayedTransition;\n    return {\n      ...formatTransition(stateNode, delayedTransition.event, delayedTransition),\n      delay\n    };\n  });\n}\nfunction formatTransition(stateNode, descriptor, transitionConfig) {\n  const normalizedTarget = normalizeTarget(transitionConfig.target);\n  const reenter = transitionConfig.reenter ?? false;\n  const target = resolveTarget(stateNode, normalizedTarget);\n  const transition = {\n    ...transitionConfig,\n    actions: toArray(transitionConfig.actions),\n    guard: transitionConfig.guard,\n    target,\n    source: stateNode,\n    reenter,\n    eventType: descriptor,\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: target ? target.map(t => `#${t.id}`) : undefined\n    })\n  };\n  return transition;\n}\nfunction formatTransitions(stateNode) {\n  const transitions = new Map();\n  if (stateNode.config.on) {\n    for (const descriptor of Object.keys(stateNode.config.on)) {\n      if (descriptor === NULL_EVENT) {\n        throw new Error('Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.');\n      }\n      const transitionsConfig = stateNode.config.on[descriptor];\n      transitions.set(descriptor, toTransitionConfigArray(transitionsConfig).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  if (stateNode.config.onDone) {\n    const descriptor = `xstate.done.state.${stateNode.id}`;\n    transitions.set(descriptor, toTransitionConfigArray(stateNode.config.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n  }\n  for (const invokeDef of stateNode.invoke) {\n    if (invokeDef.onDone) {\n      const descriptor = `xstate.done.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onError) {\n      const descriptor = `xstate.error.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onError).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onSnapshot) {\n      const descriptor = `xstate.snapshot.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onSnapshot).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  for (const delayedTransition of stateNode.after) {\n    let existing = transitions.get(delayedTransition.eventType);\n    if (!existing) {\n      existing = [];\n      transitions.set(delayedTransition.eventType, existing);\n    }\n    existing.push(delayedTransition);\n  }\n  return transitions;\n}\nfunction formatInitialTransition(stateNode, _target) {\n  const resolvedTarget = typeof _target === 'string' ? stateNode.states[_target] : _target ? stateNode.states[_target.target] : undefined;\n  if (!resolvedTarget && _target) {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-base-to-string\n    `Initial state node \"${_target}\" not found on parent state node #${stateNode.id}`);\n  }\n  const transition = {\n    source: stateNode,\n    actions: !_target || typeof _target === 'string' ? [] : toArray(_target.actions),\n    eventType: null,\n    reenter: false,\n    target: resolvedTarget ? [resolvedTarget] : [],\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: resolvedTarget ? [`#${resolvedTarget.id}`] : []\n    })\n  };\n  return transition;\n}\nfunction resolveTarget(stateNode, targets) {\n  if (targets === undefined) {\n    // an undefined target signals that the state node should not transition from that state when receiving that event\n    return undefined;\n  }\n  return targets.map(target => {\n    if (typeof target !== 'string') {\n      return target;\n    }\n    if (isStateId(target)) {\n      return stateNode.machine.getStateNodeById(target);\n    }\n    const isInternalTarget = target[0] === STATE_DELIMITER;\n    // If internal target is defined on machine,\n    // do not include machine key on target\n    if (isInternalTarget && !stateNode.parent) {\n      return getStateNodeByPath(stateNode, target.slice(1));\n    }\n    const resolvedTarget = isInternalTarget ? stateNode.key + target : target;\n    if (stateNode.parent) {\n      try {\n        const targetStateNode = getStateNodeByPath(stateNode.parent, resolvedTarget);\n        return targetStateNode;\n      } catch (err) {\n        throw new Error(`Invalid transition definition for state node '${stateNode.id}':\\n${err.message}`);\n      }\n    } else {\n      throw new Error(`Invalid target: \"${target}\" is not a valid target from the root node. Did you mean \".${target}\"?`);\n    }\n  });\n}\nfunction resolveHistoryDefaultTransition(stateNode) {\n  const normalizedTarget = normalizeTarget(stateNode.config.target);\n  if (!normalizedTarget) {\n    return stateNode.parent.initial;\n  }\n  return {\n    target: normalizedTarget.map(t => typeof t === 'string' ? getStateNodeByPath(stateNode.parent, t) : t)\n  };\n}\nfunction isHistoryNode(stateNode) {\n  return stateNode.type === 'history';\n}\nfunction getInitialStateNodesWithTheirAncestors(stateNode) {\n  const states = getInitialStateNodes(stateNode);\n  for (const initialState of states) {\n    for (const ancestor of getProperAncestors(initialState, stateNode)) {\n      states.add(ancestor);\n    }\n  }\n  return states;\n}\nfunction getInitialStateNodes(stateNode) {\n  const set = new Set();\n  function iter(descStateNode) {\n    if (set.has(descStateNode)) {\n      return;\n    }\n    set.add(descStateNode);\n    if (descStateNode.type === 'compound') {\n      iter(descStateNode.initial.target[0]);\n    } else if (descStateNode.type === 'parallel') {\n      for (const child of getChildren(descStateNode)) {\n        iter(child);\n      }\n    }\n  }\n  iter(stateNode);\n  return set;\n}\n/** Returns the child state node from its relative `stateKey`, or throws. */\nfunction getStateNode(stateNode, stateKey) {\n  if (isStateId(stateKey)) {\n    return stateNode.machine.getStateNodeById(stateKey);\n  }\n  if (!stateNode.states) {\n    throw new Error(`Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`);\n  }\n  const result = stateNode.states[stateKey];\n  if (!result) {\n    throw new Error(`Child state '${stateKey}' does not exist on '${stateNode.id}'`);\n  }\n  return result;\n}\n\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nfunction getStateNodeByPath(stateNode, statePath) {\n  if (typeof statePath === 'string' && isStateId(statePath)) {\n    try {\n      return stateNode.machine.getStateNodeById(statePath);\n    } catch {\n      // try individual paths\n      // throw e;\n    }\n  }\n  const arrayStatePath = toStatePath(statePath).slice();\n  let currentStateNode = stateNode;\n  while (arrayStatePath.length) {\n    const key = arrayStatePath.shift();\n    if (!key.length) {\n      break;\n    }\n    currentStateNode = getStateNode(currentStateNode, key);\n  }\n  return currentStateNode;\n}\n\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param stateValue The state value or State instance\n */\nfunction getStateNodes(stateNode, stateValue) {\n  if (typeof stateValue === 'string') {\n    const childStateNode = stateNode.states[stateValue];\n    if (!childStateNode) {\n      throw new Error(`State '${stateValue}' does not exist on '${stateNode.id}'`);\n    }\n    return [stateNode, childStateNode];\n  }\n  const childStateKeys = Object.keys(stateValue);\n  const childStateNodes = childStateKeys.map(subStateKey => getStateNode(stateNode, subStateKey)).filter(Boolean);\n  return [stateNode.machine.root, stateNode].concat(childStateNodes, childStateKeys.reduce((allSubStateNodes, subStateKey) => {\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    if (!subStateNode) {\n      return allSubStateNodes;\n    }\n    const subStateNodes = getStateNodes(subStateNode, stateValue[subStateKey]);\n    return allSubStateNodes.concat(subStateNodes);\n  }, []));\n}\nfunction transitionAtomicNode(stateNode, stateValue, snapshot, event) {\n  const childStateNode = getStateNode(stateNode, stateValue);\n  const next = childStateNode.next(snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionCompoundNode(stateNode, stateValue, snapshot, event) {\n  const subStateKeys = Object.keys(stateValue);\n  const childStateNode = getStateNode(stateNode, subStateKeys[0]);\n  const next = transitionNode(childStateNode, stateValue[subStateKeys[0]], snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionParallelNode(stateNode, stateValue, snapshot, event) {\n  const allInnerTransitions = [];\n  for (const subStateKey of Object.keys(stateValue)) {\n    const subStateValue = stateValue[subStateKey];\n    if (!subStateValue) {\n      continue;\n    }\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    const innerTransitions = transitionNode(subStateNode, subStateValue, snapshot, event);\n    if (innerTransitions) {\n      allInnerTransitions.push(...innerTransitions);\n    }\n  }\n  if (!allInnerTransitions.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return allInnerTransitions;\n}\nfunction transitionNode(stateNode, stateValue, snapshot, event) {\n  // leaf node\n  if (typeof stateValue === 'string') {\n    return transitionAtomicNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // compound node\n  if (Object.keys(stateValue).length === 1) {\n    return transitionCompoundNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // parallel node\n  return transitionParallelNode(stateNode, stateValue, snapshot, event);\n}\nfunction getHistoryNodes(stateNode) {\n  return Object.keys(stateNode.states).map(key => stateNode.states[key]).filter(sn => sn.type === 'history');\n}\nfunction isDescendant(childStateNode, parentStateNode) {\n  let marker = childStateNode;\n  while (marker.parent && marker.parent !== parentStateNode) {\n    marker = marker.parent;\n  }\n  return marker.parent === parentStateNode;\n}\nfunction hasIntersection(s1, s2) {\n  const set1 = new Set(s1);\n  const set2 = new Set(s2);\n  for (const item of set1) {\n    if (set2.has(item)) {\n      return true;\n    }\n  }\n  for (const item of set2) {\n    if (set1.has(item)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeConflictingTransitions(enabledTransitions, stateNodeSet, historyValue) {\n  const filteredTransitions = new Set();\n  for (const t1 of enabledTransitions) {\n    let t1Preempted = false;\n    const transitionsToRemove = new Set();\n    for (const t2 of filteredTransitions) {\n      if (hasIntersection(computeExitSet([t1], stateNodeSet, historyValue), computeExitSet([t2], stateNodeSet, historyValue))) {\n        if (isDescendant(t1.source, t2.source)) {\n          transitionsToRemove.add(t2);\n        } else {\n          t1Preempted = true;\n          break;\n        }\n      }\n    }\n    if (!t1Preempted) {\n      for (const t3 of transitionsToRemove) {\n        filteredTransitions.delete(t3);\n      }\n      filteredTransitions.add(t1);\n    }\n  }\n  return Array.from(filteredTransitions);\n}\nfunction findLeastCommonAncestor(stateNodes) {\n  const [head, ...tail] = stateNodes;\n  for (const ancestor of getProperAncestors(head, undefined)) {\n    if (tail.every(sn => isDescendant(sn, ancestor))) {\n      return ancestor;\n    }\n  }\n}\nfunction getEffectiveTargetStates(transition, historyValue) {\n  if (!transition.target) {\n    return [];\n  }\n  const targets = new Set();\n  for (const targetNode of transition.target) {\n    if (isHistoryNode(targetNode)) {\n      if (historyValue[targetNode.id]) {\n        for (const node of historyValue[targetNode.id]) {\n          targets.add(node);\n        }\n      } else {\n        for (const node of getEffectiveTargetStates(resolveHistoryDefaultTransition(targetNode), historyValue)) {\n          targets.add(node);\n        }\n      }\n    } else {\n      targets.add(targetNode);\n    }\n  }\n  return [...targets];\n}\nfunction getTransitionDomain(transition, historyValue) {\n  const targetStates = getEffectiveTargetStates(transition, historyValue);\n  if (!targetStates) {\n    return;\n  }\n  if (!transition.reenter && targetStates.every(target => target === transition.source || isDescendant(target, transition.source))) {\n    return transition.source;\n  }\n  const lca = findLeastCommonAncestor(targetStates.concat(transition.source));\n  if (lca) {\n    return lca;\n  }\n\n  // at this point we know that it's a root transition since LCA couldn't be found\n  if (transition.reenter) {\n    return;\n  }\n  return transition.source.machine.root;\n}\nfunction computeExitSet(transitions, stateNodeSet, historyValue) {\n  const statesToExit = new Set();\n  for (const t of transitions) {\n    if (t.target?.length) {\n      const domain = getTransitionDomain(t, historyValue);\n      if (t.reenter && t.source === domain) {\n        statesToExit.add(domain);\n      }\n      for (const stateNode of stateNodeSet) {\n        if (isDescendant(stateNode, domain)) {\n          statesToExit.add(stateNode);\n        }\n      }\n    }\n  }\n  return [...statesToExit];\n}\nfunction areStateNodeCollectionsEqual(prevStateNodes, nextStateNodeSet) {\n  if (prevStateNodes.length !== nextStateNodeSet.size) {\n    return false;\n  }\n  for (const node of prevStateNodes) {\n    if (!nextStateNodeSet.has(node)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** https://www.w3.org/TR/scxml/#microstepProcedure */\nfunction microstep(transitions, currentSnapshot, actorScope, event, isInitial, internalQueue) {\n  if (!transitions.length) {\n    return currentSnapshot;\n  }\n  const mutStateNodeSet = new Set(currentSnapshot._nodes);\n  let historyValue = currentSnapshot.historyValue;\n  const filteredTransitions = removeConflictingTransitions(transitions, mutStateNodeSet, historyValue);\n  let nextState = currentSnapshot;\n\n  // Exit states\n  if (!isInitial) {\n    [nextState, historyValue] = exitStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, historyValue, internalQueue, actorScope.actionExecutor);\n  }\n\n  // Execute transition content\n  nextState = resolveActionsAndContext(nextState, event, actorScope, filteredTransitions.flatMap(t => t.actions), internalQueue, undefined);\n\n  // Enter states\n  nextState = enterStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial);\n  const nextStateNodes = [...mutStateNodeSet];\n  if (nextState.status === 'done') {\n    nextState = resolveActionsAndContext(nextState, event, actorScope, nextStateNodes.sort((a, b) => b.order - a.order).flatMap(state => state.exit), internalQueue, undefined);\n  }\n\n  // eslint-disable-next-line no-useless-catch\n  try {\n    if (historyValue === currentSnapshot.historyValue && areStateNodeCollectionsEqual(currentSnapshot._nodes, mutStateNodeSet)) {\n      return nextState;\n    }\n    return cloneMachineSnapshot(nextState, {\n      _nodes: nextStateNodes,\n      historyValue\n    });\n  } catch (e) {\n    // TODO: Refactor this once proper error handling is implemented.\n    // See https://github.com/statelyai/rfcs/pull/4\n    throw e;\n  }\n}\nfunction getMachineOutput(snapshot, event, actorScope, rootNode, rootCompletionNode) {\n  if (rootNode.output === undefined) {\n    return;\n  }\n  const doneStateEvent = createDoneStateEvent(rootCompletionNode.id, rootCompletionNode.output !== undefined && rootCompletionNode.parent ? resolveOutput(rootCompletionNode.output, snapshot.context, event, actorScope.self) : undefined);\n  return resolveOutput(rootNode.output, snapshot.context, doneStateEvent, actorScope.self);\n}\nfunction enterStates(currentSnapshot, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial) {\n  let nextSnapshot = currentSnapshot;\n  const statesToEnter = new Set();\n  // those are states that were directly targeted or indirectly targeted by the explicit target\n  // in other words, those are states for which initial actions should be executed\n  // when we target `#deep_child` initial actions of its ancestors shouldn't be executed\n  const statesForDefaultEntry = new Set();\n  computeEntrySet(filteredTransitions, historyValue, statesForDefaultEntry, statesToEnter);\n\n  // In the initial state, the root state node is \"entered\".\n  if (isInitial) {\n    statesForDefaultEntry.add(currentSnapshot.machine.root);\n  }\n  const completedNodes = new Set();\n  for (const stateNodeToEnter of [...statesToEnter].sort((a, b) => a.order - b.order)) {\n    mutStateNodeSet.add(stateNodeToEnter);\n    const actions = [];\n\n    // Add entry actions\n    actions.push(...stateNodeToEnter.entry);\n    for (const invokeDef of stateNodeToEnter.invoke) {\n      actions.push(spawnChild(invokeDef.src, {\n        ...invokeDef,\n        syncSnapshot: !!invokeDef.onSnapshot\n      }));\n    }\n    if (statesForDefaultEntry.has(stateNodeToEnter)) {\n      const initialActions = stateNodeToEnter.initial.actions;\n      actions.push(...initialActions);\n    }\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, actions, internalQueue, stateNodeToEnter.invoke.map(invokeDef => invokeDef.id));\n    if (stateNodeToEnter.type === 'final') {\n      const parent = stateNodeToEnter.parent;\n      let ancestorMarker = parent?.type === 'parallel' ? parent : parent?.parent;\n      let rootCompletionNode = ancestorMarker || stateNodeToEnter;\n      if (parent?.type === 'compound') {\n        internalQueue.push(createDoneStateEvent(parent.id, stateNodeToEnter.output !== undefined ? resolveOutput(stateNodeToEnter.output, nextSnapshot.context, event, actorScope.self) : undefined));\n      }\n      while (ancestorMarker?.type === 'parallel' && !completedNodes.has(ancestorMarker) && isInFinalState(mutStateNodeSet, ancestorMarker)) {\n        completedNodes.add(ancestorMarker);\n        internalQueue.push(createDoneStateEvent(ancestorMarker.id));\n        rootCompletionNode = ancestorMarker;\n        ancestorMarker = ancestorMarker.parent;\n      }\n      if (ancestorMarker) {\n        continue;\n      }\n      nextSnapshot = cloneMachineSnapshot(nextSnapshot, {\n        status: 'done',\n        output: getMachineOutput(nextSnapshot, event, actorScope, nextSnapshot.machine.root, rootCompletionNode)\n      });\n    }\n  }\n  return nextSnapshot;\n}\nfunction computeEntrySet(transitions, historyValue, statesForDefaultEntry, statesToEnter) {\n  for (const t of transitions) {\n    const domain = getTransitionDomain(t, historyValue);\n    for (const s of t.target || []) {\n      if (!isHistoryNode(s) && (\n      // if the target is different than the source then it will *definitely* be entered\n      t.source !== s ||\n      // we know that the domain can't lie within the source\n      // if it's different than the source then it's outside of it and it means that the target has to be entered as well\n      t.source !== domain ||\n      // reentering transitions always enter the target, even if it's the source itself\n      t.reenter)) {\n        statesToEnter.add(s);\n        statesForDefaultEntry.add(s);\n      }\n      addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n    }\n    const targetStates = getEffectiveTargetStates(t, historyValue);\n    for (const s of targetStates) {\n      const ancestors = getProperAncestors(s, domain);\n      if (domain?.type === 'parallel') {\n        ancestors.push(domain);\n      }\n      addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, !t.source.parent && t.reenter ? undefined : domain);\n    }\n  }\n}\nfunction addDescendantStatesToEnter(stateNode, historyValue, statesForDefaultEntry, statesToEnter) {\n  if (isHistoryNode(stateNode)) {\n    if (historyValue[stateNode.id]) {\n      const historyStateNodes = historyValue[stateNode.id];\n      for (const s of historyStateNodes) {\n        statesToEnter.add(s);\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyStateNodes) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    } else {\n      const historyDefaultTransition = resolveHistoryDefaultTransition(stateNode);\n      for (const s of historyDefaultTransition.target) {\n        statesToEnter.add(s);\n        if (historyDefaultTransition === stateNode.parent?.initial) {\n          statesForDefaultEntry.add(stateNode.parent);\n        }\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyDefaultTransition.target) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    }\n  } else {\n    if (stateNode.type === 'compound') {\n      const [initialState] = stateNode.initial.target;\n      if (!isHistoryNode(initialState)) {\n        statesToEnter.add(initialState);\n        statesForDefaultEntry.add(initialState);\n      }\n      addDescendantStatesToEnter(initialState, historyValue, statesForDefaultEntry, statesToEnter);\n      addProperAncestorStatesToEnter(initialState, stateNode, statesToEnter, historyValue, statesForDefaultEntry);\n    } else {\n      if (stateNode.type === 'parallel') {\n        for (const child of getChildren(stateNode).filter(sn => !isHistoryNode(sn))) {\n          if (![...statesToEnter].some(s => isDescendant(s, child))) {\n            if (!isHistoryNode(child)) {\n              statesToEnter.add(child);\n              statesForDefaultEntry.add(child);\n            }\n            addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n          }\n        }\n      }\n    }\n  }\n}\nfunction addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, reentrancyDomain) {\n  for (const anc of ancestors) {\n    if (!reentrancyDomain || isDescendant(anc, reentrancyDomain)) {\n      statesToEnter.add(anc);\n    }\n    if (anc.type === 'parallel') {\n      for (const child of getChildren(anc).filter(sn => !isHistoryNode(sn))) {\n        if (![...statesToEnter].some(s => isDescendant(s, child))) {\n          statesToEnter.add(child);\n          addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n        }\n      }\n    }\n  }\n}\nfunction addProperAncestorStatesToEnter(stateNode, toStateNode, statesToEnter, historyValue, statesForDefaultEntry) {\n  addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, getProperAncestors(stateNode, toStateNode));\n}\nfunction exitStates(currentSnapshot, event, actorScope, transitions, mutStateNodeSet, historyValue, internalQueue, _actionExecutor) {\n  let nextSnapshot = currentSnapshot;\n  const statesToExit = computeExitSet(transitions, mutStateNodeSet, historyValue);\n  statesToExit.sort((a, b) => b.order - a.order);\n  let changedHistory;\n\n  // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates\n  for (const exitStateNode of statesToExit) {\n    for (const historyNode of getHistoryNodes(exitStateNode)) {\n      let predicate;\n      if (historyNode.history === 'deep') {\n        predicate = sn => isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);\n      } else {\n        predicate = sn => {\n          return sn.parent === exitStateNode;\n        };\n      }\n      changedHistory ??= {\n        ...historyValue\n      };\n      changedHistory[historyNode.id] = Array.from(mutStateNodeSet).filter(predicate);\n    }\n  }\n  for (const s of statesToExit) {\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, [...s.exit, ...s.invoke.map(def => stopChild(def.id))], internalQueue, undefined);\n    mutStateNodeSet.delete(s);\n  }\n  return [nextSnapshot, changedHistory || historyValue];\n}\nfunction getAction(machine, actionType) {\n  return machine.implementations.actions[actionType];\n}\nfunction resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, extra, retries) {\n  const {\n    machine\n  } = currentSnapshot;\n  let intermediateSnapshot = currentSnapshot;\n  for (const action of actions) {\n    const isInline = typeof action === 'function';\n    const resolvedAction = isInline ? action :\n    // the existing type of `.actions` assumes non-nullable `TExpressionAction`\n    // it's fine to cast this here to get a common type and lack of errors in the rest of the code\n    // our logic below makes sure that we call those 2 \"variants\" correctly\n\n    getAction(machine, typeof action === 'string' ? action : action.type);\n    const actionArgs = {\n      context: intermediateSnapshot.context,\n      event,\n      self: actorScope.self,\n      system: actorScope.system\n    };\n    const actionParams = isInline || typeof action === 'string' ? undefined : 'params' in action ? typeof action.params === 'function' ? action.params({\n      context: intermediateSnapshot.context,\n      event\n    }) : action.params : undefined;\n    if (!resolvedAction || !('resolve' in resolvedAction)) {\n      actorScope.actionExecutor({\n        type: typeof action === 'string' ? action : typeof action === 'object' ? action.type : action.name || '(anonymous)',\n        info: actionArgs,\n        params: actionParams,\n        exec: resolvedAction\n      });\n      continue;\n    }\n    const builtinAction = resolvedAction;\n    const [nextState, params, actions] = builtinAction.resolve(actorScope, intermediateSnapshot, actionArgs, actionParams, resolvedAction,\n    // this holds all params\n    extra);\n    intermediateSnapshot = nextState;\n    if ('retryResolve' in builtinAction) {\n      retries?.push([builtinAction, params]);\n    }\n    if ('execute' in builtinAction) {\n      actorScope.actionExecutor({\n        type: builtinAction.type,\n        info: actionArgs,\n        params,\n        exec: builtinAction.execute.bind(null, actorScope, params)\n      });\n    }\n    if (actions) {\n      intermediateSnapshot = resolveAndExecuteActionsWithContext(intermediateSnapshot, event, actorScope, actions, extra, retries);\n    }\n  }\n  return intermediateSnapshot;\n}\nfunction resolveActionsAndContext(currentSnapshot, event, actorScope, actions, internalQueue, deferredActorIds) {\n  const retries = deferredActorIds ? [] : undefined;\n  const nextState = resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, {\n    internalQueue,\n    deferredActorIds\n  }, retries);\n  retries?.forEach(([builtinAction, params]) => {\n    builtinAction.retryResolve(actorScope, nextState, params);\n  });\n  return nextState;\n}\nfunction macrostep(snapshot, event, actorScope, internalQueue) {\n  let nextSnapshot = snapshot;\n  const microstates = [];\n  function addMicrostate(microstate, event, transitions) {\n    actorScope.system._sendInspectionEvent({\n      type: '@xstate.microstep',\n      actorRef: actorScope.self,\n      event,\n      snapshot: microstate,\n      _transitions: transitions\n    });\n    microstates.push(microstate);\n  }\n\n  // Handle stop event\n  if (event.type === XSTATE_STOP) {\n    nextSnapshot = cloneMachineSnapshot(stopChildren(nextSnapshot, event, actorScope), {\n      status: 'stopped'\n    });\n    addMicrostate(nextSnapshot, event, []);\n    return {\n      snapshot: nextSnapshot,\n      microstates\n    };\n  }\n  let nextEvent = event;\n\n  // Assume the state is at rest (no raised events)\n  // Determine the next state based on the next microstep\n  if (nextEvent.type !== XSTATE_INIT) {\n    const currentEvent = nextEvent;\n    const isErr = isErrorActorEvent(currentEvent);\n    const transitions = selectTransitions(currentEvent, nextSnapshot);\n    if (isErr && !transitions.length) {\n      // TODO: we should likely only allow transitions selected by very explicit descriptors\n      // `*` shouldn't be matched, likely `xstate.error.*` shouldnt be either\n      // similarly `xstate.error.actor.*` and `xstate.error.actor.todo.*` have to be considered too\n      nextSnapshot = cloneMachineSnapshot(snapshot, {\n        status: 'error',\n        error: currentEvent.error\n      });\n      addMicrostate(nextSnapshot, currentEvent, []);\n      return {\n        snapshot: nextSnapshot,\n        microstates\n      };\n    }\n    nextSnapshot = microstep(transitions, snapshot, actorScope, nextEvent, false,\n    // isInitial\n    internalQueue);\n    addMicrostate(nextSnapshot, currentEvent, transitions);\n  }\n  let shouldSelectEventlessTransitions = true;\n  while (nextSnapshot.status === 'active') {\n    let enabledTransitions = shouldSelectEventlessTransitions ? selectEventlessTransitions(nextSnapshot, nextEvent) : [];\n\n    // eventless transitions should always be selected after selecting *regular* transitions\n    // by assigning `undefined` to `previousState` we ensure that `shouldSelectEventlessTransitions` gets always computed to true in such a case\n    const previousState = enabledTransitions.length ? nextSnapshot : undefined;\n    if (!enabledTransitions.length) {\n      if (!internalQueue.length) {\n        break;\n      }\n      nextEvent = internalQueue.shift();\n      enabledTransitions = selectTransitions(nextEvent, nextSnapshot);\n    }\n    nextSnapshot = microstep(enabledTransitions, nextSnapshot, actorScope, nextEvent, false, internalQueue);\n    shouldSelectEventlessTransitions = nextSnapshot !== previousState;\n    addMicrostate(nextSnapshot, nextEvent, enabledTransitions);\n  }\n  if (nextSnapshot.status !== 'active') {\n    stopChildren(nextSnapshot, nextEvent, actorScope);\n  }\n  return {\n    snapshot: nextSnapshot,\n    microstates\n  };\n}\nfunction stopChildren(nextState, event, actorScope) {\n  return resolveActionsAndContext(nextState, event, actorScope, Object.values(nextState.children).map(child => stopChild(child)), [], undefined);\n}\nfunction selectTransitions(event, nextState) {\n  return nextState.machine.getTransitionData(nextState, event);\n}\nfunction selectEventlessTransitions(nextState, event) {\n  const enabledTransitionSet = new Set();\n  const atomicStates = nextState._nodes.filter(isAtomicStateNode);\n  for (const stateNode of atomicStates) {\n    loop: for (const s of [stateNode].concat(getProperAncestors(stateNode, undefined))) {\n      if (!s.always) {\n        continue;\n      }\n      for (const transition of s.always) {\n        if (transition.guard === undefined || evaluateGuard(transition.guard, nextState.context, event, nextState)) {\n          enabledTransitionSet.add(transition);\n          break loop;\n        }\n      }\n    }\n  }\n  return removeConflictingTransitions(Array.from(enabledTransitionSet), new Set(nextState._nodes), nextState.historyValue);\n}\n\n/**\n * Resolves a partial state value with its full representation in the state\n * node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nfunction resolveStateValue(rootNode, stateValue) {\n  const allStateNodes = getAllStateNodes(getStateNodes(rootNode, stateValue));\n  return getStateValue(rootNode, [...allStateNodes]);\n}\n\nfunction isMachineSnapshot(value) {\n  return !!value && typeof value === 'object' && 'machine' in value && 'value' in value;\n}\nconst machineSnapshotMatches = function matches(testValue) {\n  return matchesState(testValue, this.value);\n};\nconst machineSnapshotHasTag = function hasTag(tag) {\n  return this.tags.has(tag);\n};\nconst machineSnapshotCan = function can(event) {\n  const transitionData = this.machine.getTransitionData(this, event);\n  return !!transitionData?.length &&\n  // Check that at least one transition is not forbidden\n  transitionData.some(t => t.target !== undefined || t.actions.length);\n};\nconst machineSnapshotToJSON = function toJSON() {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    getMeta,\n    toJSON,\n    can,\n    hasTag,\n    matches,\n    ...jsonValues\n  } = this;\n  return {\n    ...jsonValues,\n    tags: Array.from(tags)\n  };\n};\nconst machineSnapshotGetMeta = function getMeta() {\n  return this._nodes.reduce((acc, stateNode) => {\n    if (stateNode.meta !== undefined) {\n      acc[stateNode.id] = stateNode.meta;\n    }\n    return acc;\n  }, {});\n};\nfunction createMachineSnapshot(config, machine) {\n  return {\n    status: config.status,\n    output: config.output,\n    error: config.error,\n    machine,\n    context: config.context,\n    _nodes: config._nodes,\n    value: getStateValue(machine.root, config._nodes),\n    tags: new Set(config._nodes.flatMap(sn => sn.tags)),\n    children: config.children,\n    historyValue: config.historyValue || {},\n    matches: machineSnapshotMatches,\n    hasTag: machineSnapshotHasTag,\n    can: machineSnapshotCan,\n    getMeta: machineSnapshotGetMeta,\n    toJSON: machineSnapshotToJSON\n  };\n}\nfunction cloneMachineSnapshot(snapshot, config = {}) {\n  return createMachineSnapshot({\n    ...snapshot,\n    ...config\n  }, snapshot.machine);\n}\nfunction getPersistedSnapshot(snapshot, options) {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    children,\n    context,\n    can,\n    hasTag,\n    matches,\n    getMeta,\n    toJSON,\n    ...jsonValues\n  } = snapshot;\n  const childrenJson = {};\n  for (const id in children) {\n    const child = children[id];\n    childrenJson[id] = {\n      snapshot: child.getPersistedSnapshot(options),\n      src: child.src,\n      systemId: child._systemId,\n      syncSnapshot: child._syncSnapshot\n    };\n  }\n  const persisted = {\n    ...jsonValues,\n    context: persistContext(context),\n    children: childrenJson\n  };\n  return persisted;\n}\nfunction persistContext(contextPart) {\n  let copy;\n  for (const key in contextPart) {\n    const value = contextPart[key];\n    if (value && typeof value === 'object') {\n      if ('sessionId' in value && 'send' in value && 'ref' in value) {\n        copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n          ...contextPart\n        };\n        copy[key] = {\n          xstate$$type: $$ACTOR_TYPE,\n          id: value.id\n        };\n      } else {\n        const result = persistContext(value);\n        if (result !== value) {\n          copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n            ...contextPart\n          };\n          copy[key] = result;\n        }\n      }\n    }\n  }\n  return copy ?? contextPart;\n}\n\nfunction resolveRaise(_, snapshot, args, actionParams, {\n  event: eventOrExpr,\n  id,\n  delay\n}, {\n  internalQueue\n}) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `Only event objects may be used with raise; use raise({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  if (typeof resolvedDelay !== 'number') {\n    internalQueue.push(resolvedEvent);\n  }\n  return [snapshot, {\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }, undefined];\n}\nfunction executeRaise(actorScope, params) {\n  const {\n    event,\n    delay,\n    id\n  } = params;\n  if (typeof delay === 'number') {\n    actorScope.defer(() => {\n      const self = actorScope.self;\n      actorScope.system.scheduler.schedule(self, self, event, delay, id);\n    });\n    return;\n  }\n}\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\nfunction raise(eventOrExpr, options) {\n  function raise(_args, _params) {\n  }\n  raise.type = 'xstate.raise';\n  raise.event = eventOrExpr;\n  raise.id = options?.id;\n  raise.delay = options?.delay;\n  raise.resolve = resolveRaise;\n  raise.execute = executeRaise;\n  return raise;\n}\n\nexport { $$ACTOR_TYPE as $, createActor as A, Actor as B, interpret as C, and as D, not as E, or as F, stateIn as G, isMachineSnapshot as H, getAllOwnEventDescriptors as I, matchesState as J, pathToStateValue as K, toObserver as L, cancel as M, NULL_EVENT as N, raise as O, spawnChild as P, stop as Q, stopChild as R, STATE_DELIMITER as S, ProcessingStatus as T, cloneMachineSnapshot as U, XSTATE_ERROR as V, createErrorActorEvent as W, XSTATE_STOP as X, toTransitionConfigArray as a, formatTransition as b, createInvokeId as c, formatInitialTransition as d, evaluateGuard as e, formatTransitions as f, getDelayedTransitions as g, getCandidates as h, getAllStateNodes as i, getStateNodes as j, createMachineSnapshot as k, isInFinalState as l, mapValues as m, macrostep as n, transitionNode as o, resolveActionsAndContext as p, createInitEvent as q, resolveStateValue as r, microstep as s, toArray as t, getInitialStateNodes as u, toStatePath as v, isStateId as w, getStateNodeByPath as x, getPersistedSnapshot as y, resolveReferencedActor as z };\n", "import { X as XSTATE_STOP, A as createActor } from '../../dist/raise-c17ec2bc.esm.js';\nimport '../../dev/dist/xstate-dev.esm.js';\n\n/**\n * Represents an actor created by `fromTransition`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import {\n *   fromTransition,\n *   createActor,\n *   type AnyActorSystem\n * } from 'xstate';\n *\n * //* The actor's stored context.\n * type Context = {\n *   // The current count.\n *   count: number;\n *   // The amount to increase `count` by.\n *   step: number;\n * };\n * // The events the actor receives.\n * type Event = { type: 'increment' };\n * // The actor's input.\n * type Input = { step?: number };\n *\n * // Actor logic that increments `count` by `step` when it receives an event of\n * // type `increment`.\n * const logic = fromTransition<Context, Event, AnyActorSystem, Input>(\n *   (state, event, actorScope) => {\n *     actorScope.self;\n *     //         ^? TransitionActorRef<Context, Event>\n *\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + state.step\n *       };\n *     }\n *     return state;\n *   },\n *   ({ input, self }) => {\n *     self;\n *     // ^? TransitionActorRef<Context, Event>\n *\n *     return {\n *       count: 0,\n *       step: input.step ?? 1\n *     };\n *   }\n * );\n *\n * const actor = createActor(logic, { input: { step: 10 } });\n * //    ^? TransitionActorRef<Context, Event>\n * ```\n *\n * @see {@link fromTransition}\n */\n\n/**\n * Returns actor logic given a transition function and its initial state.\n *\n * A \u201Ctransition function\u201D is a function that takes the current `state` and\n * received `event` object as arguments, and returns the next state, similar to\n * a reducer.\n *\n * Actors created from transition logic (\u201Ctransition actors\u201D) can:\n *\n * - Receive events\n * - Emit snapshots of its state\n *\n * The transition function\u2019s `state` is used as its transition actor\u2019s\n * `context`.\n *\n * Note that the \"state\" for a transition function is provided by the initial\n * state argument, and is not the same as the State object of an actor or a\n * state within a machine configuration.\n *\n * @example\n *\n * ```ts\n * const transitionLogic = fromTransition(\n *   (state, event) => {\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + 1\n *       };\n *     }\n *     return state;\n *   },\n *   { count: 0 }\n * );\n *\n * const transitionActor = createActor(transitionLogic);\n * transitionActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * transitionActor.start();\n * // => {\n * //   status: 'active',\n * //   context: { count: 0 },\n * //   ...\n * // }\n *\n * transitionActor.send({ type: 'increment' });\n * // => {\n * //   status: 'active',\n * //   context: { count: 1 },\n * //   ...\n * // }\n * ```\n *\n * @param transition The transition function used to describe the transition\n *   logic. It should return the next state given the current state and event.\n *   It receives the following arguments:\n *\n *   - `state` - the current state.\n *   - `event` - the received event.\n *   - `actorScope` - the actor scope object, with properties like `self` and\n *       `system`.\n *\n * @param initialContext The initial state of the transition function, either an\n *   object representing the state, or a function which returns a state object.\n *   If a function, it will receive as its only argument an object with the\n *   following properties:\n *\n *   - `input` - the `input` provided to its parent transition actor.\n *   - `self` - a reference to its parent transition actor.\n *\n * @returns Actor logic\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromTransition(transition, initialContext) {\n  return {\n    config: transition,\n    transition: (snapshot, event, actorScope) => {\n      return {\n        ...snapshot,\n        context: transition(snapshot.context, event, actorScope)\n      };\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: typeof initialContext === 'function' ? initialContext({\n          input\n        }) : initialContext\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n}\n\nconst instanceStates = /* #__PURE__ */new WeakMap();\n\n/**\n * Represents an actor created by `fromCallback`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromCallback, createActor } from 'xstate';\n *\n * // The events the actor receives.\n * type Event = { type: 'someEvent' };\n * // The actor's input.\n * type Input = { name: string };\n *\n * // Actor logic that logs whenever it receives an event of type `someEvent`.\n * const logic = fromCallback<Event, Input>(({ self, input, receive }) => {\n *   self;\n *   // ^? CallbackActorRef<Event, Input>\n *\n *   receive((event) => {\n *     if (event.type === 'someEvent') {\n *       console.log(`${input.name}: received \"someEvent\" event`);\n *       // logs 'myActor: received \"someEvent\" event'\n *     }\n *   });\n * });\n *\n * const actor = createActor(logic, { input: { name: 'myActor' } });\n * //    ^? CallbackActorRef<Event, Input>\n * ```\n *\n * @see {@link fromCallback}\n */\n\n/**\n * An actor logic creator which returns callback logic as defined by a callback\n * function.\n *\n * @remarks\n * Useful for subscription-based or other free-form logic that can send events\n * back to the parent actor.\n *\n * Actors created from callback logic (\u201Ccallback actors\u201D) can:\n *\n * - Receive events via the `receive` function\n * - Send events to the parent actor via the `sendBack` function\n *\n * Callback actors are a bit different from other actors in that they:\n *\n * - Do not work with `onDone`\n * - Do not produce a snapshot using `.getSnapshot()`\n * - Do not emit values when used with `.subscribe()`\n * - Can not be stopped with `.stop()`\n *\n * @example\n *\n * ```typescript\n * const callbackLogic = fromCallback(({ sendBack, receive }) => {\n *   let lockStatus = 'unlocked';\n *\n *   const handler = (event) => {\n *     if (lockStatus === 'locked') {\n *       return;\n *     }\n *     sendBack(event);\n *   };\n *\n *   receive((event) => {\n *     if (event.type === 'lock') {\n *       lockStatus = 'locked';\n *     } else if (event.type === 'unlock') {\n *       lockStatus = 'unlocked';\n *     }\n *   });\n *\n *   document.body.addEventListener('click', handler);\n *\n *   return () => {\n *     document.body.removeEventListener('click', handler);\n *   };\n * });\n * ```\n *\n * @param callback - The callback function used to describe the callback logic\n *   The callback function is passed an object with the following properties:\n *\n *   - `receive` - A function that can send events back to the parent actor; the\n *       listener is then called whenever events are received by the callback\n *       actor\n *   - `sendBack` - A function that can send events back to the parent actor\n *   - `input` - Data that was provided to the callback actor\n *   - `self` - The parent actor of the callback actor\n *   - `system` - The actor system to which the callback actor belongs The callback\n *       function can (optionally) return a cleanup function, which is called\n *       when the actor is stopped.\n *\n * @returns Callback logic\n * @see {@link CallbackLogicFunction} for more information about the callback function and its object argument\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromCallback(callback) {\n  const logic = {\n    config: callback,\n    start: (state, actorScope) => {\n      const {\n        self,\n        system,\n        emit\n      } = actorScope;\n      const callbackState = {\n        receivers: undefined,\n        dispose: undefined\n      };\n      instanceStates.set(self, callbackState);\n      callbackState.dispose = callback({\n        input: state.input,\n        system,\n        self,\n        sendBack: event => {\n          if (self.getSnapshot().status === 'stopped') {\n            return;\n          }\n          if (self._parent) {\n            system._relay(self, self._parent, event);\n          }\n        },\n        receive: listener => {\n          callbackState.receivers ??= new Set();\n          callbackState.receivers.add(listener);\n        },\n        emit\n      });\n    },\n    transition: (state, event, actorScope) => {\n      const callbackState = instanceStates.get(actorScope.self);\n      if (event.type === XSTATE_STOP) {\n        state = {\n          ...state,\n          status: 'stopped',\n          error: undefined\n        };\n        callbackState.dispose?.();\n        return state;\n      }\n      callbackState.receivers?.forEach(receiver => receiver(event));\n      return state;\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n  return logic;\n}\n\nconst XSTATE_OBSERVABLE_NEXT = 'xstate.observable.next';\nconst XSTATE_OBSERVABLE_ERROR = 'xstate.observable.error';\nconst XSTATE_OBSERVABLE_COMPLETE = 'xstate.observable.complete';\n\n/**\n * Represents an actor created by `fromObservable` or `fromEventObservable`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromObservable, createActor } from 'xstate';\n * import { interval } from 'rxjs';\n *\n * // The type of the value observed by the actor's logic.\n * type Context = number;\n * // The actor's input.\n * type Input = { period?: number };\n *\n * // Actor logic that observes a number incremented every `input.period`\n * // milliseconds (default: 1_000).\n * const logic = fromObservable<Context, Input>(({ input, self }) => {\n *   self;\n *   // ^? ObservableActorRef<Event, Input>\n *\n *   return interval(input.period ?? 1_000);\n * });\n *\n * const actor = createActor(logic, { input: { period: 2_000 } });\n * //    ^? ObservableActorRef<Event, Input>\n * ```\n *\n * @see {@link fromObservable}\n * @see {@link fromEventObservable}\n */\n\n/**\n * Observable actor logic is described by an observable stream of values. Actors\n * created from observable logic (\u201Cobservable actors\u201D) can:\n *\n * - Emit snapshots of the observable\u2019s emitted value\n *\n * The observable\u2019s emitted value is used as its observable actor\u2019s `context`.\n *\n * Sending events to observable actors will have no effect.\n *\n * @example\n *\n * ```ts\n * import { fromObservable, createActor } from 'xstate';\n * import { interval } from 'rxjs';\n *\n * const logic = fromObservable((obj) => interval(1000));\n *\n * const actor = createActor(logic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot.context);\n * });\n *\n * actor.start();\n * // At every second:\n * // Logs 0\n * // Logs 1\n * // Logs 2\n * // ...\n * ```\n *\n * @param observableCreator A function that creates an observable. It receives\n *   one argument, an object with the following properties:\n *\n *   - `input` - Data that was provided to the observable actor\n *   - `self` - The parent actor\n *   - `system` - The actor system to which the observable actor belongs\n *\n *   It should return a {@link Subscribable}, which is compatible with an RxJS\n *   Observable, although RxJS is not required to create them.\n * @see {@link https://rxjs.dev} for documentation on RxJS Observable and observable creators.\n * @see {@link Subscribable} interface in XState, which is based on and compatible with RxJS Observable.\n */\nfunction fromObservable(observableCreator) {\n  // TODO: add event types\n  const logic = {\n    config: observableCreator,\n    transition: (snapshot, event) => {\n      if (snapshot.status !== 'active') {\n        return snapshot;\n      }\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_NEXT:\n          {\n            const newSnapshot = {\n              ...snapshot,\n              context: event.data\n            };\n            return newSnapshot;\n          }\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...snapshot,\n            status: 'error',\n            error: event.data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...snapshot,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_STOP:\n          snapshot._subscription.unsubscribe();\n          return {\n            ...snapshot,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return snapshot;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = observableCreator({\n        input: state.input,\n        system,\n        self,\n        emit\n      }).subscribe({\n        next: value => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_NEXT,\n            data: value\n          });\n        },\n        error: err => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_COMPLETE\n          });\n        }\n      });\n    },\n    getPersistedSnapshot: ({\n      _subscription,\n      ...state\n    }) => state,\n    restoreSnapshot: state => ({\n      ...state,\n      _subscription: undefined\n    })\n  };\n  return logic;\n}\n\n/**\n * Creates event observable logic that listens to an observable that delivers\n * event objects.\n *\n * Event observable actor logic is described by an observable stream of\n * {@link https://stately.ai/docs/transitions#event-objects | event objects}.\n * Actors created from event observable logic (\u201Cevent observable actors\u201D) can:\n *\n * - Implicitly send events to its parent actor\n * - Emit snapshots of its emitted event objects\n *\n * Sending events to event observable actors will have no effect.\n *\n * @example\n *\n * ```ts\n * import {\n *   fromEventObservable,\n *   Subscribable,\n *   EventObject,\n *   createMachine,\n *   createActor\n * } from 'xstate';\n * import { fromEvent } from 'rxjs';\n *\n * const mouseClickLogic = fromEventObservable(\n *   () => fromEvent(document.body, 'click') as Subscribable<EventObject>\n * );\n *\n * const canvasMachine = createMachine({\n *   invoke: {\n *     // Will send mouse `click` events to the canvas actor\n *     src: mouseClickLogic\n *   }\n * });\n *\n * const canvasActor = createActor(canvasMachine);\n * canvasActor.start();\n * ```\n *\n * @param lazyObservable A function that creates an observable that delivers\n *   event objects. It receives one argument, an object with the following\n *   properties:\n *\n *   - `input` - Data that was provided to the event observable actor\n *   - `self` - The parent actor\n *   - `system` - The actor system to which the event observable actor belongs.\n *\n *   It should return a {@link Subscribable}, which is compatible with an RxJS\n *   Observable, although RxJS is not required to create them.\n */\nfunction fromEventObservable(lazyObservable) {\n  // TODO: event types\n  const logic = {\n    config: lazyObservable,\n    transition: (state, event) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...state,\n            status: 'error',\n            error: event.data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...state,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_STOP:\n          state._subscription.unsubscribe();\n          return {\n            ...state,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = lazyObservable({\n        input: state.input,\n        system,\n        self,\n        emit\n      }).subscribe({\n        next: value => {\n          if (self._parent) {\n            system._relay(self, self._parent, value);\n          }\n        },\n        error: err => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_COMPLETE\n          });\n        }\n      });\n    },\n    getPersistedSnapshot: ({\n      _subscription,\n      ...snapshot\n    }) => snapshot,\n    restoreSnapshot: snapshot => ({\n      ...snapshot,\n      _subscription: undefined\n    })\n  };\n  return logic;\n}\n\nconst XSTATE_PROMISE_RESOLVE = 'xstate.promise.resolve';\nconst XSTATE_PROMISE_REJECT = 'xstate.promise.reject';\n\n/**\n * Represents an actor created by `fromPromise`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromPromise, createActor } from 'xstate';\n *\n * // The actor's resolved output\n * type Output = string;\n * // The actor's input.\n * type Input = { message: string };\n *\n * // Actor logic that fetches the url of an image of a cat saying `input.message`.\n * const logic = fromPromise<Output, Input>(async ({ input, self }) => {\n *   self;\n *   // ^? PromiseActorRef<Output, Input>\n *\n *   const data = await fetch(\n *     `https://cataas.com/cat/says/${input.message}`\n *   );\n *   const url = await data.json();\n *   return url;\n * });\n *\n * const actor = createActor(logic, { input: { message: 'hello world' } });\n * //    ^? PromiseActorRef<Output, Input>\n * ```\n *\n * @see {@link fromPromise}\n */\n\nconst controllerMap = new WeakMap();\n\n/**\n * An actor logic creator which returns promise logic as defined by an async\n * process that resolves or rejects after some time.\n *\n * Actors created from promise actor logic (\u201Cpromise actors\u201D) can:\n *\n * - Emit the resolved value of the promise\n * - Output the resolved value of the promise\n *\n * Sending events to promise actors will have no effect.\n *\n * @example\n *\n * ```ts\n * const promiseLogic = fromPromise(async () => {\n *   const result = await fetch('https://example.com/...').then((data) =>\n *     data.json()\n *   );\n *\n *   return result;\n * });\n *\n * const promiseActor = createActor(promiseLogic);\n * promiseActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * promiseActor.start();\n * // => {\n * //   output: undefined,\n * //   status: 'active'\n * //   ...\n * // }\n *\n * // After promise resolves\n * // => {\n * //   output: { ... },\n * //   status: 'done',\n * //   ...\n * // }\n * ```\n *\n * @param promiseCreator A function which returns a Promise, and accepts an\n *   object with the following properties:\n *\n *   - `input` - Data that was provided to the promise actor\n *   - `self` - The parent actor of the promise actor\n *   - `system` - The actor system to which the promise actor belongs\n *\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromPromise(promiseCreator) {\n  const logic = {\n    config: promiseCreator,\n    transition: (state, event, scope) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case XSTATE_PROMISE_RESOLVE:\n          {\n            const resolvedValue = event.data;\n            return {\n              ...state,\n              status: 'done',\n              output: resolvedValue,\n              input: undefined\n            };\n          }\n        case XSTATE_PROMISE_REJECT:\n          return {\n            ...state,\n            status: 'error',\n            error: event.data,\n            input: undefined\n          };\n        case XSTATE_STOP:\n          {\n            controllerMap.get(scope.self)?.abort();\n            return {\n              ...state,\n              status: 'stopped',\n              input: undefined\n            };\n          }\n        default:\n          return state;\n      }\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      // TODO: determine how to allow customizing this so that promises\n      // can be restarted if necessary\n      if (state.status !== 'active') {\n        return;\n      }\n      const controller = new AbortController();\n      controllerMap.set(self, controller);\n      const resolvedPromise = Promise.resolve(promiseCreator({\n        input: state.input,\n        system,\n        self,\n        signal: controller.signal,\n        emit\n      }));\n      resolvedPromise.then(response => {\n        if (self.getSnapshot().status !== 'active') {\n          return;\n        }\n        controllerMap.delete(self);\n        system._relay(self, self, {\n          type: XSTATE_PROMISE_RESOLVE,\n          data: response\n        });\n      }, errorData => {\n        if (self.getSnapshot().status !== 'active') {\n          return;\n        }\n        controllerMap.delete(self);\n        system._relay(self, self, {\n          type: XSTATE_PROMISE_REJECT,\n          data: errorData\n        });\n      });\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n  return logic;\n}\n\nconst emptyLogic = fromTransition(_ => undefined, undefined);\nfunction createEmptyActor() {\n  return createActor(emptyLogic);\n}\n\nexport { createEmptyActor, fromCallback, fromEventObservable, fromObservable, fromPromise, fromTransition };\n", "import { T as ProcessingStatus, z as resolveReferencedActor, A as createActor, U as cloneMachineSnapshot, V as XSTATE_ERROR, W as createErrorActorEvent, e as evaluateGuard, M as cancel, O as raise, P as spawnChild, R as stopChild } from './raise-c17ec2bc.esm.js';\n\nfunction createSpawner(actorScope, {\n  machine,\n  context\n}, event, spawnedChildren) {\n  const spawn = (src, options) => {\n    if (typeof src === 'string') {\n      const logic = resolveReferencedActor(machine, src);\n      if (!logic) {\n        throw new Error(`Actor logic '${src}' not implemented in machine '${machine.id}'`);\n      }\n      const actorRef = createActor(logic, {\n        id: options?.id,\n        parent: actorScope.self,\n        syncSnapshot: options?.syncSnapshot,\n        input: typeof options?.input === 'function' ? options.input({\n          context,\n          event,\n          self: actorScope.self\n        }) : options?.input,\n        src,\n        systemId: options?.systemId\n      });\n      spawnedChildren[actorRef.id] = actorRef;\n      return actorRef;\n    } else {\n      const actorRef = createActor(src, {\n        id: options?.id,\n        parent: actorScope.self,\n        syncSnapshot: options?.syncSnapshot,\n        input: options?.input,\n        src,\n        systemId: options?.systemId\n      });\n      return actorRef;\n    }\n  };\n  return (src, options) => {\n    const actorRef = spawn(src, options); // TODO: fix types\n    spawnedChildren[actorRef.id] = actorRef;\n    actorScope.defer(() => {\n      if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n        return;\n      }\n      actorRef.start();\n    });\n    return actorRef;\n  };\n}\n\nfunction resolveAssign(actorScope, snapshot, actionArgs, actionParams, {\n  assignment\n}) {\n  if (!snapshot.context) {\n    throw new Error('Cannot assign to undefined `context`. Ensure that `context` is defined in the machine config.');\n  }\n  const spawnedChildren = {};\n  const assignArgs = {\n    context: snapshot.context,\n    event: actionArgs.event,\n    spawn: createSpawner(actorScope, snapshot, actionArgs.event, spawnedChildren),\n    self: actorScope.self,\n    system: actorScope.system\n  };\n  let partialUpdate = {};\n  if (typeof assignment === 'function') {\n    partialUpdate = assignment(assignArgs, actionParams);\n  } else {\n    for (const key of Object.keys(assignment)) {\n      const propAssignment = assignment[key];\n      partialUpdate[key] = typeof propAssignment === 'function' ? propAssignment(assignArgs, actionParams) : propAssignment;\n    }\n  }\n  const updatedContext = Object.assign({}, snapshot.context, partialUpdate);\n  return [cloneMachineSnapshot(snapshot, {\n    context: updatedContext,\n    children: Object.keys(spawnedChildren).length ? {\n      ...snapshot.children,\n      ...spawnedChildren\n    } : snapshot.children\n  }), undefined, undefined];\n}\n/**\n * Updates the current context of the machine.\n *\n * @example\n *\n * ```ts\n * import { createMachine, assign } from 'xstate';\n *\n * const countMachine = createMachine({\n *   context: {\n *     count: 0,\n *     message: ''\n *   },\n *   on: {\n *     inc: {\n *       actions: assign({\n *         count: ({ context }) => context.count + 1\n *       })\n *     },\n *     updateMessage: {\n *       actions: assign(({ context, event }) => {\n *         return {\n *           message: event.message.trim()\n *         };\n *       })\n *     }\n *   }\n * });\n * ```\n *\n * @param assignment An object that represents the partial context to update, or\n *   a function that returns an object that represents the partial context to\n *   update.\n */\nfunction assign(assignment) {\n  function assign(_args, _params) {\n  }\n  assign.type = 'xstate.assign';\n  assign.assignment = assignment;\n  assign.resolve = resolveAssign;\n  return assign;\n}\n\nfunction resolveEmit(_, snapshot, args, actionParams, {\n  event: eventOrExpr\n}) {\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  return [snapshot, {\n    event: resolvedEvent\n  }, undefined];\n}\nfunction executeEmit(actorScope, {\n  event\n}) {\n  actorScope.defer(() => actorScope.emit(event));\n}\n/**\n * Emits an event to event handlers registered on the actor via `actor.on(event,\n * handler)`.\n *\n * @example\n *\n * ```ts\n * import { emit } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     something: {\n *       actions: emit({\n *         type: 'emitted',\n *         some: 'data'\n *       })\n *     }\n *   }\n *   // ...\n * });\n *\n * const actor = createActor(machine).start();\n *\n * actor.on('emitted', (event) => {\n *   console.log(event);\n * });\n *\n * actor.send({ type: 'something' });\n * // logs:\n * // {\n * //   type: 'emitted',\n * //   some: 'data'\n * // }\n * ```\n */\nfunction emit(/** The event to emit, or an expression that returns an event to emit. */\neventOrExpr) {\n  function emit(_args, _params) {\n  }\n  emit.type = 'xstate.emit';\n  emit.event = eventOrExpr;\n  emit.resolve = resolveEmit;\n  emit.execute = executeEmit;\n  return emit;\n}\n\n/**\n * @remarks\n * `T | unknown` reduces to `unknown` and that can be problematic when it comes\n * to contextual typing. It especially is a problem when the union has a\n * function member, like here:\n *\n * ```ts\n * declare function test(\n *   cbOrVal: ((arg: number) => unknown) | unknown\n * ): void;\n * test((arg) => {}); // oops, implicit any\n * ```\n *\n * This type can be used to avoid this problem. This union represents the same\n * value space as `unknown`.\n */\n\n// https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887\n\n// @TODO: Replace with native `NoInfer` when TS issue gets fixed:\n// https://github.com/microsoft/TypeScript/pull/57673\n\n/** @deprecated Use the built-in `NoInfer` type instead */\n\n/** The full definition of an event, with a string `type`. */\n\n/**\n * The string or object representing the state value relative to the parent\n * state node.\n *\n * @remarks\n * - For a child atomic state node, this is a string, e.g., `\"pending\"`.\n * - For complex state nodes, this is an object, e.g., `{ success:\n *   \"someChildState\" }`.\n */\n\n/** @deprecated Use `AnyMachineSnapshot` instead */\n\n// TODO: possibly refactor this somehow, use even a simpler type, and maybe even make `machine.options` private or something\n/** @ignore */\n\nlet SpecialTargets = /*#__PURE__*/function (SpecialTargets) {\n  SpecialTargets[\"Parent\"] = \"#_parent\";\n  SpecialTargets[\"Internal\"] = \"#_internal\";\n  return SpecialTargets;\n}({});\n\n/** @deprecated Use `AnyActor` instead. */\n\n// Based on RxJS types\n\n// TODO: in v6, this should only accept AnyActorLogic, like ActorRefFromLogic\n\n/** @deprecated Use `Actor<T>` instead. */\n\n/**\n * Represents logic which can be used by an actor.\n *\n * @template TSnapshot - The type of the snapshot.\n * @template TEvent - The type of the event object.\n * @template TInput - The type of the input.\n * @template TSystem - The type of the actor system.\n */\n\n/** @deprecated */\n\n// TODO: cover all that can be actually returned\n\nfunction resolveSendTo(actorScope, snapshot, args, actionParams, {\n  to,\n  event: eventOrExpr,\n  id,\n  delay\n}, extra) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `Only event objects may be used with sendTo; use sendTo({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  const resolvedTarget = typeof to === 'function' ? to(args, actionParams) : to;\n  let targetActorRef;\n  if (typeof resolvedTarget === 'string') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    if (resolvedTarget === SpecialTargets.Parent) {\n      targetActorRef = actorScope.self._parent;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    else if (resolvedTarget === SpecialTargets.Internal) {\n      targetActorRef = actorScope.self;\n    } else if (resolvedTarget.startsWith('#_')) {\n      // SCXML compatibility: https://www.w3.org/TR/scxml/#SCXMLEventProcessor\n      // #_invokeid. If the target is the special term '#_invokeid', where invokeid is the invokeid of an SCXML session that the sending session has created by <invoke>, the Processor must add the event to the external queue of that session.\n      targetActorRef = snapshot.children[resolvedTarget.slice(2)];\n    } else {\n      targetActorRef = extra.deferredActorIds?.includes(resolvedTarget) ? resolvedTarget : snapshot.children[resolvedTarget];\n    }\n    if (!targetActorRef) {\n      throw new Error(`Unable to send event to actor '${resolvedTarget}' from machine '${snapshot.machine.id}'.`);\n    }\n  } else {\n    targetActorRef = resolvedTarget || actorScope.self;\n  }\n  return [snapshot, {\n    to: targetActorRef,\n    targetId: typeof resolvedTarget === 'string' ? resolvedTarget : undefined,\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }, undefined];\n}\nfunction retryResolveSendTo(_, snapshot, params) {\n  if (typeof params.to === 'string') {\n    params.to = snapshot.children[params.to];\n  }\n}\nfunction executeSendTo(actorScope, params) {\n  // this forms an outgoing events queue\n  // thanks to that the recipient actors are able to read the *updated* snapshot value of the sender\n  actorScope.defer(() => {\n    const {\n      to,\n      event,\n      delay,\n      id\n    } = params;\n    if (typeof delay === 'number') {\n      actorScope.system.scheduler.schedule(actorScope.self, to, event, delay, id);\n      return;\n    }\n    actorScope.system._relay(actorScope.self,\n    // at this point, in a deferred task, it should already be mutated by retryResolveSendTo\n    // if it initially started as a string\n    to, event.type === XSTATE_ERROR ? createErrorActorEvent(actorScope.self.id, event.data) : event);\n  });\n}\n/**\n * Sends an event to an actor.\n *\n * @param actor The `ActorRef` to send the event to.\n * @param event The event to send, or an expression that evaluates to the event\n *   to send\n * @param options Send action options\n *\n *   - `id` - The unique send event identifier (used with `cancel()`).\n *   - `delay` - The number of milliseconds to delay the sending of the event.\n */\nfunction sendTo(to, eventOrExpr, options) {\n  function sendTo(_args, _params) {\n  }\n  sendTo.type = 'xstate.sendTo';\n  sendTo.to = to;\n  sendTo.event = eventOrExpr;\n  sendTo.id = options?.id;\n  sendTo.delay = options?.delay;\n  sendTo.resolve = resolveSendTo;\n  sendTo.retryResolve = retryResolveSendTo;\n  sendTo.execute = executeSendTo;\n  return sendTo;\n}\n\n/**\n * Sends an event to this machine's parent.\n *\n * @param event The event to send to the parent machine.\n * @param options Options to pass into the send event.\n */\nfunction sendParent(event, options) {\n  return sendTo(SpecialTargets.Parent, event, options);\n}\n/**\n * Forwards (sends) an event to the `target` actor.\n *\n * @param target The target actor to forward the event to.\n * @param options Options to pass into the send action creator.\n */\nfunction forwardTo(target, options) {\n  return sendTo(target, ({\n    event\n  }) => event, options);\n}\n\nfunction resolveEnqueueActions(actorScope, snapshot, args, actionParams, {\n  collect\n}) {\n  const actions = [];\n  const enqueue = function enqueue(action) {\n    actions.push(action);\n  };\n  enqueue.assign = (...args) => {\n    actions.push(assign(...args));\n  };\n  enqueue.cancel = (...args) => {\n    actions.push(cancel(...args));\n  };\n  enqueue.raise = (...args) => {\n    // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)\n    // then it fails to typecheck that because `...args` use `string` in place of `TDelay`\n    actions.push(raise(...args));\n  };\n  enqueue.sendTo = (...args) => {\n    // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)\n    // then it fails to typecheck that because `...args` use `string` in place of `TDelay\n    actions.push(sendTo(...args));\n  };\n  enqueue.sendParent = (...args) => {\n    actions.push(sendParent(...args));\n  };\n  enqueue.spawnChild = (...args) => {\n    actions.push(spawnChild(...args));\n  };\n  enqueue.stopChild = (...args) => {\n    actions.push(stopChild(...args));\n  };\n  enqueue.emit = (...args) => {\n    actions.push(emit(...args));\n  };\n  collect({\n    context: args.context,\n    event: args.event,\n    enqueue,\n    check: guard => evaluateGuard(guard, snapshot.context, args.event, snapshot),\n    self: actorScope.self,\n    system: actorScope.system\n  }, actionParams);\n  return [snapshot, undefined, actions];\n}\n/**\n * Creates an action object that will execute actions that are queued by the\n * `enqueue(action)` function.\n *\n * @example\n *\n * ```ts\n * import { createMachine, enqueueActions } from 'xstate';\n *\n * const machine = createMachine({\n *   entry: enqueueActions(({ enqueue, check }) => {\n *     enqueue.assign({ count: 0 });\n *\n *     if (check('someGuard')) {\n *       enqueue.assign({ count: 1 });\n *     }\n *\n *     enqueue('someAction');\n *   })\n * });\n * ```\n */\nfunction enqueueActions(collect) {\n  function enqueueActions(_args, _params) {\n  }\n  enqueueActions.type = 'xstate.enqueueActions';\n  enqueueActions.collect = collect;\n  enqueueActions.resolve = resolveEnqueueActions;\n  return enqueueActions;\n}\n\nfunction resolveLog(_, snapshot, actionArgs, actionParams, {\n  value,\n  label\n}) {\n  return [snapshot, {\n    value: typeof value === 'function' ? value(actionArgs, actionParams) : value,\n    label\n  }, undefined];\n}\nfunction executeLog({\n  logger\n}, {\n  value,\n  label\n}) {\n  if (label) {\n    logger(label, value);\n  } else {\n    logger(value);\n  }\n}\n/**\n * @param expr The expression function to evaluate which will be logged. Takes\n *   in 2 arguments:\n *\n *   - `ctx` - the current state context\n *   - `event` - the event that caused this action to be executed.\n *\n * @param label The label to give to the logged expression.\n */\nfunction log(value = ({\n  context,\n  event\n}) => ({\n  context,\n  event\n}), label) {\n  function log(_args, _params) {\n  }\n  log.type = 'xstate.log';\n  log.value = value;\n  log.label = label;\n  log.resolve = resolveLog;\n  log.execute = executeLog;\n  return log;\n}\n\nexport { SpecialTargets as S, assign as a, enqueueActions as b, sendTo as c, emit as e, forwardTo as f, log as l, sendParent as s };\n", "export { createEmptyActor, fromCallback, fromEventObservable, fromObservable, fromPromise, fromTransition } from '../actors/dist/xstate-actors.esm.js';\nimport { t as toArray, S as STATE_DELIMITER, m as mapValues, f as formatTransitions, a as toTransitionConfigArray, b as formatTransition, N as NULL_EVENT, e as evaluateGuard, c as createInvokeId, g as getDelayedTransitions, d as formatInitialTransition, h as getCandidates, r as resolveStateValue, i as getAllStateNodes, j as getStateNodes, k as createMachineSnapshot, l as isInFinalState, n as macrostep, o as transitionNode, p as resolveActionsAndContext, q as createInitEvent, s as microstep, u as getInitialStateNodes, v as toStatePath, w as isStateId, x as getStateNodeByPath, y as getPersistedSnapshot, z as resolveReferencedActor, A as createActor, $ as $$ACTOR_TYPE } from './raise-c17ec2bc.esm.js';\nexport { B as Actor, I as __unsafe_getAllOwnEventDescriptors, D as and, M as cancel, A as createActor, j as getStateNodes, C as interpret, H as isMachineSnapshot, J as matchesState, E as not, F as or, K as pathToStateValue, O as raise, P as spawnChild, G as stateIn, Q as stop, R as stopChild, L as toObserver } from './raise-c17ec2bc.esm.js';\nimport { a as assign } from './log-3d9d72a9.esm.js';\nexport { S as SpecialTargets, a as assign, e as emit, b as enqueueActions, f as forwardTo, l as log, s as sendParent, c as sendTo } from './log-3d9d72a9.esm.js';\nimport '../dev/dist/xstate-dev.esm.js';\n\n/**\n * Asserts that the given event object is of the specified type or types. Throws\n * an error if the event object is not of the specified types.\n *\n * @example\n *\n * ```ts\n * // ...\n * entry: ({ event }) => {\n *   assertEvent(event, 'doNothing');\n *   // event is { type: 'doNothing' }\n * },\n * // ...\n * exit: ({ event }) => {\n *   assertEvent(event, 'greet');\n *   // event is { type: 'greet'; message: string }\n *\n *   assertEvent(event, ['greet', 'notify']);\n *   // event is { type: 'greet'; message: string }\n *   // or { type: 'notify'; message: string; level: 'info' | 'error' }\n * },\n * ```\n */\nfunction assertEvent(event, type) {\n  const types = toArray(type);\n  if (!types.includes(event.type)) {\n    const typesText = types.length === 1 ? `type \"${types[0]}\"` : `one of types \"${types.join('\", \"')}\"`;\n    throw new Error(`Expected event ${JSON.stringify(event)} to have ${typesText}`);\n  }\n}\n\nconst cache = new WeakMap();\nfunction memo(object, key, fn) {\n  let memoizedData = cache.get(object);\n  if (!memoizedData) {\n    memoizedData = {\n      [key]: fn()\n    };\n    cache.set(object, memoizedData);\n  } else if (!(key in memoizedData)) {\n    memoizedData[key] = fn();\n  }\n  return memoizedData[key];\n}\n\nconst EMPTY_OBJECT = {};\nconst toSerializableAction = action => {\n  if (typeof action === 'string') {\n    return {\n      type: action\n    };\n  }\n  if (typeof action === 'function') {\n    if ('resolve' in action) {\n      return {\n        type: action.type\n      };\n    }\n    return {\n      type: action.name\n    };\n  }\n  return action;\n};\nclass StateNode {\n  constructor(/** The raw config used to create the machine. */\n  config, options) {\n    this.config = config;\n    /**\n     * The relative key of the state node, which represents its location in the\n     * overall state value.\n     */\n    this.key = void 0;\n    /** The unique ID of the state node. */\n    this.id = void 0;\n    /**\n     * The type of this state node:\n     *\n     * - `'atomic'` - no child state nodes\n     * - `'compound'` - nested child state nodes (XOR)\n     * - `'parallel'` - orthogonal nested child state nodes (AND)\n     * - `'history'` - history state node\n     * - `'final'` - final state node\n     */\n    this.type = void 0;\n    /** The string path from the root machine node to this node. */\n    this.path = void 0;\n    /** The child state nodes. */\n    this.states = void 0;\n    /**\n     * The type of history on this state node. Can be:\n     *\n     * - `'shallow'` - recalls only top-level historical state value\n     * - `'deep'` - recalls historical state value at all levels\n     */\n    this.history = void 0;\n    /** The action(s) to be executed upon entering the state node. */\n    this.entry = void 0;\n    /** The action(s) to be executed upon exiting the state node. */\n    this.exit = void 0;\n    /** The parent state node. */\n    this.parent = void 0;\n    /** The root machine node. */\n    this.machine = void 0;\n    /**\n     * The meta data associated with this state node, which will be returned in\n     * State instances.\n     */\n    this.meta = void 0;\n    /**\n     * The output data sent with the \"xstate.done.state._id_\" event if this is a\n     * final state node.\n     */\n    this.output = void 0;\n    /**\n     * The order this state node appears. Corresponds to the implicit document\n     * order.\n     */\n    this.order = -1;\n    this.description = void 0;\n    this.tags = [];\n    this.transitions = void 0;\n    this.always = void 0;\n    this.parent = options._parent;\n    this.key = options._key;\n    this.machine = options._machine;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.id = this.config.id || [this.machine.id, ...this.path].join(STATE_DELIMITER);\n    this.type = this.config.type || (this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.description = this.config.description;\n    this.order = this.machine.idMap.size;\n    this.machine.idMap.set(this.id, this);\n    this.states = this.config.states ? mapValues(this.config.states, (stateConfig, key) => {\n      const stateNode = new StateNode(stateConfig, {\n        _parent: this,\n        _key: key,\n        _machine: this.machine\n      });\n      return stateNode;\n    }) : EMPTY_OBJECT;\n    if (this.type === 'compound' && !this.config.initial) {\n      throw new Error(`No initial state specified for compound state node \"#${this.id}\". Try adding { initial: \"${Object.keys(this.states)[0]}\" } to the state config.`);\n    }\n\n    // History config\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this.entry = toArray(this.config.entry).slice();\n    this.exit = toArray(this.config.exit).slice();\n    this.meta = this.config.meta;\n    this.output = this.type === 'final' || !this.parent ? this.config.output : undefined;\n    this.tags = toArray(config.tags).slice();\n  }\n\n  /** @internal */\n  _initialize() {\n    this.transitions = formatTransitions(this);\n    if (this.config.always) {\n      this.always = toTransitionConfigArray(this.config.always).map(t => formatTransition(this, NULL_EVENT, t));\n    }\n    Object.keys(this.states).forEach(key => {\n      this.states[key]._initialize();\n    });\n  }\n\n  /** The well-structured state node definition. */\n  get definition() {\n    return {\n      id: this.id,\n      key: this.key,\n      version: this.machine.version,\n      type: this.type,\n      initial: this.initial ? {\n        target: this.initial.target,\n        source: this,\n        actions: this.initial.actions.map(toSerializableAction),\n        eventType: null,\n        reenter: false,\n        toJSON: () => ({\n          target: this.initial.target.map(t => `#${t.id}`),\n          source: `#${this.id}`,\n          actions: this.initial.actions.map(toSerializableAction),\n          eventType: null\n        })\n      } : undefined,\n      history: this.history,\n      states: mapValues(this.states, state => {\n        return state.definition;\n      }),\n      on: this.on,\n      transitions: [...this.transitions.values()].flat().map(t => ({\n        ...t,\n        actions: t.actions.map(toSerializableAction)\n      })),\n      entry: this.entry.map(toSerializableAction),\n      exit: this.exit.map(toSerializableAction),\n      meta: this.meta,\n      order: this.order || -1,\n      output: this.output,\n      invoke: this.invoke,\n      description: this.description,\n      tags: this.tags\n    };\n  }\n\n  /** @internal */\n  toJSON() {\n    return this.definition;\n  }\n\n  /** The logic invoked as actors by this state node. */\n  get invoke() {\n    return memo(this, 'invoke', () => toArray(this.config.invoke).map((invokeConfig, i) => {\n      const {\n        src,\n        systemId\n      } = invokeConfig;\n      const resolvedId = invokeConfig.id ?? createInvokeId(this.id, i);\n      const sourceName = typeof src === 'string' ? src : `xstate.invoke.${createInvokeId(this.id, i)}`;\n      return {\n        ...invokeConfig,\n        src: sourceName,\n        id: resolvedId,\n        systemId: systemId,\n        toJSON() {\n          const {\n            onDone,\n            onError,\n            ...invokeDefValues\n          } = invokeConfig;\n          return {\n            ...invokeDefValues,\n            type: 'xstate.invoke',\n            src: sourceName,\n            id: resolvedId\n          };\n        }\n      };\n    }));\n  }\n\n  /** The mapping of events to transitions. */\n  get on() {\n    return memo(this, 'on', () => {\n      const transitions = this.transitions;\n      return [...transitions].flatMap(([descriptor, t]) => t.map(t => [descriptor, t])).reduce((map, [descriptor, transition]) => {\n        map[descriptor] = map[descriptor] || [];\n        map[descriptor].push(transition);\n        return map;\n      }, {});\n    });\n  }\n  get after() {\n    return memo(this, 'delayedTransitions', () => getDelayedTransitions(this));\n  }\n  get initial() {\n    return memo(this, 'initial', () => formatInitialTransition(this, this.config.initial));\n  }\n\n  /** @internal */\n  next(snapshot, event) {\n    const eventType = event.type;\n    const actions = [];\n    let selectedTransition;\n    const candidates = memo(this, `candidates-${eventType}`, () => getCandidates(this, eventType));\n    for (const candidate of candidates) {\n      const {\n        guard\n      } = candidate;\n      const resolvedContext = snapshot.context;\n      let guardPassed = false;\n      try {\n        guardPassed = !guard || evaluateGuard(guard, resolvedContext, event, snapshot);\n      } catch (err) {\n        const guardType = typeof guard === 'string' ? guard : typeof guard === 'object' ? guard.type : undefined;\n        throw new Error(`Unable to evaluate guard ${guardType ? `'${guardType}' ` : ''}in transition for event '${eventType}' in state node '${this.id}':\\n${err.message}`);\n      }\n      if (guardPassed) {\n        actions.push(...candidate.actions);\n        selectedTransition = candidate;\n        break;\n      }\n    }\n    return selectedTransition ? [selectedTransition] : undefined;\n  }\n\n  /** All the event types accepted by this state node and its descendants. */\n  get events() {\n    return memo(this, 'events', () => {\n      const {\n        states\n      } = this;\n      const events = new Set(this.ownEvents);\n      if (states) {\n        for (const stateId of Object.keys(states)) {\n          const state = states[stateId];\n          if (state.states) {\n            for (const event of state.events) {\n              events.add(`${event}`);\n            }\n          }\n        }\n      }\n      return Array.from(events);\n    });\n  }\n\n  /**\n   * All the events that have transitions directly from this state node.\n   *\n   * Excludes any inert events.\n   */\n  get ownEvents() {\n    const events = new Set([...this.transitions.keys()].filter(descriptor => {\n      return this.transitions.get(descriptor).some(transition => !(!transition.target && !transition.actions.length && !transition.reenter));\n    }));\n    return Array.from(events);\n  }\n}\n\nconst STATE_IDENTIFIER = '#';\nclass StateMachine {\n  constructor(/** The raw config used to create the machine. */\n  config, implementations) {\n    this.config = config;\n    /** The machine's own version. */\n    this.version = void 0;\n    this.schemas = void 0;\n    this.implementations = void 0;\n    /** @internal */\n    this.__xstatenode = true;\n    /** @internal */\n    this.idMap = new Map();\n    this.root = void 0;\n    this.id = void 0;\n    this.states = void 0;\n    this.events = void 0;\n    this.id = config.id || '(machine)';\n    this.implementations = {\n      actors: implementations?.actors ?? {},\n      actions: implementations?.actions ?? {},\n      delays: implementations?.delays ?? {},\n      guards: implementations?.guards ?? {}\n    };\n    this.version = this.config.version;\n    this.schemas = this.config.schemas;\n    this.transition = this.transition.bind(this);\n    this.getInitialSnapshot = this.getInitialSnapshot.bind(this);\n    this.getPersistedSnapshot = this.getPersistedSnapshot.bind(this);\n    this.restoreSnapshot = this.restoreSnapshot.bind(this);\n    this.start = this.start.bind(this);\n    this.root = new StateNode(config, {\n      _key: this.id,\n      _machine: this\n    });\n    this.root._initialize();\n    this.states = this.root.states; // TODO: remove!\n    this.events = this.root.events;\n  }\n\n  /**\n   * Clones this state machine with the provided implementations and merges the\n   * `context` (if provided).\n   *\n   * @param implementations Options (`actions`, `guards`, `actors`, `delays`,\n   *   `context`) to recursively merge with the existing options.\n   * @returns A new `StateMachine` instance with the provided implementations.\n   */\n  provide(implementations) {\n    const {\n      actions,\n      guards,\n      actors,\n      delays\n    } = this.implementations;\n    return new StateMachine(this.config, {\n      actions: {\n        ...actions,\n        ...implementations.actions\n      },\n      guards: {\n        ...guards,\n        ...implementations.guards\n      },\n      actors: {\n        ...actors,\n        ...implementations.actors\n      },\n      delays: {\n        ...delays,\n        ...implementations.delays\n      }\n    });\n  }\n  resolveState(config) {\n    const resolvedStateValue = resolveStateValue(this.root, config.value);\n    const nodeSet = getAllStateNodes(getStateNodes(this.root, resolvedStateValue));\n    return createMachineSnapshot({\n      _nodes: [...nodeSet],\n      context: config.context || {},\n      children: {},\n      status: isInFinalState(nodeSet, this.root) ? 'done' : config.status || 'active',\n      output: config.output,\n      error: config.error,\n      historyValue: config.historyValue\n    }, this);\n  }\n\n  /**\n   * Determines the next snapshot given the current `snapshot` and received\n   * `event`. Calculates a full macrostep from all microsteps.\n   *\n   * @param snapshot The current snapshot\n   * @param event The received event\n   */\n  transition(snapshot, event, actorScope) {\n    return macrostep(snapshot, event, actorScope, []).snapshot;\n  }\n\n  /**\n   * Determines the next state given the current `state` and `event`. Calculates\n   * a microstep.\n   *\n   * @param state The current state\n   * @param event The received event\n   */\n  microstep(snapshot, event, actorScope) {\n    return macrostep(snapshot, event, actorScope, []).microstates;\n  }\n  getTransitionData(snapshot, event) {\n    return transitionNode(this.root, snapshot.value, snapshot, event) || [];\n  }\n\n  /**\n   * The initial state _before_ evaluating any microsteps. This \"pre-initial\"\n   * state is provided to initial actions executed in the initial state.\n   */\n  getPreInitialState(actorScope, initEvent, internalQueue) {\n    const {\n      context\n    } = this.config;\n    const preInitial = createMachineSnapshot({\n      context: typeof context !== 'function' && context ? context : {},\n      _nodes: [this.root],\n      children: {},\n      status: 'active'\n    }, this);\n    if (typeof context === 'function') {\n      const assignment = ({\n        spawn,\n        event,\n        self\n      }) => context({\n        spawn,\n        input: event.input,\n        self\n      });\n      return resolveActionsAndContext(preInitial, initEvent, actorScope, [assign(assignment)], internalQueue, undefined);\n    }\n    return preInitial;\n  }\n\n  /**\n   * Returns the initial `State` instance, with reference to `self` as an\n   * `ActorRef`.\n   */\n  getInitialSnapshot(actorScope, input) {\n    const initEvent = createInitEvent(input); // TODO: fix;\n    const internalQueue = [];\n    const preInitialState = this.getPreInitialState(actorScope, initEvent, internalQueue);\n    const nextState = microstep([{\n      target: [...getInitialStateNodes(this.root)],\n      source: this.root,\n      reenter: true,\n      actions: [],\n      eventType: null,\n      toJSON: null // TODO: fix\n    }], preInitialState, actorScope, initEvent, true, internalQueue);\n    const {\n      snapshot: macroState\n    } = macrostep(nextState, initEvent, actorScope, internalQueue);\n    return macroState;\n  }\n  start(snapshot) {\n    Object.values(snapshot.children).forEach(child => {\n      if (child.getSnapshot().status === 'active') {\n        child.start();\n      }\n    });\n  }\n  getStateNodeById(stateId) {\n    const fullPath = toStatePath(stateId);\n    const relativePath = fullPath.slice(1);\n    const resolvedStateId = isStateId(fullPath[0]) ? fullPath[0].slice(STATE_IDENTIFIER.length) : fullPath[0];\n    const stateNode = this.idMap.get(resolvedStateId);\n    if (!stateNode) {\n      throw new Error(`Child state node '#${resolvedStateId}' does not exist on machine '${this.id}'`);\n    }\n    return getStateNodeByPath(stateNode, relativePath);\n  }\n  get definition() {\n    return this.root.definition;\n  }\n  toJSON() {\n    return this.definition;\n  }\n  getPersistedSnapshot(snapshot, options) {\n    return getPersistedSnapshot(snapshot, options);\n  }\n  restoreSnapshot(snapshot, _actorScope) {\n    const children = {};\n    const snapshotChildren = snapshot.children;\n    Object.keys(snapshotChildren).forEach(actorId => {\n      const actorData = snapshotChildren[actorId];\n      const childState = actorData.snapshot;\n      const src = actorData.src;\n      const logic = typeof src === 'string' ? resolveReferencedActor(this, src) : src;\n      if (!logic) {\n        return;\n      }\n      const actorRef = createActor(logic, {\n        id: actorId,\n        parent: _actorScope.self,\n        syncSnapshot: actorData.syncSnapshot,\n        snapshot: childState,\n        src,\n        systemId: actorData.systemId\n      });\n      children[actorId] = actorRef;\n    });\n    const restoredSnapshot = createMachineSnapshot({\n      ...snapshot,\n      children,\n      _nodes: Array.from(getAllStateNodes(getStateNodes(this.root, snapshot.value)))\n    }, this);\n    const seen = new Set();\n    function reviveContext(contextPart, children) {\n      if (seen.has(contextPart)) {\n        return;\n      }\n      seen.add(contextPart);\n      for (const key in contextPart) {\n        const value = contextPart[key];\n        if (value && typeof value === 'object') {\n          if ('xstate$$type' in value && value.xstate$$type === $$ACTOR_TYPE) {\n            contextPart[key] = children[value.id];\n            continue;\n          }\n          reviveContext(value, children);\n        }\n      }\n    }\n    reviveContext(restoredSnapshot.context, children);\n    return restoredSnapshot;\n  }\n}\n\n/**\n * Creates a state machine (statechart) with the given configuration.\n *\n * The state machine represents the pure logic of a state machine actor.\n *\n * @example\n *\n * ```ts\n * import { createMachine } from 'xstate';\n *\n * const lightMachine = createMachine({\n *   id: 'light',\n *   initial: 'green',\n *   states: {\n *     green: {\n *       on: {\n *         TIMER: { target: 'yellow' }\n *       }\n *     },\n *     yellow: {\n *       on: {\n *         TIMER: { target: 'red' }\n *       }\n *     },\n *     red: {\n *       on: {\n *         TIMER: { target: 'green' }\n *       }\n *     }\n *   }\n * });\n *\n * const lightActor = createActor(lightMachine);\n * lightActor.start();\n *\n * lightActor.send({ type: 'TIMER' });\n * ```\n *\n * @param config The state machine configuration.\n * @param options DEPRECATED: use `setup({ ... })` or `machine.provide({ ... })`\n *   to provide machine implementations instead.\n */\nfunction createMachine(config, implementations) {\n  return new StateMachine(config, implementations);\n}\n\n/** @internal */\nfunction createInertActorScope(actorLogic) {\n  const self = createActor(actorLogic);\n  const inertActorScope = {\n    self,\n    defer: () => {},\n    id: '',\n    logger: () => {},\n    sessionId: '',\n    stopChild: () => {},\n    system: self.system,\n    emit: () => {},\n    actionExecutor: () => {}\n  };\n  return inertActorScope;\n}\n\n/** @deprecated Use `initialTransition(\u2026)` instead. */\nfunction getInitialSnapshot(actorLogic, ...[input]) {\n  const actorScope = createInertActorScope(actorLogic);\n  return actorLogic.getInitialSnapshot(actorScope, input);\n}\n\n/**\n * Determines the next snapshot for the given `actorLogic` based on the given\n * `snapshot` and `event`.\n *\n * If the `snapshot` is `undefined`, the initial snapshot of the `actorLogic` is\n * used.\n *\n * @deprecated Use `transition(\u2026)` instead.\n * @example\n *\n * ```ts\n * import { getNextSnapshot } from 'xstate';\n * import { trafficLightMachine } from './trafficLightMachine.ts';\n *\n * const nextSnapshot = getNextSnapshot(\n *   trafficLightMachine, // actor logic\n *   undefined, // snapshot (or initial state if undefined)\n *   { type: 'TIMER' }\n * ); // event object\n *\n * console.log(nextSnapshot.value);\n * // => 'yellow'\n *\n * const nextSnapshot2 = getNextSnapshot(\n *   trafficLightMachine, // actor logic\n *   nextSnapshot, // snapshot\n *   { type: 'TIMER' }\n * ); // event object\n *\n * console.log(nextSnapshot2.value);\n * // =>'red'\n * ```\n */\nfunction getNextSnapshot(actorLogic, snapshot, event) {\n  const inertActorScope = createInertActorScope(actorLogic);\n  inertActorScope.self._snapshot = snapshot;\n  return actorLogic.transition(snapshot, event, inertActorScope);\n}\n\n// at the moment we allow extra actors - ones that are not specified by `children`\n// this could be reconsidered in the future\n\nfunction setup({\n  schemas,\n  actors,\n  actions,\n  guards,\n  delays\n}) {\n  return {\n    createMachine: config => createMachine({\n      ...config,\n      schemas\n    }, {\n      actors,\n      actions,\n      guards,\n      delays\n    })\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass SimulatedClock {\n  constructor() {\n    this.timeouts = new Map();\n    this._now = 0;\n    this._id = 0;\n    this._flushing = false;\n    this._flushingInvalidated = false;\n  }\n  now() {\n    return this._now;\n  }\n  getId() {\n    return this._id++;\n  }\n  setTimeout(fn, timeout) {\n    this._flushingInvalidated = this._flushing;\n    const id = this.getId();\n    this.timeouts.set(id, {\n      start: this.now(),\n      timeout,\n      fn\n    });\n    return id;\n  }\n  clearTimeout(id) {\n    this._flushingInvalidated = this._flushing;\n    this.timeouts.delete(id);\n  }\n  set(time) {\n    if (this._now > time) {\n      throw new Error('Unable to travel back in time');\n    }\n    this._now = time;\n    this.flushTimeouts();\n  }\n  flushTimeouts() {\n    if (this._flushing) {\n      this._flushingInvalidated = true;\n      return;\n    }\n    this._flushing = true;\n    const sorted = [...this.timeouts].sort(([_idA, timeoutA], [_idB, timeoutB]) => {\n      const endA = timeoutA.start + timeoutA.timeout;\n      const endB = timeoutB.start + timeoutB.timeout;\n      return endB > endA ? -1 : 1;\n    });\n    for (const [id, timeout] of sorted) {\n      if (this._flushingInvalidated) {\n        this._flushingInvalidated = false;\n        this._flushing = false;\n        this.flushTimeouts();\n        return;\n      }\n      if (this.now() - timeout.start >= timeout.timeout) {\n        this.timeouts.delete(id);\n        timeout.fn.call(null);\n      }\n    }\n    this._flushing = false;\n  }\n  increment(ms) {\n    this._now += ms;\n    this.flushTimeouts();\n  }\n}\n\n/**\n * Returns a promise that resolves to the `output` of the actor when it is done.\n *\n * @example\n *\n * ```ts\n * const machine = createMachine({\n *   // ...\n *   output: {\n *     count: 42\n *   }\n * });\n *\n * const actor = createActor(machine);\n *\n * actor.start();\n *\n * const output = await toPromise(actor);\n *\n * console.log(output);\n * // logs { count: 42 }\n * ```\n */\nfunction toPromise(actor) {\n  return new Promise((resolve, reject) => {\n    actor.subscribe({\n      complete: () => {\n        resolve(actor.getSnapshot().output);\n      },\n      error: reject\n    });\n  });\n}\n\n/**\n * Given actor `logic`, a `snapshot`, and an `event`, returns a tuple of the\n * `nextSnapshot` and `actions` to execute.\n *\n * This is a pure function that does not execute `actions`.\n */\nfunction transition(logic, snapshot, event) {\n  const executableActions = [];\n  const actorScope = createInertActorScope(logic);\n  actorScope.actionExecutor = action => {\n    executableActions.push(action);\n  };\n  const nextSnapshot = logic.transition(snapshot, event, actorScope);\n  return [nextSnapshot, executableActions];\n}\n\n/**\n * Given actor `logic` and optional `input`, returns a tuple of the\n * `nextSnapshot` and `actions` to execute from the initial transition (no\n * previous state).\n *\n * This is a pure function that does not execute `actions`.\n */\nfunction initialTransition(logic, ...[input]) {\n  const executableActions = [];\n  const actorScope = createInertActorScope(logic);\n  actorScope.actionExecutor = action => {\n    executableActions.push(action);\n  };\n  const nextSnapshot = logic.getInitialSnapshot(actorScope, input);\n  return [nextSnapshot, executableActions];\n}\n\nconst defaultWaitForOptions = {\n  timeout: Infinity // much more than 10 seconds\n};\n\n/**\n * Subscribes to an actor ref and waits for its emitted value to satisfy a\n * predicate, and then resolves with that value. Will throw if the desired state\n * is not reached after an optional timeout. (defaults to Infinity).\n *\n * @example\n *\n * ```js\n * const state = await waitFor(someService, (state) => {\n *   return state.hasTag('loaded');\n * });\n *\n * state.hasTag('loaded'); // true\n * ```\n *\n * @param actorRef The actor ref to subscribe to\n * @param predicate Determines if a value matches the condition to wait for\n * @param options\n * @returns A promise that eventually resolves to the emitted value that matches\n *   the condition\n */\nfunction waitFor(actorRef, predicate, options) {\n  const resolvedOptions = {\n    ...defaultWaitForOptions,\n    ...options\n  };\n  return new Promise((res, rej) => {\n    const {\n      signal\n    } = resolvedOptions;\n    if (signal?.aborted) {\n      // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n      rej(signal.reason);\n      return;\n    }\n    let done = false;\n    const handle = resolvedOptions.timeout === Infinity ? undefined : setTimeout(() => {\n      dispose();\n      rej(new Error(`Timeout of ${resolvedOptions.timeout} ms exceeded`));\n    }, resolvedOptions.timeout);\n    const dispose = () => {\n      clearTimeout(handle);\n      done = true;\n      sub?.unsubscribe();\n      if (abortListener) {\n        signal.removeEventListener('abort', abortListener);\n      }\n    };\n    function checkEmitted(emitted) {\n      if (predicate(emitted)) {\n        dispose();\n        res(emitted);\n      }\n    }\n\n    /**\n     * If the `signal` option is provided, this will be the listener for its\n     * `abort` event\n     */\n    let abortListener;\n    // eslint-disable-next-line prefer-const\n    let sub; // avoid TDZ when disposing synchronously\n\n    // See if the current snapshot already matches the predicate\n    checkEmitted(actorRef.getSnapshot());\n    if (done) {\n      return;\n    }\n\n    // only define the `abortListener` if the `signal` option is provided\n    if (signal) {\n      abortListener = () => {\n        dispose();\n        // XState does not \"own\" the signal, so we should reject with its reason (if any)\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        rej(signal.reason);\n      };\n      signal.addEventListener('abort', abortListener);\n    }\n    sub = actorRef.subscribe({\n      next: checkEmitted,\n      error: err => {\n        dispose();\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        rej(err);\n      },\n      complete: () => {\n        dispose();\n        rej(new Error(`Actor terminated without satisfying predicate`));\n      }\n    });\n    if (done) {\n      sub.unsubscribe();\n    }\n  });\n}\n\nexport { SimulatedClock, StateMachine, StateNode, assertEvent, createMachine, getInitialSnapshot, getNextSnapshot, initialTransition, setup, toPromise, transition, waitFor };\n", "import { Player } from \"./game.js\"\nimport { Message } from \"./messages.js\"\n\nexport enum GameMsg {\n  DUMMY = \"game:dummy\",\n\n  SALUTE = \"game:salute\",\n\n  STARTED = \"game:started\",\n  FINISHED = \"game:finished\",\n  READY = \"game:player_ready\",\n  WAITING = \"game:player_waiting\",\n\n  TURN_START = \"game:turn_start\",\n  TURN_END = \"game:turn_end\",\n\n  QUERY = \"game:query\",\n  ANSWER = \"game:answer\",\n  UPDATE = \"game:update\",\n  REPORT = \"game:report\",\n}\n\nexport interface GamePayload {\n}\n\nexport interface GameQueryPayload extends GamePayload {\n}\n\nexport interface GameAnswerPayload extends GamePayload {\n  to: Player\n}\n\nexport interface GameUpdatePayload extends GamePayload {\n}\n\nexport interface GameReportPayload extends GamePayload {\n}\n\nexport interface IGameMessage extends Message {\n  event: `${GameMsg}`\n  turn: number\n  to?: Player\n}\n\nexport interface GameQueryMsg extends IGameMessage {\n  payload: GameQueryPayload\n}\n\nexport interface GameAnswerMsg extends IGameMessage {\n  payload: GameAnswerPayload\n  to: Player\n}\n\nexport interface GameUpdateMsg extends IGameMessage {\n  payload: GameUpdatePayload\n}\n\nexport interface GameReportMsg extends IGameMessage {\n  payload: GameReportPayload\n}\n\nexport type GameMessage = GameQueryMsg | GameAnswerMsg | GameUpdateMsg | GameReportMsg\n", "import { Actor, AnyEventObject, assign, createActor, createMachine, emit, fromPromise, setup } from 'xstate';\nimport 'xstate/guards';\nimport { Player, TurnData, TurnInfo } from \"../../types/game.js\";\nimport { GameAnswerPayload, GameMsg, GameQueryPayload, GameReportPayload, GameUpdatePayload } from \"../../types/gameMessages.js\";\nimport { passTime } from \"../../utils.js\";\nimport { SocketManager } from \"../sockets/socketManager.js\";\n\nenum Actors {\n  notifyReady = \"notifyReady\",\n  advertiseWaiting = \"advertiseWaiting\",\n  processActivePlayer = \"processActivePlayer\",\n  processNonActivePlayer = \"processNonActivePlayer\",\n  processEliminated = \"processEliminated\"\n}\n\nenum Guards {\n  isActivePlayer = \"isActivePlayer\",\n  isNonActivePlayer = \"isNonActivePlayer\",\n  isEliminated = \"isEliminated\",\n  isWaiting = \"isWaiting\",\n}\n\nenum PlayerStates {\n  Ready = \"READY\",\n  UpdateTurnInfo = \"UPDATE_TURN_INFO\",\n  SelectActive = \"SELECT_ACTIVE\",\n  Active = \"ACTIVE\",\n  NonActive = \"NON_ACTIVE\",\n}\n\nenum Actions {\n  log = \"log\",\n  updateTurnInfo = \"updateTurnInfo\",\n  advertiseWait = \"advertiseWait\",\n  markUsWaiting = \"markUsWaiting\",\n  unMarkUsWaiting = \"unMarkUsWaiting\",\n}\n\nenum ClientEvent {\n  QueryWaiting = \"QUERY_WAITING\"\n}\n\ninterface QueryWaitingEvent extends AnyEventObject {\n  type: ClientEvent.QueryWaiting\n}\n\ninterface TurnStartEvent {\n  type: GameMsg.TURN_START\n  turnInfo: TurnInfo\n  output: null  // Dummy field until we figure out how to properly type Guards\n}\n\ninterface TurnEndEvent {\n  type: GameMsg.TURN_END\n  output: null  // Dummy field until we figure out how to properly type Guards\n}\n\ninterface WaitingEvent {\n  type: GameMsg.WAITING\n  output: null  // Dummy field until we figure out how to properly type Guards\n}\n\ninterface OutputEvent {\n  type: \"ouptut\"\n  output: any\n}\n\ntype Events = AnyEventObject\n  | TurnStartEvent\n  | TurnEndEvent\n  | OutputEvent\n  | WaitingEvent\n  | QueryWaitingEvent\n\nfunction isTurnStartEvent(event: Events): event is TurnStartEvent {\n  return event.type === GameMsg.TURN_START\n}\n\ninterface Context {\n  turnInfo: TurnInfo\n  waiting: boolean\n}\n\ninterface ActionInput {\n  event: Events,\n  context: Context\n}\n\nfunction _createLogger(name: string, sender: string) {\n  const prefix = name.split('-')[0];\n  const now = () => Number(new Date());\n  const log = (...args: any[]) => console.log(`${now()} [${prefix}] [${sender}]`, ...args);\n  return log;\n}\n\nfunction serMap(map: Map<any, any>): object {\n  const o: { [k: string]: any } = {};\n  map.forEach((v, k) => o[k] = v);\n  return o;\n}\n\nconst stringify = (o: any) => JSON.stringify(o, (_, v: any) => v instanceof Map ? serMap(v) : v);\n\nexport class GameClient {\n  readonly log: (...args: any[]) => void;\n  readonly token: string;\n\n  sockets: SocketManager;\n  turnsData: TurnData[];\n  turnData: TurnData;\n  gameMachine!: Actor<ReturnType<GameClient['stateMachine']>>;\n\n  constructor(token: string, sockets: SocketManager) {\n    this.sockets = sockets;\n    this.turnsData = [];\n    this.turnData = GameClient._emptyTurnData();\n    this.log = _createLogger(token, sockets.sender)\n    this.token = token;\n     \n  }\n\n  static _emptyTurnData(): TurnData {\n    return {\n      activePlayer: \"\",\n      queries: new Map(),\n      answers: new Map(),\n      updates: new Map(),\n      report: null,\n    }\n  }\n\n  get playerId(): string {\n    return this.sockets.game!.id!\n  }\n\n  async play() {\n    await this.setupGame();\n\n    this.gameMachine = createActor(this.stateMachine());\n    this.gameMachine.start();\n  }\n\n  async notifyPlayerReady() {\n    await this.sockets.advertisePlayerAsReady();\n    this.log(\"We are ready!\");\n  }\n\n  /*///////////////////////////////////////////////////////////////\n                          STATE MACHINE STATE GETTERS\n  //////////////////////////////////////////////////////////////*/\n  get contextWaiting() {\n    return this.gameMachine.getSnapshot().context.waiting\n  }\n\n  get contextTurnInfo() {\n    return this.gameMachine.getSnapshot().context.turnInfo\n  }\n\n  get turn() {\n    return this.contextTurnInfo.turn\n  }\n\n  get round() {\n    return this.contextTurnInfo.round\n  }\n\n  get activePlayer() {\n    return this.contextTurnInfo.activePlayer\n  }\n\n  get nextPlayer() {\n    return this.contextTurnInfo.nextPlayer\n  }\n\n  get activeStatus() {\n    if (!this.activePlayer) {\n      return \"\"\n    } else {\n      return this.activePlayer === this.playerId ? \"ACTIVE\" : \"NON-ACTIVE\"\n    }\n  }\n\n  gameLog(...args: any[]) {\n    this.log(this.activeStatus, ...args);\n  }\n\n  async setupGame() {\n    this.log(\"Setting up game...\")\n    // query players/turn order\n    // setup pieces\n    // zk setup\n    // emit ready (or wrap setup within emitAck from master)\n  }\n\n  async processActivePlayer() {\n\n    const otherPlayers = this.round.filter(x => x !== this.playerId);\n\n    // STEP 2\n    // wait for queries | take action\n    await Promise.all([\n      this.waitForQuery(otherPlayers),\n      this.takeAction()\n    ])\n\n    // STEP 3\n    // create answer\n    const answers = await this.createAnswers();\n    // broadcast answers\n    await Promise.all(answers.map(async (answer) => {\n      this.gameLog(\"Broadcasting answers\")\n      await this.sockets.broadcastAnswer(this.turn, answer.to, answer);\n    }))\n    this.gameLog(\"NO MORE ANSWERS TO BROADCAST\", stringify(this.turnData.answers));\n\n    // STEP 6\n    // wait for udpates\n    await this.waitForUpdates(otherPlayers);\n\n    // STEP 7\n    // broadcast reports\n    const report = await this.createReport();\n    this.gameLog(\"Broadcasting report\")\n    await this.sockets.broadcastReport(this.turn, report);\n\n    this.gameLog(\"Finishing turn.\");\n    this.gameLog(\"No more duties.\");\n  }\n\n  async processNonActivePlayer() {\n\n    const nonActivePlayers = this.round\n      .filter(x => x !== this.activePlayer);\n\n    const otherNonActivePlayers = nonActivePlayers\n      .filter(x => x !== this.playerId);\n\n    // STEP 1\n    // if query ready, broadcast query\n    const query = await this.getQuery();\n    await Promise.all([\n      this.sockets.broadcastQuery(this.turn, this.activePlayer, query),\n      this.waitForQuery(otherNonActivePlayers),  // we have our query, but we need the other NA-players'\n    ]);\n    this.gameLog(\"NO MORE QUERIES TO BROADCAST\", stringify(this.turnData.queries));\n\n    // STEP 4\n    // wait for answer\n    await this.waitForAnswer(nonActivePlayers);\n\n    // STEP 5\n    // process update\n    const update = await this.createUpdate();\n    // broadcast update\n    await Promise.all([\n      await this.sockets.broadcastUpdate(this.turn, this.activePlayer, update),\n      await this.waitForUpdates(otherNonActivePlayers),\n    ]);\n\n    // STEP 8\n    // wait for report\n    await this.waitForReport();\n    this.gameLog(\"No more duties.\")\n  }\n\n  /*///////////////////////////////////////////////////////////////\n                          NON-ACTIVE PLAYER METHODS\n  //////////////////////////////////////////////////////////////*/\n  async getQuery(): Promise<GameQueryPayload> {\n    const payload = {\n      mockQueryData: {\n        token: this.token,\n        turn: `Mock-Q${this.contextTurnInfo.turn}`,\n      }\n    };\n    this.turnData.queries.set(this.playerId, payload)\n    return payload\n  }\n\n  async waitForAnswer(players: Player[]) {\n    this.gameLog(\"STARTING WAIT FOR ANSWER\");\n    // there is an answer for each non-active player (N_players - 1). Eliminated players still answer.\n    const answers = await this.sockets.waitForAnswer(this.turn, this.activePlayer, players);\n    this.gameLog(\"Returned answer\", stringify(answers))\n    this.turnData.answers = answers\n  }\n\n  async createUpdate(): Promise<GameUpdatePayload> {\n    this.gameLog(\"Creating update for active player\");\n    const payload = {\n      mockUpdateData: {\n        token: this.token,\n        turn: `Mock-U${this.turn}`,\n      }\n    }\n    this.turnData.updates.set(this.playerId, payload)\n    return payload;\n  }\n\n  async waitForReport() {\n    const report = await this.sockets.waitForReport(this.turn, this.activePlayer);\n    this.gameLog(\"Returned report\", stringify(report))\n    this.turnData.report = report\n  }\n\n  /*///////////////////////////////////////////////////////////////\n                          ACTIVE PLAYER METHODS\n  //////////////////////////////////////////////////////////////*/\n  async takeAction() {\n  }\n\n  async waitForQuery(players: Player[]) {\n    const queries = await this.sockets.waitForQuery(this.turn, this.activePlayer, players)\n    this.gameLog(\"Returned queries\", stringify(queries))\n    queries.forEach((payload, player) => {\n      this.turnData.queries.set(player, payload)\n    })\n  }\n\n  async createAnswers(): Promise<GameAnswerPayload[]> {\n    const otherPlayers = this.round.filter(x => x !== this.playerId);\n    const payloads: GameAnswerPayload[] = [];\n    for (const player of otherPlayers) {\n      const payload = {\n        from: this.token,\n        to: player,\n        data: `Mock-A${this.contextTurnInfo.turn}`,\n      }\n      payloads.push(payload);\n      this.turnData.answers.set(player, payload.data)\n    }\n    return payloads;\n  }\n\n  async waitForUpdates(players: Player[]) {\n    this.gameLog(\"Waiting for updates\");\n    const updates = await this.sockets.waitForUpdates(this.turn, this.activePlayer, players)\n    this.gameLog(\"Returned updates\", stringify(updates))\n    this.turnData.updates = updates;\n  }\n\n  async createReport(): Promise<GameReportPayload> {\n    return {\n      mockReportData: {\n        token: this.token,\n        turn: `Mock-R${this.contextTurnInfo.turn}`,\n      }\n    }\n  }\n\n  /*///////////////////////////////////////////////////////////////\n                          STATE MACHINE\n  //////////////////////////////////////////////////////////////*/\n  rotateTurnData(turnInfo: TurnInfo) {\n    this.turnsData.push(this.turnData);\n    this.turnData = GameClient._emptyTurnData();\n    this.turnData.activePlayer = turnInfo.activePlayer\n  }\n\n  isActivePlayer(turnInfo: TurnInfo): boolean {\n    return this.playerId === turnInfo.activePlayer\n  }\n\n  isNonActivePlayer(turnInfo: TurnInfo): boolean {\n    return (turnInfo.round.indexOf(this.playerId) > -1)\n      && (this.playerId !== turnInfo.activePlayer)\n  }\n\n  machineSetup() {\n\n    const self = this;\n\n    /*///////////////////////////////////////////////////////////////\n                            MACHINE EVENT HANDLERS\n    //////////////////////////////////////////////////////////////*/\n    this.sockets.addListener(GameMsg.TURN_START, (turnInfo) => {\n      if (self.gameMachine) {\n        self.gameMachine.send({ type: GameMsg.TURN_START, turnInfo })\n      }\n    });\n\n    this.sockets.game.on(GameMsg.WAITING, (ack) => {\n      if (self.gameMachine) {\n        ack({ player: self.playerId, waiting: self.contextWaiting })\n      }\n    });\n\n    /*///////////////////////////////////////////////////////////////\n                            MACHINE ACTIONS\n    //////////////////////////////////////////////////////////////*/\n    const updateTurnInfoAction = ({ event, context }: ActionInput) => {\n      if (isTurnStartEvent(event)) {\n        self.rotateTurnData(event.turnInfo);\n        return { turnInfo: event.turnInfo }\n      }\n      else return context\n    }\n\n    const markUsWaitingAction = ({ event, context }: ActionInput) => {\n      this.log('markUsWaiting', stringify(context));\n      return { ...context, waiting: true }\n    }\n\n    const unMarkUsWaitingAction = ({ event, context }: ActionInput) => {\n      return { ...context, waiting: false }\n    }\n\n    const template = setup({\n      types: {\n        context: {} as Context,\n        events: {} as Events,\n      },\n      actions: {\n        log: (o, step: PlayerStates) => this.log(step ? `[${step}]` : '', o.event.type, JSON.stringify(o.context)),\n        [Actions.updateTurnInfo]: assign(updateTurnInfoAction),\n        [Actions.markUsWaiting]: assign(markUsWaitingAction),\n        [Actions.unMarkUsWaiting]: assign(unMarkUsWaitingAction),\n      },\n      guards: {\n        [Guards.isActivePlayer]: ({ context }) => this.isActivePlayer(context.turnInfo),\n        [Guards.isNonActivePlayer]: ({ context }) => this.isNonActivePlayer(context.turnInfo),\n      },\n      actors: {\n        [Actors.notifyReady]: fromPromise<void, void>(this.notifyPlayerReady.bind(this)),\n        // [Actors.processActivePlayer]: fromPromise<void, void>(async () => { await passTime(3_000); this.log(\"Finished Active\") } ),\n        // [Actors.processNonActivePlayer]: fromPromise<void, void>(async () => { await passTime(3_000); this.log(\"Finished NonActive\") }),\n        [Actors.processActivePlayer]: fromPromise<void, void>(this.processActivePlayer.bind(this)),\n        [Actors.processNonActivePlayer]: fromPromise<void, void>(this.processNonActivePlayer.bind(this)),\n      },\n    });\n\n    return template;\n  }\n\n  stateMachine() {\n    const actor = this.machineSetup()\n      .createMachine({\n        id: 'game_loop',\n        context: { turnInfo: null as any as TurnInfo, waiting: false },\n        initial: PlayerStates.Ready,\n        states: {\n          [PlayerStates.Ready]: {\n            entry: [{ type: Actions.log, params: PlayerStates.Ready }],\n            invoke: { src: Actors.notifyReady, onDone: { target: PlayerStates.UpdateTurnInfo } }\n          },\n          [PlayerStates.UpdateTurnInfo]: {\n            entry: [\n              { type: Actions.log, params: PlayerStates.UpdateTurnInfo },\n              { type: Actions.markUsWaiting }\n            ],\n            on: {\n              [GameMsg.TURN_START]: [\n                { actions: { type: Actions.updateTurnInfo }, target: PlayerStates.SelectActive },\n              ]\n            },\n            exit: [{ type: Actions.unMarkUsWaiting }]\n          },\n          [PlayerStates.SelectActive]: {\n            entry: [\n              { type: Actions.log, params: PlayerStates.SelectActive },\n            ],\n            always: [\n              { guard: Guards.isActivePlayer, target: PlayerStates.Active },\n              { guard: Guards.isNonActivePlayer, target: PlayerStates.NonActive },\n            ]\n          },\n          [PlayerStates.Active]: {\n            entry: [{ type: Actions.log, params: PlayerStates.Active }],\n            invoke: { src: Actors.processActivePlayer, onDone: { target: PlayerStates.UpdateTurnInfo } },\n          },\n          [PlayerStates.NonActive]: {\n            entry: [{ type: Actions.log, params: PlayerStates.NonActive }],\n            invoke: { src: Actors.processNonActivePlayer, onDone: { target: PlayerStates.UpdateTurnInfo } },\n          },\n        },\n      });\n    return actor;\n  }\n\n}\n", "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n", "const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach((key) => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n", "import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data.arrayBuffer().then(toArray).then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, (encoded) => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n", "// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n", "import { ERROR_PACKET, PACKET_TYPES_REVERSE, } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nexport const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType),\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType),\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1),\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type],\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            if (data instanceof Blob) {\n                // from WebSocket + binaryType \"blob\"\n                return data;\n            }\n            else {\n                // from HTTP long-polling or WebTransport\n                return new Blob([data]);\n            }\n        case \"arraybuffer\":\n        default:\n            if (data instanceof ArrayBuffer) {\n                // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n    }\n};\n", "import { encodePacket, encodePacketToBinary } from \"./encodePacket.js\";\nimport { decodePacket } from \"./decodePacket.js\";\nimport { ERROR_PACKET, } from \"./commons.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, (encodedPacket) => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport function createPacketEncoderStream() {\n    return new TransformStream({\n        transform(packet, controller) {\n            encodePacketToBinary(packet, (encodedPacket) => {\n                const payloadLength = encodedPacket.length;\n                let header;\n                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n                if (payloadLength < 126) {\n                    header = new Uint8Array(1);\n                    new DataView(header.buffer).setUint8(0, payloadLength);\n                }\n                else if (payloadLength < 65536) {\n                    header = new Uint8Array(3);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 126);\n                    view.setUint16(1, payloadLength);\n                }\n                else {\n                    header = new Uint8Array(9);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 127);\n                    view.setBigUint64(1, BigInt(payloadLength));\n                }\n                // first bit indicates whether the payload is plain text (0) or binary (1)\n                if (packet.data && typeof packet.data !== \"string\") {\n                    header[0] |= 0x80;\n                }\n                controller.enqueue(header);\n                controller.enqueue(encodedPacket);\n            });\n        },\n    });\n}\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n        return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n        buffer[i] = chunks[0][j++];\n        if (j === chunks[0].length) {\n            chunks.shift();\n            j = 0;\n        }\n    }\n    if (chunks.length && j < chunks[0].length) {\n        chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n}\nexport function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n        TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* State.READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n        transform(chunk, controller) {\n            chunks.push(chunk);\n            while (true) {\n                if (state === 0 /* State.READ_HEADER */) {\n                    if (totalLength(chunks) < 1) {\n                        break;\n                    }\n                    const header = concatChunks(chunks, 1);\n                    isBinary = (header[0] & 0x80) === 0x80;\n                    expectedLength = header[0] & 0x7f;\n                    if (expectedLength < 126) {\n                        state = 3 /* State.READ_PAYLOAD */;\n                    }\n                    else if (expectedLength === 126) {\n                        state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n                    }\n                    else {\n                        state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n                    }\n                }\n                else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n                    if (totalLength(chunks) < 2) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 2);\n                    expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n                    if (totalLength(chunks) < 8) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 8);\n                    const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n                    const n = view.getUint32(0);\n                    if (n > Math.pow(2, 53 - 32) - 1) {\n                        // the maximum safe integer in JavaScript is 2^53 - 1\n                        controller.enqueue(ERROR_PACKET);\n                        break;\n                    }\n                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else {\n                    if (totalLength(chunks) < expectedLength) {\n                        break;\n                    }\n                    const data = concatChunks(chunks, expectedLength);\n                    controller.enqueue(decodePacket(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n                    state = 0 /* State.READ_HEADER */;\n                }\n                if (expectedLength === 0 || expectedLength > maxPayload) {\n                    controller.enqueue(ERROR_PACKET);\n                    break;\n                }\n            }\n        },\n    });\n}\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload, };\n", "/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n", "export const nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return (cb) => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexport const globalThisShim = (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\nexport const defaultBinaryType = \"arraybuffer\";\nexport function createCookieJar() { }\n", "import { globalThisShim as globalThis } from \"./globals.node.js\";\nexport function pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = globalThis.setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = globalThis.clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    }\n    else {\n        obj.setTimeoutFn = globalThis.setTimeout.bind(globalThis);\n        obj.clearTimeoutFn = globalThis.clearTimeout.bind(globalThis);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nexport function byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n/**\n * Generates a random 8-characters string.\n */\nexport function randomString() {\n    return (Date.now().toString(36).substring(3) +\n        Math.random().toString(36).substring(2, 5));\n}\n", "// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nexport function encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nexport function decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n", "import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nimport { encode } from \"./contrib/parseqs.js\";\nexport class TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.socket = opts.socket;\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     */\n    open() {\n        this.readyState = \"opening\";\n        this.doOpen();\n        return this;\n    }\n    /**\n     * Closes the transport.\n     */\n    close() {\n        if (this.readyState === \"opening\" || this.readyState === \"open\") {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */\n    send(packets) {\n        if (this.readyState === \"open\") {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */\n    pause(onPause) { }\n    createUri(schema, query = {}) {\n        return (schema +\n            \"://\" +\n            this._hostname() +\n            this._port() +\n            this.opts.path +\n            this._query(query));\n    }\n    _hostname() {\n        const hostname = this.opts.hostname;\n        return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    }\n    _port() {\n        if (this.opts.port &&\n            ((this.opts.secure && Number(this.opts.port !== 443)) ||\n                (!this.opts.secure && Number(this.opts.port) !== 80))) {\n            return \":\" + this.opts.port;\n        }\n        else {\n            return \"\";\n        }\n    }\n    _query(query) {\n        const encodedQuery = encode(query);\n        return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    }\n}\n", "import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\n", "// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n    value = typeof XMLHttpRequest !== 'undefined' &&\n        'withCredentials' in new XMLHttpRequest();\n}\ncatch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n}\nexport const hasCORS = value;\n", "import { Polling } from \"./polling.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globals.node.js\";\nimport { hasCORS } from \"../contrib/has-cors.js\";\nfunction empty() { }\nexport class BaseXHR extends Polling {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @package\n     */\n    constructor(opts) {\n        super(opts);\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n        }\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data,\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexport class Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @package\n     */\n    constructor(createRequest, uri, opts) {\n        super();\n        this.createRequest = createRequest;\n        installTimerFunctions(this, opts);\n        this._opts = opts;\n        this._method = opts.method || \"GET\";\n        this._uri = uri;\n        this._data = undefined !== opts.data ? opts.data : null;\n        this._create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @private\n     */\n    _create() {\n        var _a;\n        const opts = pick(this._opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this._opts.xd;\n        const xhr = (this._xhr = this.createRequest(opts));\n        try {\n            xhr.open(this._method, this._uri, true);\n            try {\n                if (this._opts.extraHeaders) {\n                    // @ts-ignore\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this._opts.extraHeaders) {\n                        if (this._opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this._opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this._method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this._opts.withCredentials;\n            }\n            if (this._opts.requestTimeout) {\n                xhr.timeout = this._opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                var _a;\n                if (xhr.readyState === 3) {\n                    (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(\n                    // @ts-ignore\n                    xhr.getResponseHeader(\"set-cookie\"));\n                }\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this._onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this._onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this._data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this._onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this._index = Request.requestsCount++;\n            Request.requests[this._index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @private\n     */\n    _onError(err) {\n        this.emitReserved(\"error\", err, this._xhr);\n        this._cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @private\n     */\n    _cleanup(fromError) {\n        if (\"undefined\" === typeof this._xhr || null === this._xhr) {\n            return;\n        }\n        this._xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this._xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this._index];\n        }\n        this._xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @private\n     */\n    _onLoad() {\n        const data = this._xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this._cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @package\n     */\n    abort() {\n        this._cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\nconst hasXHR2 = (function () {\n    const xhr = newRequest({\n        xdomain: false,\n    });\n    return xhr && xhr.responseType !== null;\n})();\n/**\n * HTTP long-polling based on the built-in `XMLHttpRequest` object.\n *\n * Usage: browser\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n */\nexport class XHR extends BaseXHR {\n    constructor(opts) {\n        super(opts);\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd }, this.opts);\n        return new Request(newRequest, this.uri(), opts);\n    }\n}\nfunction newRequest(opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\n", "import { Transport } from \"../transport.js\";\nimport { pick, randomString } from \"../util.js\";\nimport { encodePacket } from \"engine.io-parser\";\nimport { globalThisShim as globalThis, nextTick } from \"../globals.node.js\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class BaseWS extends Transport {\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws = this.createSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    this.doWrite(packet, data);\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.onerror = () => { };\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\nconst WebSocketCtor = globalThis.WebSocket || globalThis.MozWebSocket;\n/**\n * WebSocket transport based on the built-in `WebSocket` object.\n *\n * Usage: browser, Node.js (since v21), Deno, Bun\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n * @see https://caniuse.com/mdn-api_websocket\n * @see https://nodejs.org/api/globals.html#websocket\n */\nexport class WS extends BaseWS {\n    createSocket(uri, protocols, opts) {\n        return !isReactNative\n            ? protocols\n                ? new WebSocketCtor(uri, protocols)\n                : new WebSocketCtor(uri)\n            : new WebSocketCtor(uri, protocols, opts);\n    }\n    doWrite(_packet, data) {\n        this.ws.send(data);\n    }\n}\n", "import { Transport } from \"../transport.js\";\nimport { nextTick } from \"../globals.node.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream, } from \"engine.io-parser\";\n/**\n * WebTransport transport based on the built-in `WebTransport` object.\n *\n * Usage: browser, Node.js (with the `@fails-components/webtransport` package)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebTransport\n * @see https://caniuse.com/webtransport\n */\nexport class WT extends Transport {\n    get name() {\n        return \"webtransport\";\n    }\n    doOpen() {\n        try {\n            // @ts-ignore\n            this._transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this._transport.closed\n            .then(() => {\n            this.onClose();\n        })\n            .catch((err) => {\n            this.onError(\"webtransport error\", err);\n        });\n        // note: we could have used async/await, but that would require some additional polyfills\n        this._transport.ready.then(() => {\n            this._transport.createBidirectionalStream().then((stream) => {\n                const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n                const reader = stream.readable.pipeThrough(decoderStream).getReader();\n                const encoderStream = createPacketEncoderStream();\n                encoderStream.readable.pipeTo(stream.writable);\n                this._writer = encoderStream.writable.getWriter();\n                const read = () => {\n                    reader\n                        .read()\n                        .then(({ done, value }) => {\n                        if (done) {\n                            return;\n                        }\n                        this.onPacket(value);\n                        read();\n                    })\n                        .catch((err) => {\n                    });\n                };\n                read();\n                const packet = { type: \"open\" };\n                if (this.query.sid) {\n                    packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n                }\n                this._writer.write(packet).then(() => this.onOpen());\n            });\n        });\n    }\n    write(packets) {\n        this.writable = false;\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            this._writer.write(packet).then(() => {\n                if (lastPacket) {\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        var _a;\n        (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n}\n", "import { XHR } from \"./polling-xhr.node.js\";\nimport { WS } from \"./websocket.node.js\";\nimport { WT } from \"./webtransport.js\";\nexport const transports = {\n    websocket: WS,\n    webtransport: WT,\n    polling: XHR,\n};\n", "// imported from https://github.com/galkn/parseuri\n/**\n * Parses a URI\n *\n * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.\n *\n * See:\n * - https://developer.mozilla.org/en-US/docs/Web/API/URL\n * - https://caniuse.com/url\n * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B\n *\n * History of the parse() method:\n * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c\n * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3\n * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    if (str.length > 8000) {\n        throw \"URI too long\";\n    }\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n", "import { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick, } from \"./globals.node.js\";\nconst withEventListeners = typeof addEventListener === \"function\" &&\n    typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());\n    }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nexport class SocketWithoutUpgrade extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n        this._pingInterval = -1;\n        this._pingTimeout = -1;\n        this._maxPayload = -1;\n        /**\n         * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n         * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n         */\n        this._pingTimeoutTime = Infinity;\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            const parsedUri = parse(uri);\n            opts.hostname = parsedUri.host;\n            opts.secure =\n                parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n            opts.port = parsedUri.port;\n            if (parsedUri.query)\n                opts.query = parsedUri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = [];\n        this._transportsByName = {};\n        opts.transports.forEach((t) => {\n            const transportName = t.prototype.name;\n            this.transports.push(transportName);\n            this._transportsByName[transportName] = t;\n        });\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        if (withEventListeners) {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this._beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this._offlineEventListener = () => {\n                    this._onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n            }\n        }\n        if (this.opts.withCredentials) {\n            this._cookieJar = createCookieJar();\n        }\n        this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n        if (this.transports.length === 0) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        const transportName = this.opts.rememberUpgrade &&\n            SocketWithoutUpgrade.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1\n            ? \"websocket\"\n            : this.transports[0];\n        this.readyState = \"opening\";\n        const transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this._onDrain.bind(this))\n            .on(\"packet\", this._onPacket.bind(this))\n            .on(\"error\", this._onError.bind(this))\n            .on(\"close\", (reason) => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess =\n            \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this._sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    this._resetPingTimeout();\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this._onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        const delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n            this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n            this._pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this._getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this._prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n        const shouldCheckPayloadSize = this._maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this._maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */ _hasPingExpired() {\n        if (!this._pingTimeoutTime)\n            return true;\n        const hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n            this._pingTimeoutTime = 0;\n            nextTick(() => {\n                this._onClose(\"ping timeout\");\n            }, this.setTimeoutFn);\n        }\n        return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this._onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports &&\n            this.transports.length > 1 &&\n            this.readyState === \"opening\") {\n            this.transports.shift();\n            return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this._pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (withEventListeners) {\n                if (this._beforeunloadEventListener) {\n                    removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n                }\n                if (this._offlineEventListener) {\n                    const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n                    if (i !== -1) {\n                        OFFLINE_EVENT_LISTENERS.splice(i, 1);\n                    }\n                }\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this._prevBufferLen = 0;\n        }\n    }\n}\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nexport class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n        super(...arguments);\n        this._upgrades = [];\n    }\n    onOpen() {\n        super.onOpen();\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            for (let i = 0; i < this._upgrades.length; i++) {\n                this._probe(this._upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    SocketWithoutUpgrade.priorWebsocketSuccess =\n                        \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        for (let i = 0; i < upgrades.length; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nexport class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n        const o = typeof uri === \"object\" ? uri : opts;\n        if (!o.transports ||\n            (o.transports && typeof o.transports[0] === \"string\")) {\n            o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"])\n                .map((transportName) => DEFAULT_TRANSPORTS[transportName])\n                .filter((t) => !!t);\n        }\n        super(uri, o);\n    }\n}\n", "import { Socket } from \"./socket.js\";\nexport { Socket };\nexport { SocketWithoutUpgrade, SocketWithUpgrade, } from \"./socket.js\";\nexport const protocol = Socket.protocol;\nexport { Transport, TransportError } from \"./transport.js\";\nexport { transports } from \"./transports/index.js\";\nexport { installTimerFunctions } from \"./util.js\";\nexport { parse } from \"./contrib/parseuri.js\";\nexport { nextTick } from \"./globals.node.js\";\nexport { Fetch } from \"./transports/polling-fetch.js\";\nexport { XHR as NodeXHR } from \"./transports/polling-xhr.node.js\";\nexport { XHR } from \"./transports/polling-xhr.js\";\nexport { WS as NodeWebSocket } from \"./transports/websocket.node.js\";\nexport { WS as WebSocket } from \"./transports/websocket.js\";\nexport { WT as WebTransport } from \"./transports/webtransport.js\";\n", "import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n", "import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n", "const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n", "import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n", "export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n", "import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        var _a, _b, _c;\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n        const discardPacket = this.flags.volatile && !isTransportWritable;\n        if (discardPacket) {\n        }\n        else if (isConnected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n", "/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n", "import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n            this.skipReconnect = true;\n        }\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), \n        // @ts-ignore\n        on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n", "import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\nexport { Fetch, NodeXHR, XHR, NodeWebSocket, WebSocket, WebTransport, } from \"engine.io-client\";\n", "export function passTime(ms: number): Promise<void> {\n  return new Promise((res, rej) => {\n    setTimeout(res, ms)\n  })\n}\n\nexport function setEqual<T>(set1: Set<T>, set2: Set<T>): boolean {\n  // we need compile option \"lib\": \"esnext\" for symmetricDifference\n  return set1.symmetricDifference(set2).size === 0\n}\n\ninterface AuthResponse {\n  message: string;\n  token: string;\n}\n\nexport interface AuthRequestData {\n  name: string;\n  url: string;\n}\n\nexport async function getAuthToken(data: AuthRequestData): Promise<string | null> {\n  try {\n    const endpoint: string = `${data.url}/auth`;\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Request failed with status ${response.status}: ${errorText}`);\n    }\n\n    const result: AuthResponse = await response.json();\n    console.log('Received token:', result.token);\n    return result.token;\n  } catch (error) {\n    console.error('Request failed:', error);\n      return null;\n  }\n} \n\n", "import { GameMessage, GameMsg } from \"../types/index.js\";\n\nexport class MessageKey {\n\n  constructor(\n    private readonly turn: number,\n    private readonly event: `${GameMsg}`,\n    private readonly sender: string,\n    private readonly recipient?: string,\n  ) {\n  }\n\n  toString() {\n    return `${this.turn}-${this.event}-${this.sender}-${this.recipient}`\n  }\n\n  static fromMsg(msg: GameMessage) {\n    return new this(msg.turn, msg.event, msg.sender, msg.to)\n  }\n\n}\n\ntype Log<M extends GameMessage> = { [key: string]: M };\n\nexport class MessageLog<M extends GameMessage> {\n\n  log: Log<M>;\n\n  constructor() {\n    this.log = {};\n  }\n\n  register(msg: M) {\n    const msgKey = MessageKey.fromMsg(msg);\n    this.log[msgKey.toString()] = msg;\n  }\n\n  find(turn: number, event: `${GameMsg}`, sender: string, to?: string): M | undefined {\n    const msgKey = new MessageKey(turn, event, sender, to);\n    return this.log[msgKey.toString()]\n  }\n\n  clear(msg: M) {\n    const msgKey = MessageKey.fromMsg(msg);\n    delete this.log[msgKey.toString()];\n  }\n\n}\n", "import { EventEmitter } from \"eventemitter3\";\nimport { io, Socket } from \"socket.io-client\";\nimport { Player, TurnInfo } from \"../../types/game.js\";\nimport {\n  GameAnswerMsg,\n  GameAnswerPayload,\n  GameMessage,\n  GameMsg,\n  GameQueryMsg,\n  GameQueryPayload,\n  GameReportMsg,\n  GameReportPayload,\n  GameUpdateMsg,\n  GameUpdatePayload\n} from \"../../types/gameMessages.js\";\nimport { GameSocket } from \"../../types/socket.interfaces.js\";\nimport { passTime, setEqual } from \"../../utils.js\";\nimport { MessageLog } from \"../messageLog.js\";\nimport { SetupSocketOptions } from \"../setup.js\";\n\nconst TIMEOUT = 3_000;\n\ntype FromTo = [string, string];\n\nexport interface SocketManagerOptions {\n  serverUrl: string;\n  token: string,\n  gameId: string,\n  forceNew?: boolean\n}\n\nexport class SocketManager extends EventEmitter {\n  game: GameSocket;\n  lobby: Socket;\n  gameId: string;\n  token: string;\n\n  private _ready: boolean;\n  msgLog: MessageLog<GameMessage>;\n\n  constructor(options: SocketManagerOptions) {\n    super();\n    \n    // get token and assign to \n\n    this.game = io(`${options.serverUrl}/game/${options.gameId}`, {\n      auth: {\n        token: options.token\n      }\n    });\n\n    this.lobby = io(options.serverUrl, {\n      auth: {\n        token: options.token\n      }\n\n    });\n    this.token = options.token;\n    this.gameId = options.gameId;\n    this._ready = false;\n    this.msgLog = new MessageLog();\n\n    const self = this;\n\n    this.game.on(GameMsg.TURN_END, (ack) => {\n      self.emit(GameMsg.TURN_END)\n      ack();\n    })\n\n    this.game.on(GameMsg.TURN_START, (turnInfo, ack) => {\n      self.emit(GameMsg.TURN_START, turnInfo)\n      ack();\n    })\n\n    this.game.on(GameMsg.QUERY, (msg: GameQueryMsg, ack: () => void) => {\n      this.msgLog.register(msg);\n      ack();\n    });\n\n    this.game.on(GameMsg.ANSWER, (msg: GameAnswerMsg, ack: () => void) => {\n      this.msgLog.register(msg);\n      ack();\n    });\n\n    this.game.on(GameMsg.UPDATE, (msg: GameUpdateMsg, ack: () => void) => {\n      this.msgLog.register(msg);\n      ack();\n    });\n\n    this.game.on(GameMsg.REPORT, (msg: GameReportMsg, ack: () => void) => {\n      this.msgLog.register(msg);\n      ack();\n    });\n\n  }\n\n  // emitWithAck(event: string, ...args: any[]) {\n  //   return new Promise<void>((res, rej) => {\n  //     const receptionChannel = nanoid();\n  //     this.once(receptionChannel, () => res())\n  //     this.emit(event, { receptionChannel }, ...args)\n  //   })\n  // }\n\n  // addListenerForAck(event: string, cb: (...args: any[]) => void) {\n  //   this.addListener(event, ({ receptionChannel }, ...args) => {\n  //     cb(args);\n  //     this.emit(receptionChannel);\n  //   })\n  // }\n\n  get sender(): Player {\n    // return this.name;\n    // XXX: we are returning the socket.id until we can identify users based on their auths\n    return this.game.id!\n  }\n  _lobbyReady(): boolean {\n    return this.lobby.connected\n  }\n\n  _gameReady(): boolean {\n    return this.game.connected\n  }\n\n  async socketsReady() {\n    while (!this._ready) {\n      await passTime(100);\n      if (this._lobbyReady() && this._gameReady()) {\n        this._ready = true;\n      }\n    }\n  }\n\n  lookLogForEvent(turn: number, event: GameMsg, fromTo: Set<FromTo>): GameMessage[] {\n    return Array.from(fromTo.values().map(s => {\n      return this.msgLog.find(turn, event, s[0], s[1])\n    }).filter(x => x !== undefined))\n  }\n\n  lookLogForQueries(turn: number, fromTo: Set<FromTo>): GameQueryMsg[] {\n    return this.lookLogForEvent(turn, GameMsg.QUERY, fromTo) as GameQueryMsg[]\n  }\n\n  lookLogForAnswer(turn: number, fromTo: Set<FromTo>): GameAnswerMsg[] {\n    return this.lookLogForEvent(turn, GameMsg.ANSWER, fromTo) as GameAnswerMsg[]\n  }\n\n  lookLogForUpdates(turn: number, fromTo: Set<FromTo>): GameUpdateMsg[] {\n    return this.lookLogForEvent(turn, GameMsg.UPDATE, fromTo) as GameUpdateMsg[]\n  }\n\n  lookLogForReport(turn: number, from: string): GameReportMsg | undefined {\n    return this.msgLog.find(turn, GameMsg.REPORT, from) as GameReportMsg | undefined\n  }\n\n  async advertisePlayerAsReady() {\n    await this.game.timeout(TIMEOUT).emitWithAck(GameMsg.READY);\n  }\n\n  async broadcastAnswer(turn: number, to: string, payload: GameAnswerPayload) {\n    const answerMsg = {\n      turn,\n      event: GameMsg.ANSWER,\n      sender: this.sender,\n      to,\n      payload\n    };\n    await this.game.timeout(TIMEOUT).emitWithAck(GameMsg.ANSWER, answerMsg);\n  }\n\n  async broadcastQuery(turn: number, to: string, payload: GameQueryPayload) {\n    const queryMsg = {\n      turn,\n      event: GameMsg.QUERY,\n      sender: this.sender,\n      to,\n      payload\n    };\n    await this.game.timeout(TIMEOUT).emitWithAck(GameMsg.QUERY, queryMsg);\n  }\n\n  async broadcastUpdate(turn: number, to: string, payload: GameUpdatePayload) {\n    const updateMsg = {\n      turn,\n      event: GameMsg.UPDATE,\n      sender: this.sender,\n      to,\n      payload\n    };\n    await this.game.timeout(TIMEOUT).emitWithAck(GameMsg.UPDATE, updateMsg);\n  }\n\n  async broadcastReport(turn: number, payload: GameReportPayload) {\n    const reportMsg = {\n      turn,\n      event: GameMsg.REPORT,\n      sender: this.sender,\n      payload,\n    };\n    await this.game.timeout(TIMEOUT).emitWithAck(GameMsg.REPORT, reportMsg);\n  }\n\n  async waitForQuery(turn: number, activePlayer: string, players: Player[]): Promise<Map<string, GameQueryPayload>> {\n    const playerSet = new Set(players);\n    const queries: Map<Player, GameQueryPayload> = new Map();\n    return new Promise(async (res, rej) => {\n      setTimeout(rej, TIMEOUT);\n      while (true) {\n        await passTime(100);\n        const missingPlayers = new Set(playerSet.difference(new Set(queries.keys()))\n          .values()\n          .map(from => [from, activePlayer] as FromTo))\n        const loggedMsgs = this.lookLogForQueries(turn, missingPlayers);\n        loggedMsgs.forEach(msg => queries.set(msg.sender, msg.payload));\n        const enough = setEqual(playerSet, new Set(queries.keys()));\n        if (!enough) { await passTime(100); } else { break; }\n      }\n      res(queries)\n    });\n  }\n\n  async waitForAnswer(turn: number, activePlayer: Player, players: Player[]): Promise<Map<string, GameAnswerPayload>> {\n    const playerSet = new Set(players);\n    const answers: Map<Player, GameAnswerPayload> = new Map();\n    return new Promise(async (res, rej) => {\n      setTimeout(rej, TIMEOUT);\n      while (true) {\n        const missingPlayers = new Set(playerSet.difference(new Set(answers.keys()))\n          .values()\n          .map(from => [activePlayer, from] as FromTo))\n        const loggedMsgs = this.lookLogForAnswer(turn, missingPlayers);\n        loggedMsgs.forEach(msg => answers.set(msg.to, msg.payload));\n        const enough = setEqual(playerSet, new Set(answers.keys()));\n        if (!enough) { await passTime(100); } else { break; }\n      }\n      res(answers)\n    });\n  }\n\n  async waitForUpdates(turn: number, activePlayer: string, players: Player[]): Promise<Map<string, GameUpdatePayload>> {\n    const playerSet = new Set(players);\n    const updates: Map<Player, GameUpdatePayload> = new Map();\n    return new Promise(async (res, rej) => {\n      setTimeout(rej, TIMEOUT);\n      while (true) {\n        await passTime(100);\n        const missingPlayers = new Set(playerSet.difference(new Set(updates.keys()))\n          .values()\n          .map(from => [from, activePlayer] as FromTo))\n        const loggedMsgs = this.lookLogForUpdates(turn, missingPlayers);\n        loggedMsgs.forEach(msg => updates.set(msg.sender, msg.payload));\n        let enough = setEqual(playerSet, new Set(updates.keys()));\n        if (!enough) { await passTime(100); } else { break; }\n      }\n      res(updates)\n    });\n  }\n\n  async waitForReport(turn: number, from: Player): Promise<GameReportPayload> {\n    let report: GameReportPayload | undefined = undefined;\n    return new Promise(async (res, rej) => {\n      setTimeout(rej, TIMEOUT);\n      while (report === undefined) {\n        await passTime(100);\n        const reportMsg = this.lookLogForReport(turn, from);\n        report = reportMsg?.payload;\n      }\n      res(report)\n    });\n  }\n\n  async waitForGameStartEvent(): Promise<void> {\n    // TODO: add setTimeout to run rej branch\n    return new Promise((res, rej) => {\n      this.game.once(GameMsg.STARTED, (ack) => { ack(); res() })\n    });\n  }\n\n  async waitForTurnStartEvent(): Promise<TurnInfo> {\n    // TODO: add setTimeout to run rej branch\n    return new Promise((res, rej) => {\n      this.game.once(GameMsg.TURN_START, (data: TurnInfo, ack) => { ack(); res(data) })\n    });\n  }\n\n\n}\n", "import { GameClient } from \"./game/gameclient.js\";\nimport { SocketManager } from \"./sockets/socketManager.js\";\nimport { getAuthToken, AuthRequestData } from \"./../utils.js\";\n\nexport async function initClient(name: string, url: string, gameId: string) {\n\n  const data: AuthRequestData = { name: name, url: url };\n  const newToken = await getAuthToken(data);\n\n  if (newToken) {\n    const sockets = new SocketManager({\n      serverUrl: url,\n      token: newToken,\n      gameId: gameId, \n    });\n\n    await sockets.socketsReady();\n\n    const client = new GameClient(sockets.token, sockets);\n\n    await client.play();\n  } else {\n    console.log(\"Could not get user token from gamemaster in /auth\")\n  } \n}\n", "import { initClient } from 'client/init'\n\ninterface Agent {\n    id: number;\n    row: number;\n    col: number;\n}\n\ntype ActionMode = \"move\" | \"trap\" | null;\n\ninterface CellPosition {\n    row: number;\n    col: number;\n}\n\n// Connection logic\n\ntry {\n    initClient(\"web-gamer\", \"http://0.0.0.0:2448\", \"0\");\n} catch (e) {\n    console.error(\"Client failed to initialize\");\n}\n\n// Main game logic\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const grid = document.getElementById(\"grid\") as HTMLDivElement;\n    const log = document.getElementById(\"log\") as HTMLDivElement;\n    const moveBtn = document.getElementById(\"move-btn\") as HTMLButtonElement;\n    const trapBtn = document.getElementById(\"trap-btn\") as HTMLButtonElement;\n    const errorMessage = document.getElementById(\"error-message\") as HTMLDivElement;\n    const tutorial = document.getElementById(\"tutorial\") as HTMLDivElement;\n\n    let agents: Agent[] = [];\n    let turn: number = 0;\n    const maxAgents: number = 4;\n    let selectedAgentCell: CellPosition | null = null;\n    let actionMode: ActionMode = null;\n\n    function initializeGrid(): void {\n        for (let i = 0; i < 16; i++) {\n            const cell = document.createElement(\"div\");\n            cell.className = \"cell\";\n            cell.dataset.index = i.toString();\n            grid.appendChild(cell);\n        }\n    }\n\n    initializeGrid();\n    updateTutorial();\n    logMessage(\"GAME STARTED\");\n\n    moveBtn.addEventListener(\"click\", () => {\n        if (turn > 0) {\n            actionMode = \"move\";\n            moveBtn.classList.add(\"active\");\n            trapBtn.classList.remove(\"active\");\n            logMessage(\"MOVE SELECTED\");\n            updateTutorial();\n        }\n    });\n\n    trapBtn.addEventListener(\"click\", () => {\n        if (turn > 0) {\n            actionMode = \"trap\";\n            trapBtn.classList.add(\"active\");\n            moveBtn.classList.remove(\"active\");\n            logMessage(\"TRAP SELECTED\");\n            updateTutorial();\n        }\n    });\n\n    grid.addEventListener(\"click\", (e: Event) => {\n        const target = e.target as HTMLElement;\n        const cell = target.className === \"cell\" ? target : target.closest(\".cell\") as HTMLElement;\n        if (!cell) return;\n\n        const index = parseInt(cell.dataset.index!);\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n\n        if (turn === 0) {\n            if (agents.length < maxAgents) {\n                const agent = document.createElement(\"div\");\n                agent.className = \"agent\";\n                const agentId = agents.length + 1;\n                agent.textContent = `A${agentId}`;\n                cell.appendChild(agent);\n                agents.push({ id: agentId, row, col });\n                logMessage(`AGENT A${agentId} DEPLOYED TO (${row + 1},${col + 1})`);\n                updateTutorial();\n\n                if (agents.length === maxAgents) {\n                    turn = 1;\n                    logMessage(\"DEPLOYMENT COMPLETE - TURN 1\");\n                    updateTutorial();\n                }\n            }\n        } else if (turn > 0 && actionMode) {\n            const agentsInCell = agents.filter(a => a.row === row && a.col === col);\n            if (agentsInCell.length > 0 && !selectedAgentCell) {\n                selectedAgentCell = { row, col };\n                cell.classList.add(\"selected\");\n                logMessage(`CELL (${row + 1},${col + 1}) SELECTED`);\n                highlightPossibleCells(row, col);\n                updateTutorial();\n            } else if (selectedAgentCell) {\n                if (actionMode === \"move\") {\n                    moveAgent(row, col);\n                } else if (actionMode === \"trap\") {\n                    deployTrap(row, col);\n                }\n            }\n        } else if (turn > 0 && !actionMode) {\n            showError(\"SELECT MOVE OR TRAP FIRST\");\n        }\n    });\n\n    function highlightPossibleCells(row: number, col: number): void {\n        clearPossibleHighlights();\n        const directions = [\n            { r: -1, c: 0 }, // up\n            { r: 1, c: 0 },  // down\n            { r: 0, c: -1 }, // left\n            { r: 0, c: 1 }   // right\n        ];\n\n        directions.forEach(dir => {\n            const newRow = row + dir.r;\n            const newCol = col + dir.c;\n\n            if (newRow >= 0 && newRow < 4 && newCol >= 0 && newCol < 4) {\n                const index = newRow * 4 + newCol;\n                const cell = grid.children[index] as HTMLElement;\n                cell.classList.add(\"possible\");\n            }\n        });\n    }\n\n    function clearPossibleHighlights(): void {\n        const cells = document.querySelectorAll(\".cell.possible\");\n        cells.forEach(cell => cell.classList.remove(\"possible\"));\n    }\n\n    function moveAgent(newRow: number, newCol: number): void {\n        const { row: oldRow, col: oldCol } = selectedAgentCell!;\n        const rowDiff = Math.abs(newRow - oldRow);\n        const colDiff = Math.abs(newCol - oldCol);\n        if ((rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1)) {\n            const agentToMove = agents.find(a => a.row === oldRow && a.col === oldCol);\n            if (agentToMove) {\n                const oldCell = grid.children[oldRow * 4 + oldCol] as HTMLElement;\n                const newCell = grid.children[newRow * 4 + newCol] as HTMLElement;\n                const agentElement = oldCell.querySelector(\".agent\") as HTMLElement;\n                newCell.appendChild(agentElement);\n                agentToMove.row = newRow;\n                agentToMove.col = newCol;\n                logMessage(`AGENT A${agentToMove.id} MOVED TO (${newRow + 1},${newCol + 1})`);\n                endTurn();\n            }\n        }\n    }\n\n    function deployTrap(newRow: number, newCol: number): void {\n        const { row: oldRow, col: oldCol } = selectedAgentCell!;\n        const rowDiff = Math.abs(newRow - oldRow);\n        const colDiff = Math.abs(newCol - oldCol);\n        if ((rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1)) {\n            const newCell = grid.children[newRow * 4 + newCol] as HTMLElement;\n            const trap = document.createElement(\"div\");\n            trap.className = \"trap\";\n            trap.textContent = \"\uD83D\uDCA3\";\n            newCell.appendChild(trap);\n            logMessage(`TRAP DEPLOYED TO (${newRow + 1},${newCol + 1})`);\n            endTurn();\n        }\n    }\n\n    function endTurn(): void {\n        if (selectedAgentCell) {\n            const { row, col } = selectedAgentCell;\n            const oldCell = grid.children[row * 4 + col] as HTMLElement;\n            oldCell.classList.remove(\"selected\");\n            selectedAgentCell = null;\n        }\n        clearPossibleHighlights();\n        actionMode = null;\n        moveBtn.classList.remove(\"active\");\n        trapBtn.classList.remove(\"active\");\n        turn++;\n        logMessage(`TURN ${turn}`);\n        updateTutorial();\n    }\n\n    function logMessage(message: string): void {\n        const p = document.createElement(\"p\");\n        p.textContent = `> ${message}`;\n        log.appendChild(p);\n        log.scrollTop = log.scrollHeight;\n    }\n\n    function showError(message: string): void {\n        errorMessage.textContent = message;\n        errorMessage.style.display = \"block\";\n        errorMessage.classList.add(\"active\");\n        setTimeout(() => {\n            errorMessage.style.display = \"none\";\n            errorMessage.classList.remove(\"active\");\n        }, 2000);\n    }\n\n    function updateTutorial(): void {\n        if (turn === 0) {\n            const remaining = maxAgents - agents.length;\n            tutorial.textContent = `DEPLOY ${remaining} AGENTS BY CLICKING ANY CELL`;\n        } else if (turn > 0) {\n            if (!actionMode && !selectedAgentCell) {\n                tutorial.textContent = \"SELECT MOVE OR TRAP\";\n            } else if (actionMode === \"move\" && !selectedAgentCell) {\n                tutorial.textContent = \"CLICK AN AGENT CELL TO MOVE\";\n            } else if (actionMode === \"move\" && selectedAgentCell) {\n                tutorial.textContent = \"CLICK AN ADJACENT CELL TO MOVE\";\n            } else if (actionMode === \"trap\" && !selectedAgentCell) {\n                tutorial.textContent = \"CLICK AN AGENT CELL TO DEPLOY TRAP\";\n            } else if (actionMode === \"trap\" && selectedAgentCell) {\n                tutorial.textContent = \"CLICK AN ADJACENT CELL TO DEPLOY TRAP\";\n            }\n        }\n    }\n});\n"],
  "mappings": "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",
  "names": ["EventEmitter", "emit", "on", "value", "self", "ProcessingStatus", "err", "cancel", "spawnChild", "stop", "actions", "event", "value", "getMeta", "toJSON", "can", "hasTag", "matches", "self", "raise", "self", "emit", "assign", "t", "STATE_IDENTIFIER", "self", "children", "value", "GameMsg", "Actors", "Guards", "PlayerStates", "Actions", "ClientEvent", "log", "self", "toArray", "withNativeArrayBuffer", "isBinary", "on", "decode", "_a", "value", "decode", "protocol", "protocol", "withNativeArrayBuffer", "isView", "withNativeBlob", "toJSON", "protocol", "PacketType", "value", "RESERVED_EVENTS", "Socket", "self", "self", "Socket", "socket", "cache", "lookup", "Socket", "EventEmitter", "lookup", "self", "url", "log"]
}
