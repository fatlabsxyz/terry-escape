{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":3876827267427106833,"abi":{"parameters":[{"name":"board_used","type":{"kind":"array","length":16,"type":{"kind":"field"}},"visibility":"private"},{"name":"old_board_salt","type":{"kind":"field"},"visibility":"private"},{"name":"new_board_salt","type":{"kind":"field"},"visibility":"private"},{"name":"params","type":{"kind":"struct","path":"bignum::params::BigNumParams","fields":[{"name":"has_multiplicative_inverse","type":{"kind":"boolean"}},{"name":"modulus","type":{"kind":"array","length":9,"type":{"kind":"field"}}},{"name":"modulus_u60","type":{"kind":"struct","path":"bignum::utils::u60_representation::U60Repr","fields":[{"name":"limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":64}}}]}},{"name":"modulus_u60_x4","type":{"kind":"struct","path":"bignum::utils::u60_representation::U60Repr","fields":[{"name":"limbs","type":{"kind":"array","length":36,"type":{"kind":"integer","sign":"unsigned","width":64}}}]}},{"name":"double_modulus","type":{"kind":"array","length":9,"type":{"kind":"field"}}},{"name":"redc_param","type":{"kind":"array","length":9,"type":{"kind":"field"}}}]},"visibility":"public"},{"name":"key_set","type":{"kind":"array","length":1290,"type":{"kind":"array","length":9,"type":{"kind":"field"}}},"visibility":"public"},{"name":"entropy","type":{"kind":"array","length":1289,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"veils_used","type":{"kind":"array","length":16,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"veils_salt","type":{"kind":"array","length":16,"type":{"kind":"field"}},"visibility":"private"},{"name":"responses","type":{"kind":"array","length":32,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"array","length":16,"type":{"kind":"field"}},{"kind":"array","length":9,"type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13265554733035650515":{"error_kind":"string","string":"BigNum::validate_gt check fails"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+zdBXRj19bt+RMHK8xMUhjsbFsyhaUwM6NkCDMzMzMzMzMzMzMzMye9Tl6l4nuzrrvH2HP7aXbmHmP3q17fe/X9VDo6Rzq2/hkp+z/ruYuybItx/8+fRx4+Gz/7e41ku2n4/2wU26PaHs326LbHsD3M9pi2x7I9tu1xbOd/3XgD/t+PPPz/nHD4/zlwNrXtBf9rNo0zm9aZTefMpndmBWdWdGYzOLMZndlMzmxmZzaLM5vVmc3mzGZ3ZnM4szmdWbMza3Fmczmz4MxanVmbMys5s7Iza3dmHc6s05l1ObNuZza3M5vHmc3rzOZzZvM7swWc2YLOrOLMqs5sIWe2sDNbxJkt6swWc2aLO7MlnNmSzmwpZ7a0M1vGmS3rzJZzZss7sxWc2e3N/zyX3OHM7nRmdzmzu53ZPc7sXmd2nzO735k94MwedGYPObOHndkjzuxRZ/aYM3vcmT3hzJ50Zk85s6ed2TPO7Fln9pwze96ZveDMXnRmLzmzl53ZK87sVWf2mjN73Zm94czedGZvObO3ndk7zuxdZ/aeM3vfmX3gzD50Zh85s4+d2SfO7FNn9pkz+9yZfeHMvnRmXzmzr53ZN87sW2f2nTP73pn94Mx+dGY/ObOfndkvzuxXZ/abM/vdmf3hzPIL/3/PRnJmTc5sZGc2ijMb1ZmN5sxGd2ZjOLNhzmxMZzaWMxvbmY3jzMZ1ZuM5s/Gd2QTObEJnNpEzm9iZTeLMJnVmkzmzyZ3ZFM5sSmc2lTOb2plN48ymdWbTObPpnVnBmRWd2QzObEZnNpMzm9mZzeLMZnVmszmz2Z3ZHM5sTmfW7MxanNlcziw4s1Zn1ubMSs6s7MzanVmHM+t0Zl3OrNuZze3M5nFm8zqz+ZzZ/M5sAWe2oDOrOLOqM1vImS3szBZxZos6s8Wc2eLObAlntqQzW8qZLe3MlnFmyzqz5ZzZ8s5sBWe2ojNbyZmt7MxWcWarOrPVnNnqzmwNZ7amM1vLma3tzNZxZus6s/Wc2frOrObM6s6sx5n1OrM+Z9bvzDZwZhs6s42c2cbObBNntqkz28yZbe7MtnBmWzqzrZzZ1s5sG2e2rTPbzplt78x2cGY7OrOdnNnOzmwXZ7arM9vNme3uzPZwZns6s72c2d7ObB9ntq8z28+Z7e/MDnBmBzqzg5zZwc7sEGd2qDM7zJkd7syOcGZHOrOjnNnRzuwYZ3asMzvOmR3vzE5wZic6s5Oc2cnO7BRndqozO82Zne7MznBmZzqzs5zZ2c7sHGd2rjM7z5md78wucGYXOrOLnNnFzuwSZ3apM7vMmV3uzK5wZlc6s6uc2dXO7Bpndq0zu86ZXe/MbnBmNzqzm5zZzc7sFmd2qzO7zZnd7szucGZ3OrO7nNndzuweZ3avM7vPmd3vzB5wZg86s4ec2cPO7BFn9qgze8yZPe7MnnBmTzqzp5zZ087sGWf2rDN7zpk978xecGYvOrOXnNnLzuwVZ/aqM3vNmb3uzN5wZm86s7ec2dvO7B1n9q4ze8+Zve/MPnBmHzqzj5zZx87sE2f2qTP7zJl97sy+cGZfOrOvnNnXzuwbZ/atM/vOmX3vzH5wZj86s5+c2c/O7Bdn9qsz+82Z/e7M/nBm+Q/5/ns2kjNrcmYjO7NRnNmozmw0Zza6MxvDmQ1zZmM6s7Gc2djObBxnNq4zG8+Zje/MJnBmEzqziZzZxM5sEmc2qTObzJlN7symcGZTOrOpnNnUzmwaZzatM5vOmU3vzArOrOjMZnBmMzqzmZzZzM5sFmc2qzObzZnN7szmcGZzOrNmZ9bizOZyZsGZtTqzNmdWcmZlZ9buzDqcWacz63Jm3c5sbmc2jzOb15nN58zmd2YLOLMFnVnFmVWd2ULObGFntogzW9SZLebMFndmSzizJZ3ZUs5saWe2jDNb1pkt58yWd2YrOLMVndlKzmxlZ7aKM1vVma3mzFZ3Zms4szWd2VrObG1nto4zW9eZrefM1ndmNWdWd2Y9zqzXmfU5s35ntoEz29CZbeTMNnZmmzizTZ3ZZs5sc2e2hTPb0plt5cy2dmbbOLNtndl2zmx7Z7aDM9vRme3kzHZ2Zrs4s12d2W7ObHdntocz29OZ7eXM9nZm+zizfZ3Zfs5sf2d2gDM70Jkd5MwOdmaHOLNDndlhzuxwZ3aEMzvSmR3lzI52Zsc4s2Od2XHO7HhndoIzO9GZneTMTnZmpzizU53Zac7sdGd2hjM705md5czOdmbnOLNzndl5zux8Z3aBM7vQmV3kzC52Zpc4s0ud2WXO7HJndoUzu9KZXeXMrnZm1ziza53Zdc7semd2gzO70Znd5Mxudma3OLNbndltzux2Z3aHM7vTmd3lzO52Zvc4s3ud2X3O7H5n9oAze9CZPeTMHnZmjzizR53ZY87scWf2hDN70pk95cyedmbPOLNnndlzzux5Z/aCM3vRmb3kzF52Zq84s1ed2WvO7HVn9oYze9OZveXM3nZm7zizd53Ze87sfWf2gTP70Jl95Mw+dmafOLNPndlnzuxzZ/aFM/vSmX3lzL52Zt84s2+d2XfO7Htn9oMz+9GZ/eTMfnZmvzizX53Zb87sd2f2hzPLf6H/v2cjObMmZzayMxvFmY3qzEZzZqM7szGc2TBnNqYzG8uZje3MxnFm4zqz8ZzZ+M5sAmc2oTObyJlN7MwmcWaTOrPJnNnkzmwKZzalM5vKmU3tzKZxZtM6s+mc2fTOrODMis5sBmc2ozObyZnN7MxmcWazOrPZnNnszmwOZzanM2t2Zi3ObC5nFpxZqzNrc2YlZ1Z2Zu3OrMOZdTqzLmfW7czmdmbzOLN5ndl8zmx+Z7aAM1vQmVWcWdWZLeTMFnZmizizRZ3ZYs5scWe2hDNb0pkt5cyWdmbLOLNlndlyzmx5Z7aCM1vRma3kzFZ2Zqs4s1Wd2WrObHVntoYzW9OZreXM1nZm6zizdZ3Zes5sfWdWc2Z1Z9bjzHqdWZ8z63dmGzizDZ3ZRs5sY2e2iTPb1Jlt5sw2d2ZbOLMtndlWzmxrZ7aNM9vWmW3nzLZ3Zjs4sx2d2U7ObGdntosz29WZ7ebMdndmezizPZ3ZXs5sb2e2jzPb15nt58z2d2YHOLMDndlBzuxgZ3aIMzvUmR3mzA53Zkc4syOd2VHO7GhndowzO9aZHefMjndmJzizE53ZSc7sZGd2ijM71Zmd5sxOd2ZnOLMzndlZzuxsZ3aOMzvXmZ3nzM53Zhc4swud2UXO7GJndokzu9SZXebMLndmVzizK53ZVc7samd2jTO71pld58yud2Y3OLMbndlNzuxmZ3aLM7vVmd3mzG53Znc4szud2V3O7G5ndo8zu9eZ3efM7ndmDzizB53ZQ87sYWf2iDN71Jk95swed2ZPOLMnndlTzuxpZ/aMM3vWmT3nzJ53Zi84sxed2UvO7GVn9ooze9WZvebMXndmbzizN53ZW87sbWf2jjN715m958zed2YfOLMPndlHzuxjZ/aJM/vUmX3mzD53Zl84sy+d2VfO7Gtn9o0z+9aZfefMvndmPzizH53ZT87sZ2f2izP71Zn95sx+d2Z/OLM83vHfs5GcWZMzG9mZjeLMRnVmozmz0Z3ZGM5smDMb05mN5czGdmbjOLNxndl4zmx8ZzaBM5vQmU3kzCZ2ZpM4s0md2WTObHJnNoUzm9KZTeXMpnZm0zizaZ3ZdM5semdWcGZFZzaDM5vRmc3kzGZ2ZrM4s1md2WzObHZnNoczm9OZNTuzFmc2lzMLzqzVmbU5s5IzKzuzdmfW4cw6nVmXM+t2ZnM7s3mc2bzObD5nNr8zW8CZLejMKs6s6swWcmYLO7NFnNmizmwxZ7a4M1vCmS3pzJZyZks7s2Wc2bLObDlntrwzW8GZrejMVnJmKzuzVZzZqs5sNWe2ujNbw5mt6czWcmZrO7N1nNm6zmw9Z7a+M6s5s7oz63Fmvc6sz5n1O7MNnNmGzmwjZ7axM9vEmW3qzDZzZps7sy2c2ZbObCtntrUz28aZbevMtnNm2zuzHZzZjs5sJ2e2szPbxZnt6sx2c2a7O7M9nNmezmwvZ7a3M9vHme3rzPZzZvs7swOc2YHO7CBndrAzO8SZHerMDnNmhzuzI5zZkc7sKGd2tDM7xpkd68yOc2bHO7MTnNmJzuwkZ3ayMzvFmZ3qzE5zZqc7szOc2ZnO7CxndrYzO8eZnevMznNm5zuzC5zZhc7sImd2sTO7xJld6swuc2aXO7MrnNmVzuwqZ3a1M7vGmV3rzK5zZtc7sxuc2Y3O7CZndrMzu8WZ3erMbnNmtzuzO5zZnc7sLmd2tzO7x5nd68zuc2b3O7MHnNmDzuwhZ/awM3vEmT3qzB5zZo87syec2ZPO7Cln9rQze8aZPevMnnNmzzuzF5zZi87sJWf2sjN7xZm96sxec2avO7M3nNmbzuwtZ/a2M3vHmb3rzN5zZu87sw+c2YfO7CNn9rEz+8SZferMPnNmnzuzL5zZl87sK2f2tTP7xpl968y+c2bfO7MfnNmPzuwnZ/azM/vFmf3qzH5zZr87sz+cWR7q/e/ZSM6syZmN7MxGcWajOrPRnNnozmwMZzbMmY3pzMZyZmM7s3Gc2bjObDxnNr4zm8CZTejMJnJmEzuzSZzZpM5sMmc2uTObwplN6cymcmZTO7NpnNm0zmw6Zza9Mys4s6Izm8GZzejMZnJmMzuzWZzZrM5sNmc2uzObw5nN6cyanVmLM5vLmQVn1urM2pxZyZmVnVm7M+twZp3OrMuZdTuzuZ3ZPM5sXmc2nzOb35kt4MwWdGYVZ1Z1Zgs5s4Wd2SLObFFntpgzW9yZLeHMlnRmSzmzpZ3ZMs5sWWe2nDNb3pmt4MxWdGYrObOVndkqzmxVZ7aaM1vdma3hzNZ0Zms5s7Wd2TrObF1ntp4zW9+Z1ZxZ3Zn1OLNeZ9bnzPqd2QbObENntpEz29iZbeLMNnVmmzmzzZ3ZFs5sS2e2lTPb2plt48y2dWbbObPtndkOzmxHZ7aTM9vZme3izHZ1Zrs5s92d2R7ObE9ntpcz29uZ7ePM9nVm+zmz/Z3ZAc7sQGd2kDM72Jkd4swOdWaHObPDndkRzuxIZ3aUMzvamR3jzI51Zsc5s+Od2QnO7ERndpIzO9mZneLMTnVmpzmz053ZGc7sTGd2ljM725md48zOdWbnObPzndkFzuxCZ3aRM7vYmV3izC51Zpc5s8ud2RXO7EpndpUzu9qZXePMrnVm1zmz653ZDc7sRmd2kzO72Znd4sxudWa3ObPbndkdzuxOZ3aXM7vbmd3jzO51Zvc5s/ud2QPO7EFn9pAze9iZPeLMHnVmjzmzx53ZE87sSWf2lDN72pk948yedWbPObPnndkHzuxDZ/aRM/vYmX3izD51Zp85s8+d2RfO7Etn9pUz+9qZfePMvnVm3zmz753ZD87sR2f2kzP72Zn94sx+dWa/ObPfndkfziz/j0r992wkZ9bkzEZ2ZqM4s1Gd2Wilv///8/++2fTZ/1n5MZgfc/kxlh9T+TGUHzP5MZIfE/kxkD/n+XOcP6f5c5g/Z/lzlD8n+XOQ/5vn/8b5v2n+b5j/m+X/Rvm/Sf5v8OdjLv2fx5Q/htycG3NTvkYZbhkp++f6a7bg8P8zxK1W4N8VmgY4i8Mfywyl/3oAIyd8AKXQUS73dbb1tZZaa6Gtu97VHsrt9Y6u1q7W9q723rauUqmvq9zV2V3v7gzdreVSX2t/e3epf/hflqP/P/5dPf8vf1frDCXcP+xQHhAjZWkOiBmHHwgzpT4gRgIeEDMCD4iZSA+IpizNATHz8ANhltQHRBPwgJgZeEDMQnpAjJylOSBmHX4gzJb6gBgZeEDMCjwgZiM9IEbJ0hwQsw8/EOZIfUCMAjwgZgceEHOQHhCjZmkOiDmHHwjNqQ+IUYEHxJzAA6KZ9IAYLUtzQLQMPxDmSn1AjAY8IFqAB8RcpAfE6FmaAyIMPxBaUx8QowMPiAA8IFpJD4gxsjQHRNvwA6GU+oAYA3hAtAEPiBLpATEsS3NAlIcfCO2pD4hhwAOiDDwg2kkPiDGzNAdEx/ADoTP1ATEm8IDoAB4QnaQHxFhZmgOia/iB0J36gBgLeEB0AQ+IbtIDYuwszQEx9/ADYZ7UB8TYwANibuABMQ/pATFOluaAmHf4gTBf6gNiHOABMS/wgJiP9IAYN0tzQMw//EBYIPUBMS7wgJgfeEAsQHpAjJelOSAWHH4gVFIfEOMBD4gFgQdEBXhA5E96/vF64L/liL+7q9TX2d3a2ttVag/dnR1t3Sbo6Gwvtfb3tLb31Pp7O7trXd31vr6eeqm7O5T6O7rbO9t6Okod/eVae+33//r7Wmud/e19/bVab2d/yf6CtvZad2tXfyn09HT1dpZKpf6enlq90/7HPd2hv7Xc29fVWu/paW/r6u/uLrX3/o59fsM/Dvj2cq3W1VHrLPXUu2qlcntbe197vd7X29FXLtVrra3dXX1dHaG/vb/U3R7aOrr6O1t7+8vt3a313r5yaPtvX1vo7u3pr/e32f+nvbO/u78jlO1fptzb2Vrr6eiv9Xd1ttn/yv6eznLo7AnlvnpHW2uto62rs6fW09rWkfrxtvaUy/1ttfY2+9/e1WqHXa2rZIB2Owp7+rrqdnS2hrZy/g9gf+xq7a7Xe2v97bW2Wm+tq9xZ7vqHr1Sr9fWVOvo6ym1ttdZee7fb2lFqs8fa3t1d6+vuq9tB0dPW09pZ6+rpbgu1WskOoq56V3dPe7/9L0/9eNs6eu1RtXaEno4ue5x23HW093f01MudrW32NPQF+zfo7i+XSl35k1Sutbb1dNsh2d/W1l/v6K//4/kN7T2doadU7+4JvXYsl3taQ+gr1do66/2lnp5SZ/6g+rt6enu7y3bk9JRDl71c2kq9neWOsj3w/uSPN/T1dvd02DPR1tnWmT/b3V31/p6+0N7Z1dve3VtvrfXW++yQ7yyV+zv7az099iqv20mnu9zf09/R94/jubunt7O3ZKekUle91N7V09HWU66F0N9ZqoXe1lCr1zr72mu1Wih3BvsfdLaW+ru6W/vqffXutlJna/LXb5s9jV21ek9Hjx1Uve2h1FnqtX/qXjsYa/XW9o78ielsq5fqrf2d9a6OVjsPhda29s7Q3tZb6ir94/HaY7STXr079NXs6e/u7u3oaA81e1nYadFOy/XQ1treVw+1zu7Q1RrqdnzZAd7V1tFpf+psTf94+1tDR39Hb7mjbidMO+O2ddsprK3cbZT+tlJXpx2BdiSW7drS1m8nq1DuKXfYQ2jvL3cEexn/8/mt1bvswO9s62/ttbNxuc1eE909Zfu36u/sbA32j2Wv2t6O1nY7M9o/XEdnqbWv3NVh/4vq9irpTP/8dnf1t/XZyaVsV6L21u6ervzp7u3On1o7ykKrnai7Qn+bnaq6elq7y/YMd9Tau9vtxVjq6P7n+bTUXreXpV1+7VxU7uvps1durx2//TW7pJV6++363B3s1Vqyf4NWe+n2tNvpq69up8taraerVE/++u3ptotBubPbri52/u2rdXb2ddbtDYGdXfrL9qqudZbtuai32qu8q81eyG1toaettauzq7W/o/+fvrbOrv6uDnsye7vtGQz19t5aW8keqp3y+0rt5d6e9t6eerDzob1q6p12Gm/r6u2t9/fXW4O9VDqTX49CvS+/YvSX7MGU2u3CUWsv1To7Ovr7Ost2ruruKnV22YmzZi9IO9Jr9u9R7+9otYPfzi399fI/X2/9dqyX20No7+vq7rA3FHbcdLd3lOyqV+vvrvX29tp7mnpnu52+7M1Wvd3+dUJ7rWRHTX5xagvJn9/u/v6ucqmz1pcfh13d3V2t5XJrva0USh32XNY7+3vtf2DXzf7+0NdVsquM/f8b1N5N1Hs7wj/Oz639vW3lzlK7/b/s7LNXZ0e9ra3X/rqe/s6e3nKX/c/K/e32ZrJkL5K6PVA7rO28UOq2K2GH/dOnf7x2TPaW++xF3NXTVbbrR297l63O/NVsbwzbu9pq5VJ7R3unnVjsghm6+tpDX3fZrkj26iv3dv/z8baX7GTX0dtq17B62a4+5Vpvd59ddNpr+f+3rdv+UnvZ2BvV1nY72u3S3xVa6932/jS0hfb0r187AXcHe7jltnZ7PZXLnfbmp92uxV32ELvs3ZK9DWzv7St11ut2DbZzi/1fsDeM9qjsRNxd+ufxXKuVO/vs3VVva1tvV3uHva20N8j5+c3Oc6EnfxvekX9K6O+t9eX/2+zNZr+9q+4r2TvP1t56+vNz/qGgq7fDrqwd/fbmvaOnu9WexFJvPdiB12XPqL3X7+rrCL0lO1/b01DvtGtX6O/rrnW093X0/ON81dNvnw+CvYvurXWX7X1kt71rsY8ZdkHvtTNAudfeuNhHg1L+VrW73NoZeru62+wDVWev/S+yq1byx9vb2tlVstdkm11/7FTTah8MeuxV3NVr7/Vb8zdDHfZZwd4llO14787PUT32nqTfXtV2ju5sLf/j8fbV7dxb7u8v2wHS31OyTwP2iukp9dg5235wWW+1B9Zm5/o2+6hgl/b8Ktcf7N1aX62jyz5+9KR+vCV7q2efacp2du6s1e1FaRcR++fP30zZGabDjuKe7lJf2S67dqWyM26nfebp6rDTjR2w+ev7H6/f1s62Wke9o7Pc02H/r+3tWmvo7rd/g97uUq+d6O1sbJ8+8mc/dOWnqY7WLvsMYW9e21ttdST/PNjWax9OusvBzkz2FrBsbwfsvBra7V1lv73Auu19dWd72T7zluzgrXXaOdXeXHXby87+Rdrshdz7z+e3p9cOjtZ2+6exQ6FU7+qyz45tfXYc2WvG3laVa/YKtvcW9m7UzmH2dqTHjqE+e+tpb2bCP9+fhsiVP97i8L/rzz/bTYDfh/95hgF/nnHAn2ca8OeZB/x5lgF/nnXAn2cb8OfZB/x5jgF/nnPAn5sH/LllwJ/nGvDnMODPrQP+3Dbgz6UBfy4P+HP7gD93DPhz54A/dw34c/eAP8894M/zDPjzvAP+PN+AP88/4M8LDPjzggP+XBn+Z9zzir+O539f1ZwL2V64NLTfoRkf+DgG3kRcZPgNr0VT30Qc+ABibyIuAryJuCjpXeVqKc0BsdjwA2Hx1AdEtYQ7IBYDHhCLJ7irPGzAv+OIv1t3lf9/fVf53/CuabThf1f+50UGXM0XHfDnxQb8eXH4Vf6fx0WIXPnft4Q5l7S91PCr/LCM75uyA71LlxKCly7h/95lgBeHVI97mQFXSNDfG/5vHWyx/8YDvcumPNjyv7zpv/7eWPyyuCt+63IEB+5yzgs21roc8F1Tisedv1hz48jgx408USGPneWBx/RQnpSQaYCB3hVKCcErJLgCrtjgJ5L871uR/AqIzDgM9K6U8mBbKcEVcCXg2WJlggN35QRXwJUTXwERV6rlS/j7OMsAj53lgcfOKg3+jiQ/ea6c4B0J8sKBfC2vSvqOBFmeGOhdrZQQvFqCdySrN/iJPX/cq5O/I0FWQgZ610h5sK2R4B3JGsCzxZoEB+6aCd6RrNng70jyK/SqCd6RAK/8rasCj521GvwdSX7yXDPBOxLkhQP5Wl4beJykeH2smOj1sWKDvj7WKXFetJtwf9d/XLTXLSUEr5vgHeJ6DX6hzR/3euTvEAcebMh3iOunPNjWT/AOcX3gWaxGcODWErxDrDX4O8T8ftA6Ca6AyJ+OrAM8duoN/g4xP3nWErxDRF44kK/lHtJ7Vsg45kBvbykhuDfBO5K+Bj+x54+7j/wdCTJkOtDbn/Jg60/wjqQfeLbYgODA3SDBO5INGvwdSX6F7knwjgR45W/tAR47Gzb4O5L85LlBgnckyAsH8rW8UYPfs1ov0etjvQZ9fWxMes8K+R9YGOjdpJQQvEmCd4ibNviFNn/cm5K/Q0T+xzAGejdLebBtluAd4mbAs9jmBAfu5gneIW7e4O8Q85+IbJzgCoj8/ZmNgcfOFg3+DjE/eW6e4B0i8sKBfC1vSXrPCvnf7xjo3aqUELxVgnckWzf4iT1/3FuTvyNB/rdWBnq3SXmwbZPgHck2wLPFtgQH7rYJ3pFs2+DvSPIr9JYJ3pEAr/ytWwKPne0a/B1JfvLcNsE7EuSFA/la3r7B71ltmuj1sWmDvj52IL1nhfwPeg307lhKCN4xwTvEnRr8Qps/7p3I3yEi/+NrA707pzzYdk7wDnFn4FlsF4IDd5cE7xB3afB3iPlPRHZIcAVE/v7MDsBjZ9cGf4eYnzx3SfAOEXnhQL6Wd2vwd4j5NxjWTvD6WB34uNcGPh+7N/j5Kn83vHuC5wN573R34POxR4M/H/lvJeyR4PlA/rbDHsDnY0/ST1DI/wLuQO9epYTgvRJ8gtq7wd+I5o97b/JPUMj/WvFA7z4pD7Z9EnyC2gd4FtuX4MDdN8EnqH0b/AqYf6Nkzwb/psqewGNnvwb/BJWfPPdN8AkKeeFAvpb3b/BPUPnv026U4PXRV0rzbjP28R7Q4Oer/NPiAQmeD+R36g8APh8HNvjzkf+M7MAEzwfyZ28HAp+Pg0g/QQ3D/V3/8ab24FJC8MEJPkEd0uBvRPPHfQj5J6iBBxvyE9ShKQ+2QxN8gjoUeBY7jODAPSzBJ6jDCH5v+qAG/73pg4DHzuEN/gkqP3keluATFPLCgXwtH9Hgn6Dy3+7aPsHrY+tSmnebsY/3SIKfeRzZ4D/zOBL4fBzV4M9H/jPkoxI8H8ifTR8FfD6OJv0ENSbu7/qPN7XHlBKCj0nwCerYBn8jmj/uY8k/QQ082JCfoI5LebAdl+AT1HHAs9jxBAfu8Qk+QR1P8Ft8Rzf4b/EdDTx2TmjwT1D5yfP4BJ+gkBcO5Gv5xAb/BJX/9uNuCV4fO5XSvNuMfbwnEfzM46QG/5nHScDn42TSd+xj4f6u/3gTdUopIfiUBO/YT23wNz754z6V/B37wIMN+Y79tJQH22kJ3rGfBjyLnU5w4J6e4B376Q1+Bcx/3/zkBv899pOBx84ZDf6OPT95np7gHTvywoF8LZ/Z4O/Y89+22z/B62Nv4OPeH/h8nEVwj/2sBr/Hfhbw+Ti7wZ+P/GeWZyd4PpA/Cz0b+HycQ/oJamzc3/Ufb2rPLSUEn5vgE9R5Df5GNH/c55F/ghp4sCE/QZ2f8mA7P8EnqPOBZ7ELCA7cCxJ8grqgwa+A+e+bn9Pgv8d+DvDYubDBP0HlJ88LEnyCQl44kK/lixr8E1T+23ZHJHh9HFJK824z9vFe3ODnq/zT4sUJng/k978uBj4flzT485H/zPKSBM8H8mehlwCfj0tJP0GNg/u7/uNN7WWlhODLEnyCurzB34jmj/ty8k9QAw825CeoK1IebFck+AR1BfAsdiXBgXtlgk9QVzb4FTD/ffNLG/z32C8FHjtXNfgnqPzkeWWCT1DICwfytXx1g3+Cyn/b7sQEr49jS2nebcY+3msIfuZxTYP/zOMa4PNxbYM/H/nPkK9N8HwgfzZ9LfD5uI70E9S4uL/rP97UXl9KCL4+wSeoGxr8jWj+uG8g/wQ18GBDfoK6MeXBdmOCT1A3As9iNxEcuDcl+AR1U4NfAfPfN7+uwX+P/TrgsXNzg3+Cyk+eNyX4BIW8cCBfy7c0+Ceo/Lcfz0zw+ji1lObdZuzjvZXgZx63NvjPPG4FPh+3kb5jHw/3d/3Hm6jbSwnBtyd4x35Hg7/xyR/3HeTv2AcebMh37HemPNjuTPCO/U7gWewuggP3rgTv2O9q8Ctg/vvmtzX477HfBjx27m7wd+z5yfOuBO/YkRcO5Gv5ngZ/x57/tt1FCV4f5wEf90XA5+Negnvs9zb4PfZ7gc/HfQ3+fOQ/s7wvwfOB/FnofcDn4/4Gfz7yn21fneD5uLyU5rmNfbwPNPjzkZ+bH0jwfCB/2/oB4PPxYIM/H/kdwgcTPB/IO48PAp+Phxr8+cjvJN+S4Pm4oZTmuY19vA8TXM8fbvDr+cPA5+ORBn8+8s9HjyR4PpCfux4BPh+PNvjzkX+OvifB83FHKc1zG/t4HyO4nj/W4Nfzx4DPx+MN/nysVUrz3wdeC/h8IP/7wE8An4/8/v2Y2T8X8vn2nvMQt1qfKDW+8ckExj8X+kbtA21pHnSs6ynSHx0j3QO9T5cSgp9O8KPjZxr8J3D5436m9Pc/MOjvTWJdxpzLJfgpzTLA52g54N/1LPinNH+tJvC/H/IYf67BfzKVHyvPJnintQzwcT8LfD6eT3QFRz8vL4DfEXoL/e+APj++QPCO8EW0EX0g5SegFxO8wJEntheBL/CXeF44rf/mFw7yecp0hktnfDn1GS7ErT9fRc84v7gY4tZ/nOFiz0qvgP8R0W9588cKfKL//Ld7JcFz8jLwOXlVVwqKExDyecpGGQ4cKfvfC/a/7L/+QeD/Ms+Bnz30e88NzbdRgveeGwLPVBsBzyiv4VxtrLfxXyM4o7zOchv/wbY0DzrW9QbpbXyke6D3zVJC8JsJbuO/1eC38fPH/Vai2/j/6+CK/Xd4G3hVYv1A+zbB2f8d9PvJoTp7vZPo7PVuKSH43QRnr/ca/OyVP+73Epy9/m8dbMjvr76f8mB7v4S/NfI+8LT+AcGB+0EJf2n8IPEH1RC3/jyhfJDgJ/HIExXy2PmQ5CfxyLepHzX4T+LzY+XDBDdL3gM+7g+Bz8fHDX5OyG+uPZ/gXPiJfrJP8THhU/2AkuPnA5/pieJ4RX2e6rYr+hT9Bfg+PuMB9QXBAfUlywH1FQ5aYj2gviI4oL5mOaC+wUHLrAfUNwQH1LcsB9R3OGg76wH1HcEB9T3LAfUDDtrBekD9QHBA/chyQP2Eg3ayHlA/ERxQP7McUL/goF2sB9QvBAfUrywH1G84aDfrAfUbwQH1O8sB9QcOWmM9oP4gOKCyMskBNRIOWmc9oEYqN76xieWAGhkH7WE9oEYmOKBGYTmgRsVBe1kPqFEJDqjRWA6o0XHQPtYDanSCA2oMlgNqGA7az3pADSM4oMZEGvNfysv/g/bjD/8L8985yX+dIf8JdP5Dw/znPPmt+fxuan4DLL9nkX/MzD8Z5G/m8utvfsrMj/IclurgzH/J8dMEv0SI/OXJT4G/RDgW8EluGv4cZ2lejMm+w83wqz/I50m/o5XQODb6iUr4ivpX/+7TOHpFcTxR4+oVxfHLX+PpFcXxRI2vVxTHb79NoFcUxxM1oV5RHL/+N5FeURxP1MR6RXH8/uMkekVxPFGT6hXF8Qugk+kVxfFETa5XFMdvwE6hVxTHEzWlXlEcvwI8lV5RHE/U1HpFcfwO9DR6RXE8UdPqFcXxS+DT6RXF8URNr1cUx2/BF/SK4niiinpFcXwNYAa9ojieqBn1iuL4HsRMekVxPFEz6xXF8UWQWfSK4niiZkUah/A/9PaPb3bA/2U+At9XQn/taDvzbZ/ga0fbAb92tD3wa0ez4Y7UP/OLjP+ht9kIziizp/pSKfo/FPFQW5oHHeuaA/gPOJT/9Rqke6B3znJCcP6Xo//eZuDBkOpxN5f//gcG/b1JrPl/jWTcMv7q+W1PYz/u/N3HOAke93c9ac7O6JNzC+5k0gp8rluR/35DeXJuSXRynqucEDxXgpNzaPCTc/64Q6KT818L/WJtJXixxj7GoXyxtiZ6sbaVE4LbErxYSw3+Ys0fd4nknVQYbkW/+JEnVOTzXQaelLIBqwn874f8tNAOfszod5/5sVIu4+9ZBeDjLgOfjw7wvZAm8L9b/ukK+N/G+/NTy8cJ/vt9nWWON0Jd/5JPLUN0k7/tr78v2U3+9nLai3bsAbWrvZh2S3CTf1fgi3434E3+btzz0cF6k7+73PjGuVlu8j/cluZBx7rmIb3JP0+ij6bzlhOC503w0XS+Bv9omj/u+Yhu8o+f4Gb3jwQ3+cdL8Lh/IrnJPz/w7TLwuW79ifQm//yJTs4LlBOCF0hwcl6wwU/Ofz5RZDf5KwQvVqab/JVEL9ZqOSG4muDFulCDv1jzx70QyTupBYdb0S9+5AkV+XwvTHKTH/lpYZEGv8mfHysLJ7jJvyDwcS8MfD4WbfCb/PkPmIA30P+8Z9qR4FPLYiQ3+Rf/l3xqGaKb/KW//r5kN/kXKae9aMceUPvZP8H+CW7y7we8yb8/8Cb/Erjno4v1Jv8S5cY3Lslyk/+RtjQPOta1FOlN/qUSfTRdupwQvHSCj6bLNPhH0/xxL0N0k3/CBG8bfyW4yT9Bgsf9G8lN/mWBb5eBz3Xrb6Q3+ZdNdHJerpwQvFyCk/PyDX5yzh/38mQ3+VcgeLEy3eRfIdGLdcVyQvCKCV6sKzX4izV/3CuRvJNafrgV/eJHnlCRz/fKJDf5kZ8WVmnwm/z5sbJygpv8ywMf98rA52PVBr/Jn/+ACXgD/c97posm+NSyGslN/tX/JZ9ahugm/4gra7Kb/KuU0160Yw+ow+02wBEJbvIfDrzJfwTwJv8auOejxnqTf41y4xvXZLnJ/2hbmgcd61qL9Cb/Wok+mq5dTgheO8FH03Ua/KNp/rjXIbrJP3GCt41Zb+Pf5J8oweMeqTfN2Rl9cl4X+XEV95hbkf9+Q3lyXjfRyXm9ckLweglOzus3+Mk5f9zrk93krxG8WJlu8tcSvVjr5YTgeoIXa0+Dv1jzx91D8k5q/eFW9IsfeUJFPt+9JDf5kZ8W+hr8Jn9+rPQmuMm/PvBx9wKfj/4Gv8mf/4AJeAP9z3umqyb41LIByU3+Df8ln1qG6CZ/+19/X7Kb/H3ltBft2APqBLsNcGKCm/wnAG/ynwi8yb8R7vnoYb3Jv1G58Y0bs9zkf6wtzYOOdW1CepN/k0QfTTctJwRvmuCj6WYN/tE0f9ybEd3knzTB28ZRCG7yT5LgcY9KcpN/c+DbZeBz3Toq6U3+zROdnLcoJwRvkeDkvGWDn5zzx70l2U3+rQherEw3+bdK9GLdupwQvHWCF+s2Df5izR/3NiTvpLYcbkW/+JEnVOTzvS3JTX7kp4XtGvwmf36sbJvgJv+WwMe9LfD52L7Bb/LnP2AC3kD/855pf4JPLTuQ3OTf8V/yqWWIbvJ3/PX3JbvJv1057UU79oA6w24DnJngJv8ZwJv8ZwJv8u+Eez76WG/y71RufOPOLDf5H29L86BjXbuQ3uTfJdFH013LCcG7JvhouluDfzTNH/duRDf5J0/wtnEMgpv8kyV43MNIbvLvDny7DHyuW4eR3uTfPdHJeY9yQvAeCU7Oezb4yTl/3HuS3eTfi+DFynSTf69EL9a9ywnBeyd4se7T4C/W/HHvQ/JOas/hVvSLH3lCRT7f+5Lc5Ed+WtivwW/y58fKvglu8u8JfNz7Ap+P/Rv8Jn/+AybgDfQ/75lun+BTywEkN/kP/Jd8ahmim/ydf/19yW7y71dOe9GOPaAutNsAFyW4yX8h8Cb/RcCb/AfBno/WwHqT/6By4xsPZrnJ/0Rbmgcd6zqE9Cb/IYk+mh5aTgg+NMFH08Ma/KNp/rgPI7rJP2WCt41jE9zknyLB4x6H5Cb/4cC3y8DnunUc0pv8hyc6OR9RTgg+IsHJ+cgGPznnj/tIspv8RxG8WJlu8h+V6MV6dDkh+OgEL9ZjGvzFmj/uY0jeSR053Ip+8SNPqMjn+1iSm/zITwvHNfhN/vxYOTbBTf4jgY/7WODzcXyD3+TPf8AEvIH+5z3T/RN8ajmB5Cb/if+STy1DdJO/66+/L9lN/uPKaS/asQfUVXYb4OoEN/mvAt7kvxp4k/8k3E3+Ntab/CeVG994MstN/ifb0jzoWNcppDf5T0n00fTUckLwqQk+mp7W4B9N88d9GtFN/qkTvG0cn+Am/1QJHvcEJDf5Twe+XQY+160TkN7kPz3RyfmMckLwGQlOzmc2+Mk5f9xnkt3kP4vgxcp0k/+sRC/Ws8sJwWcneLGe0+Av1vxxn0PyTurM4Vb0ix95QkU+3+eS3ORHflo4r8Fv8ufHyrkJbvKfCXzc5wKfj/Mb/CZ//gMm4A30P++ZHp/gU8sFJDf5L/yXfGoZopv83X/9fclu8p9XTnvRjj2gbrbbALckuMl/M/Am/y3Am/wX4W7yl1lv8l9UbnzjxSw3+Z9qS/OgY12XkN7kvyTRR9NLywnBlyb4aHpZg380zR/3ZUQ3+adN8LZxYoKb/NMkeNyTkNzkvxz4dhn4XLdOQnqT//JEJ+crygnBVyQ4OV/Z4Cfn/HFfSXaT/yqCFyvTTf6rEr1Yry4nBF+d4MV6TYO/WPPHfQ3JO6krh1vRL37kCRX5fF9LcpMf+Wnhuga/yZ8fK9cmuMl/JfBxXwt8Pq5v8Jv8+Q+YgDfQ/7xnen6CTy03kNzkv/Ff8qlliG7y1/76+5Ld5L+unPaiHXtA3W23Ae5JcJP/buBN/nuAN/lvwt3k72C9yX9TufGNN7Pc5H+6Lc2DjnXdQnqT/5ZEH01vLScE35rgo+ltDf7RNH/ctxHd5J8+wdvGyQlu8k+X4HFPQXKT/3bg22Xgc906BelN/tsTnZzvKCcE35Hg5Hxng5+c88d9J9lN/rsIXqxMN/nvSvRivbucEHx3ghfrPQ3+Ys0f9z0k76TuHG5Fv/iRJ1Tk830vyU1+5KeF+xr8Jn9+rNyb4Cb/ncDHfS/w+bi/wW/y5z9gAt5A//Oe6fUJPrU8QHKT/8F/yaeWIbrJX//r70t2k/++ctqLdvR/1MNuA9yf4Cb//sCb/PcDb/I/hLvJ38V6k/+hcuMbH2a5yf9MW5oHHet6hPQm/yOJPpo+Wk4IfjTBR9PHGvyjaf64HyO6yV9M8LZxaoKb/IUEj3sakpv8jwPfLgOf69ZpSG/yP57o5PxEOSH4iQQn5ycb/OScP+4nyW7yP0XwYmW6yf9Uohfr0+WE4KcTvFifafAXa/64nyF5J/XkcCu8egp8jpDP97MkN/mRnxaea/Cb/Pmx8myCm/xPAh/3s8Dn4/kGv8mf/4AJeAP9z3um9yf41PICyU3+F/8ln1qG6CZ/z19/X7Kb/M+V0160Yw+oI+w2wEMJbvIfAbzJ/xDwJv9LuJv8Ndab/C+VG9/4MstN/mfb0jzoWNcrpDf5X0n00fTVckLwqwk+mr7W4B9N88f9GtFN/hkTvG2cnuAm/wwJHneB5Cb/68C3y8DnurVAepP/9UQn5zfKCcFvJDg5v9ngJ+f8cb9JdpP/LYIXK9NN/rcSvVjfLicEv53gxfpOg79Y88f9Dsk7qTeHW9EvfuQJFfl8v0tykx/5aeG9Br/Jnx8r7ya4yf8m8HG/C3w+3m/wm/z5D5iAN9D/vGf6fIJPLR+Q3OT/8F/yqWWIbvL3/vX3JbvJ/1457UU7+r/kbLcBHk1wk/9E4E3+R4E3+T/C3eTvYb3J/1G58Y0fs9zkf64tzYOOdX1CepP/k0QfTT8tJwR/muCj6WcN/tE0f9yfEd3knznB28YZCW7yz5Tgcc9EcpP/c+DbZeBz3ToT6U3+zxOdnL8oJwR/keDk/GWDn5zzx/0l2U3+rwherEw3+b9K9GL9upwQ/HWCF+s3Df5izR/3NyTvpL4cbkW/+JEnVOTz/S3JTX7kp4XvGvwmf36sfJvgJv+XwMf9LfD5+L7Bb/LnP2AC3kD/857p+wk+tfxAcpP/x3/Jp5Yhusnf99ffl+wm/3fltBft6P9Sud0GeDzBTf4zgTf5Hwfe5P8Jd5O/j/Um/0/lxjf+zHKT//m2NA861vUL6U3+XxJ9NP21nBD8a4KPpr81+EfT/HH/RnSTf9YEbxtnJbjJP0uCxz0byU3+34Fvl4HPdetspDf5f090cv6jnBD8R4KTc9be2Cfn/HHnxgz79yZ9sY7U3vgvVqab/MB/z/94sTa1JwTnfzn67x25wV+s+eMeOdGLNcWJL7eiX/zIEyry+R4FeFLKBr6IwP9+yE8Lo4IfM/rdZ36sjNKOv2eVAR/3KMBjcLR27DkBfZM//wET8Ab6n/dMv0/wqWX0do43QmMQvBEKkWsIb/L3//X3JbvJDzxh/vkPk79Ax3D+QdDuCXF/15/vEIcl9k6U4V/AaOPEBMZJCIyTEhgnIzBOTmCcgsA4JYFxqgx7Pp8w+8+F9k5N8G86DYFxWgLjdATG6QmMBQJjkcA4A4FxRgLjTATGmQmMsxAYZyUwzkZgnJ3AOAeBcU4CYzPQmNtmzP5zob0tBP+mcxEYA4GxlcDYRmAsERjLBMZ2AmMHgbGTwNhFYOwmMM5NYJyHwDgvgXE+AuP8BMYFCIwLEhgrBMYqgXEhAuPCBMZFCIyLEhgXIzAuTmBcgsC4JIFxKQLj0gTGZQiMyxIYlyMwLk9gXAFoHIrfP1yR4N90JQLjygTGVQiMqxIYVyMwrk5gXIPAuGbGdT5fi+DfdG0C4zoExnUJjOsRGNcnMNYIjHUCY0+W5nyOdt7enGWbZX8vpBnt3JzEuQWJc0sS51Ykzq1JnNuQOLclcW6XyJnqnH+Hmbcn+LfNnTuQOHckce5E4tyZxLkLiXNXEuduJM7dEzoHnvuHtWfZmLbHsj227XFsj2t7PNvj254g/8VPhQ/+t1fhA4xR4QOMUeEDjFHhA4xR4QOFD0LkSmVU+ABjLBAYiwRGhQ8wRoUPMEaFDzBGhQ8wRoUPMEaFDxQ+CJErlVHhA4xR4QOMUeEDjFHhA4xR4QOMUeEDjFHhA4xR4QOMsUJgrBIYFT7AGBU+wBgVPsAYFT7AGBU+wBgVPsAYFT7AGBU+UPggRK5URoUPMEaFDzBGhQ8UPgiRK5VR4QOMUeEDjLFGYKwTGFOFD1J5h7U3/r/pmATGsQiMYxMYxyEwjktgHI/AOD6BcYL2NOdztPPO5izbI/t7Ic1o554kzr1InHuTOPchce5L4tyPxLk/ifOAhM6B5/4J7Zoyke2JbU9ie1Lbk9me3PYUtqdU1GBwr6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcZYIDAWCYyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhhjhcBYJTAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGihqECJXKqOiBhijogYYY43AWCcwskUNJiT4YvFEBMaJCYyTEBgnJTBORmCcnMA4BYFxSpKowV3NWXZg9vdCmtHOg0icB5M4DyFxHkriPIzEeTiJ8wgS55EJnQPP/VPZNWVq29PYntb2dLant12wXbQ9g6IGg3sVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wxgKBsUhgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGCsExiqBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBhrBMY6gZEtajAVwReLpyYwTkNgnJbAOB2BcXoCY4HAWCQwzkASNbi7OcuOyv5eSDPaeTSJ8xgS57EkzuNInMeTOE8gcZ5I4jwpoXPguX9Gu6bMZHtm27PYntX2bLZntz2H7TkVNRjcq6gBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEWCIxFAqOiBhijogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcZYITBWCYyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYo6IGGKOiBooahMiVyqioAcaoqAHGWCMw1gmMbFGDGQm+WDwTgXFmAuMsBMZZCYyzERhnJzDOQWCckyRqcE9zlp2c/b2QZrTzFBLnqSTO00icp5M4zyBxnkniPIvEeXZC58Bzf7NdU1psz2U72M5/ibPNdsl22Xa7ogaDexU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTDGAoGxSGBU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYKwTGKoFRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGGsExjqBkS1q0EzwxeIWAuNcBMZAYGwlMLYRGEsExjKBsZ0kanBvc5adk/29kGa081wS53kkzvNJnBeQOC8kcV5E4ryYxHlJQufAc3+HXVM6bXfZ7rY9t+15bM9rez7b8ytqMLhXUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAYywQGIsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjLFCYKwSGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4yxRmCsExjZogYdBF8s7iQwdhEYuwmMcxMY5yEwzktgnI/AOD9J1OC+5iy7NPt7Ic1o52UkzstJnFeQOK8kcV5F4ryaxHkNifPahM6B5/4F8muK7Yrtqu2FbC9sexHbi9peTFGDwb2KGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYY4HAWCQwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjBUCY5XAqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIw1AmOdwMgWNViA4IvFCxIYKwTGKoFxIQLjwgTGRQiMixIYFyOJGtzfnGXXZX8vpBntvJ7EeQOJ80YS500kzptJnLeQOG8lcd6W0Dnw3L+4XVOWsL2k7aVsL217GdvL2l7O9vKKGgzuVdQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgLBMYigVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGOsEBirBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjrBEY6wRGtqjB4gRfLF6CwLgkgXEpAuPSBMZlCIzLEhiXIzAuTxI1eKA5y27P/l5IM9p5B4nzThLnXSTOu0mc95A47yVx3kfivD+hc+C5fwW7pqxoeyXbK9texfaqtlezvbrtNRQ1GNyrqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMRYIjEUCo6IGGKOiBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxlghMFYJjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGihqEyJXKqKgBxqioAcZYIzDWCYxsUYMVCL5YvCKBcSUC48oExlUIjKsSGFcjMK5OYFyDJGrwYHOWPZD9vZBmtPNBEudDJM6HSZyPkDgfJXE+RuJ8nMT5RELnwHP/mnZNWcv22rbXsb2u7fVsr2+7ZruuqMHgXkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4yxQGAsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTDGCoGxSmBU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wxhqBsU5gZIsarEnwxeK1CIxrExjXITCuS2Bcj8C4PoGxRmCsk0QNHmrOsiezvxfSjHY+ReJ8msT5DInzWRLncyTO50mcL5A4X0zoHHju77FrSq/tPtv9tjewvaHtjWxvbHsTRQ0G9ypqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMBQJjkcCoqAHGqKgBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxVgiMVQKjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMdYIjHUCI1vUoIfgi8W9BMY+AmM/gXEDAuOGBMaNCIwbExg3IYkaPNycZS9lfy+kGe18mcT5ConzVRLnayTO10mcb5A43yRxvpXQOfDcv6ldUzazvbntLWxvaXsr21vb3sb2tooaDO5V1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGAsExiKBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY6wQGKsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGOsERjrBEa2qMGmBF8s3ozAuDmBcQsC45YExq0IjFsTGLchMG5LEjV4pDnL3s7+Xkgz2vkOifNdEud7JM73SZwfkDg/JHF+ROL8OKFz4Ll/O7umbG97B9s72t7J9s62d7G9q+3dFDUY3KuoAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxFgiMRQKjogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGWCEwVgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxlgjMNYJjGxRg+0Ivli8PYFxBwLjjgTGnQiMOxMYdyEw7kpg3I0kavBoc5Z9kv29kGa081MS52ckzs9JnF+QOL8kcX5F4vyaxPlNQufAc//udk3Zw/aetveyvbftfWzva3s/2/srajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIGuxN8sXgPAuOeBMa9CIx7Exj3ITDuS2Dcj8C4P0nU4LHmLPs2+3shzWjndyTO70mcP5A4fyRx/kTi/JnE+QuJ89eEzoHn/gPsmnKg7YNsH2z7ENuH2j7M9uG2j1DUYHCvogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxlggMBYJjIoaYIyKGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGGOFwFglMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhhjjcBYJzCyRQ0OIPhi8YEExoMIjAcTGA8hMB5KYDyMwHg4gfEIkqjB481Z9lv290Ka0c7fSZx/kDhHHEwN7hyJxNlE4hyZxDkKiXPUhM6B5/4j7ZpylO2jbR9j+1jbx9k+3vYJtk9U1GBwr6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcZYIDAWCYyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhhjhcBYJTAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGihqECJXKqOiBhijogYYY43AWCcwskUNjiT4YvFRBMajCYzHEBiPJTAeR2A8nsB4AoHxRJKowRPNWTYawZeHc+foJM4xSJzDSJxjkjjHInGOTeIch8Q57hBFDU6ya8rJtk+xfart02yfbvsM22faPktRg8G9ihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGGOBwFgkMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIwVAmOVwKioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMNQJjncDIFjU4ieCLxScTGE8hMJ5KYDyNwHg6gfEMAuOZBMazSKIGTzZn2XgEXx7OneOTOCcgcU5I4pyIxDkxiXMSEuekJM7JhihqcLZdU86xfa7t82yfb/sC2xfavsj2xYoaDO5V1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGAsExiKBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY6wQGKsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGOsERjrBEa2qMHZBF8sPofAeC6B8TwC4/kExgsIjBcSGC8iMF5MEjV4qjnLJif48nDunILEOSWJcyoS59QkzmlInNOSOKcjcU4/RFGDS+yacqnty2xfbvsK21favsr21bavUdRgcK+iBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGWCAwFgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYY4XAWCUwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihooahAiVyqjogYYo6IGGGONwFgnMLJFDS4h+GLxpQTGywiMlxMYryAwXklgvIrAeDWB8RqSqMHTzVlWIPjycO4skjhnIHHOSOKcicQ5M4lzFhLnrCTO2YYoanCtXVOus3297Rts32j7Jts3277F9q2KGgzuVdQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgLBMYigVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGOsEBirBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjrBEY6wRGtqjBtQRfLL6OwHg9gfEGAuONBMabCIw3ExhvITDeShI1eKY5y2Yn+PJw7pyDxDknibOZxNlC4pyLxBlInK0kzrYhihrcZteU223fYftO23fZvtv2PbbvtX2fogaDexU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTDGAoGxSGBU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYKwTGKoFRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGGsExjqBkS1qcBvBF4tvJzDeQWC8k8B4F4HxbgLjPQTGewmM95FEDZ5tzrISwZeHc2eZxNlO4uwgcXaSOLtInN0kzrlJnPMMUdTgfrumPGD7QdsP2X7Y9iO2H7X9mO3HFTUY3KuoAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxFgiMRQKjogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGWCEwVgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxlgjMNYJjGxRg/sJvlj8AIHxQQLjQwTGhwmMjxAYHyUwPkZgfJwkavBcc5bNS/Dl4dw5H4lzfhLnAiTOBUmcFRJnlcS5EIlz4SGKGjxh15QnbT9l+2nbz9h+1vZztp+3/YKiBoN7FTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMMYCgbFIYFTUAGNU1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgrBMYqgVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYawTGOoGRLWrwBMEXi58kMD5FYHyawPgMgfFZAuNzBMbnCYwvkEQNnm/OskUIvjycOxclcS5G4lycxLkEiXNJEudSJM6lSZzLDFHU4EW7prxk+2Xbr9h+1fZrtl+3/YbtNxU1GNyrqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMRYIjEUCo6IGGKOiBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxlghMFYJjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGihqEyJXKqKgBxqioAcZYIzDWCYxsUYMXCb5Y/BKB8WUC4ysExlcJjK8RGF8nML5BYHyTJGrwQnOWLUvw5eHcuRyJc3kS5wokzhVJnCuROFcmca5C4lx1iKIGb9k15W3b79h+1/Z7tt+3/YHtD21/pKjB4F5FDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMsUBgLBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wxgqBsUpgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMMYagbFOYGSLGrxF8MXitwmM7xAY3yUwvkdgfJ/A+AGB8UMC40ckUYMXm7NsNYIvD+fO1Umca5A41yRxrkXiXJvEuQ6Jc10S53pDFDX42K4pn9j+1PZntj+3/YXtL21/ZftrRQ0G9ypqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMBQJjkcCoqAHGqKgBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxVgiMVQKjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMdYIjHUCI1vU4GOCLxZ/QmD8lMD4GYHxcwLjFwTGLwmMXxEYvyaJGrzUnGXrE3x5OHfWSJx1EmcPibOXxNlH4uwncW5A4txwiKIG39g15Vvb39n+3vYPtn+0/ZPtn23/oqjB4F5FDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMsUBgLBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wxgqBsUpgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMMYagbFOYGSLGnxD8MXibwmM3xEYvycw/kBg/JHA+BOB8WcC4y8kUYOXm7NsI4IvD+fOjUmcm5A4NyVxbkbi3JzEuQWJc0sS51ZDFDX41a4pv9n+3fYf+S9wdtj/3HaT7ZFtj5L/wqSiBv/bq6gBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEWCIxFAqOiBhijogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcZYITBWCYyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYo6IGGKOiBooahMiVyqioAcaoqAHGWCMw1gmMbFGDXwm+WPwbgfF3AuMfBMb8C36NbhyJwNhEYByZwDhKR5rzOdr5SnOWbU3w5eHcuQ2Jc1sS53Ykzu1JnDuQOHckce5E4tx5iKIGo9o1ZTTbo9sew/Yw22PaHsv22LbHUdRgcK+iBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGWCAwFgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYY4XAWCUwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihooahAiVyqjogYYo6IGGGONwFgnMLJFDUYl+GLxaATG0QmMYxAYhxEYxyQwjkVgHJvAOA5J1ODV5izbheDLw7lzVxLnbiTO3Umce5A49yRx7kXi3JvEuc8QRQ3GtWvKeLbHtz2B7QltT2R7YtuT2J5UUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY1GJfgi8XjERjHJzBOQGCckMA4EYFxYgLjJATGSUmiBq81Z9m+BF8ezp37kTj3J3EeQOI8kMR5EInzYBLnISTOQ4coajCZXVMmtz2F7SltT2V7atvT2J7W9nSKGgzuVdQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgLBMYigVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGOsEBirBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjrBEY6wRGtqjBZARfLJ6cwDgFgXFKAuNUBMapCYzTEBinJTBORxI1eL05yw4j+PJw7jycxHkEifNIEudRJM6jSZzHkDiPJXEeN0RRg+ntmlKwXbQ9g+0Zbc9ke2bbs9ieVVGDwb2KGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYY4HAWCQwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjBUCY5XAqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIw1AmOdwMgWNZie4IvFBQJjkcA4A4FxRgLjTATGmQmMsxAYZyWJGrzRnGXHE3x5OHeeQOI8kcR5EonzZBLnKSTOU0mcp5E4Tx+iqMFsdk2Z3fYctue03Wy7xfZctoPtVkUNBvcqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjAUCY5HAqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMVYIjFUCo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDHWCIx1AiNb1GA2gi8Wz05gnIPAOCeBsZnA2EJgnIvAGAiMrSRRgzebs+wMgi8P584zSZxnkTjPJnGeQ+I8l8R5HonzfBLnBUMUNWiza0rJdtl2u+0O2522u2x3255bUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY1aCP4YnGJwFgmMLYTGDsIjJ0Exi4CYzeBcW6SqMFbzVl2IcGXh3PnRSTOi0mcl5A4LyVxXkbivJzEeQWJ88ohihrMY9eUeW3PZ3t+2wvk1xjbFdtV2wspajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIG8xB8sXheAuN8BMb5CYwLEBgXJDBWCIxVAuNCJFGDt5uz7CqCLw/nzqtJnNeQOK8lcV5H4ryexHkDifNGEudNQxQ1WNiuKYvYXtT2YrYXt72E7SVtL2V7aUUNBvcqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjAUCY5HAqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMVYIjFUCo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDHWCIx1AiNb1GBhgi8WL0JgXJTAuBiBcXEC4xIExiUJjEsRGJcmiRq805xlNxN8eTh33kLivJXEeRuJ83YS5x0kzjtJnHeROO8eoqjBMnZNWdb2craXt72C7RVtr2R7ZdurKGowuFdRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjLBAYiwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMsUJgrBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjLFGYKwTGNmiBssQfLF4WQLjcgTG5QmMKxAYVyQwrkRgXJnAuApJ1ODd5iy7h+DLw7nzXhLnfSTO+0mcD5A4HyRxPkTifJjE+cgQRQ1WtWvKarZXt72G7TVtr2V7bdvr2F5XUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY1WJXgi8WrERhXJzCuQWBck8C4FoFxbQLjOgTGdUmiBu81Z9mjBF8ezp2PkTgfJ3E+QeJ8ksT5FInzaRLnMyTOZ4coarCeXVPWt12zXbfdY7vXdp/tftsbKGowuFdRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjLBAYiwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMsUJgrBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjLFGYKwTGNmiBusRfLF4fQJjjcBYJzD2EBh7CYx9BMZ+AuMGJFGD95uz7DmCLw/nzudJnC+QOF8kcb5E4nyZxPkKifNVEudrQxQ12NCuKRvZ3tj2JrY3tb2Z7c1tb2F7S0UNBvcqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjAUCY5HAqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMVYIjFUCo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDHWCIx1AiNb1GBDgi8Wb0Rg3JjAuAmBcVMC42YExs0JjFsQGLckiRp80JxlrxN8eTh3vkHifJPE+RaJ820S5zskzndJnO+RON8foqjBVnZN2dr2Nra3tb2d7e1t72B7R9s7KWowuFdRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjLBAYiwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMsUJgrBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjLFGYKwTGNmiBlsRfLF4awLjNgTGbQmM2xEYtycw7kBg3JHAuBNJ1ODD5iz7gODLw7nzQxLnRyTOj0mcn5A4PyVxfkbi/JzE+cUQRQ12tmvKLrZ3tb2b7d1t72F7T9t72d5bUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY12Jngi8W7EBh3JTDuRmDcncC4B4FxTwLjXgTGvUmiBh81Z9mXBF8ezp1fkTi/JnF+Q+L8lsT5HYnzexLnDyTOH4coarCPXVP2tb2f7f1tH2D7QNsH2T7Y9iGKGgzuVdQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgLBMYigVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGOsEBirBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjrBEY6wRGtqjBPgRfLN6XwLgfgXF/AuMBBMYDCYwHERgPJjAeQhI1+Lg5y34i+PJw7vyZxPkLifNXEudvJM7fSZx/kDizJg7nSAmdA8/9h9o15TDbh9s+wvaRto+yfbTtY2wfq6jB4F5FDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMsUBgLBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wxgqBsUpgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMMYagbFOYGSLGhxK8MXiwwiMhxMYjyAwHklgPIrAeDSB8RgC47EkUYNPmrOsqSkbsZBmtHNkEucoJM5RSZyjkThHJ3GOQeIcRuIcM6Fz4Ln/OLumHG/7BNsn2j7J9sm2T7F9qu3TFDUY3KuoAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxFgiMRQKjogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGWCEwVgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxlgjMNYJjGxRg+MIvlh8PIHxBALjiQTGkwiMJxMYTyEwnkpgPI0kavBpc5aN1ZSNWEgz2jk2iXMcEue4JM7xSJzjkzgnIHFOSOKcKKFz4Ln/dLumnGH7TNtn2T7b9jm2z7V9nu3zFTUY3KuoAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxFgiMRQKjogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGWCEwVgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxlgjMNYJjGxRg9MJvlh8BoHxTALjWQTGswmM5xAYzyUwnkdgPJ8kavBZc5ZN3JSNWEgz2jkJiXNSEudkJM7JSZxTkDinJHFOReKcOqFz4Ln/ArumXGj7ItsX277E9qW2L7N9ue0rFDUY3KuoAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxFgiMRQKjogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGWCEwVgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxlgjMNYJjGxRgwsIvlh8IYHxIgLjxQTGSwiMlxIYLyMwXk5gvIIkavB5c5ZN05SNWEgz2jktiXM6Euf0JM4CibNI4pyBxDkjiXOmhM6B5/4r7Zpyle2rbV9j+1rb19m+3vYNtm9U1GBwr6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcZYIDAWCYyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhhjhcBYJTAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGihqECJXKqOiBhijogYYY43AWCcwskUNriT4YvFVBMarCYzXEBivJTBeR2C8nsB4A4HxRpKowRfNWTZzUzZiIc1o5ywkzllJnLOROGcncc5B4pyTxNlM4mxJ6Bx47r/Jrik3277F9q22b7N9u+07bN9p+y5FDQb3KmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIwFAmORwKioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDFWCIxVAqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAx1giMdQIjW9TgJoIvFt9MYLyFwHgrgfE2AuPtBMY7CIx3EhjvIokafNmcZXM1ZSMW0ox2BhJnK4mzjcRZInGWSZztJM4OEmdnQufAc//ddk25x/a9tu+zfb/tB2w/aPsh2w8rajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIGdxN8sfgeAuO9BMb7CIz3ExgfIDA+SGB8iMD4MEnU4KvmLOtqykYspBnt7CZxzk3inIfEOS+Jcz4S5/wkzgVInAsmdA489z9i15RHbT9m+3HbT9h+0vZTtp+2/YyiBoN7FTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMMYCgbFIYFTUAGNU1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgrBMYqgVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYawTGOoGRLWrwCMEXix8lMD5GYHycwPgEgfFJAuNTBManCYzPkEQNvm7OskpTNmIhzWhnlcS5EIlzYRLnIiTORUmci5E4FydxLpHQOfDc/6xdU56z/bztF2y/aPsl2y/bfsX2q4oaDO5V1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGAsExiKBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY6wQGKsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGOsERjrBEa2qMGzBF8sfo7A+DyB8QUC44sExpcIjC8TGF8hML5KEjX4pjnLlmzKRiykGe1cisS5NIlzGRLnsiTO5Uicy5M4VyBxrpjQOfDc/5pdU163/YbtN22/Zftt2+/Yftf2e4oaDO5V1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGAsExiKBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY6wQGKsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGOsERjrBEa2qMFrBF8sfp3A+AaB8U0C41sExrcJjO8QGN8lML5HEjX4tjnLVmrKRiykGe1cmcS5ColzVRLnaiTO1Umca5A41yRxrpXQOfDc/75dUz6w/aHtj2x/bPsT25/a/sz254oaDO5V1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGAsExiKBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY6wQGKsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGOsERjrBEa2qMH7BF8s/oDA+CGB8SMC48cExk8IjJ8SGD8jMH5OEjX4rjnL1m7KRiykGe1ch8S5LolzPRLn+iTOGomzTuLsIXH2JnQOPPd/YdeUL21/Zftr29/Y/tb2d7a/t/2DogaDexU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTDGAoGxSGBU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYKwTGKoFRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGGsExjqBkS1q8AXBF4u/JDB+RWD8msD4DYHxWwLjdwTG7wmMP5BEDb5vzrK+pmzEQprRzn4S5wYkzg1JnBuRODcmcW5C4tyUxLlZQufAc/+Pdk35yfbPtn+x/avt32z/bvuP/Jcl819GVNTgf3sVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wxgKBsUhgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGCsExiqBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBhrBMY6gZEtavAjwReLfyIw/kxg/IXA+CuB8TcC4+8Exj8IjPkXTFHGlFGDH5qzbPOmbMRCmtHOLUicW5I4tyJxbk3i3IbEuS2JczsS5/YJnf9x7rdrSpPtkW2PYntU26PZHt32GLaHKWowuFdRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjLBAYiwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMsUJgrBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjLFGYKwTGNmiBiN1Nv6/aROBcWQC4ygExlEJjKMRGEcnMI5BYBxGEjX4sTnLdmjKRiykGe3ckcS5E4lzZxLnLiTOXUmcu5E4dydx7pHQOfDcP6ZdU8ayPbbtcWyPa3s82+PbnsD2hIoaDO5V1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGAsExiKBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY6wQGKsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGOsERjrBEa2qMGYBF8sHovAODaBcRwC47gExvEIjOMTGCcgME5IEjX4qTnL9mzKRiykGe3ci8S5N4lzHxLnviTO/Uic+5M4DyBxHpjQOfDcP5FdUya2PYntSW1PZnty21PYntL2VIoaDO5V1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGAsExiKBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY6wQGKsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGOsERjrBEa2qMFEBF8snpjAOAmBcVIC42QExskJjFMQGKckME5FEjX4uTnLDmrKRiykGe08mMR5CInzUBLnYSTOw0mcR5A4jyRxHpXQOfDcP7VdU6axPa3t6WxPb7tgu2h7BtszKmowuFdRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjLBAYiwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMsUJgrBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjLFGYKwTGNmiBlMTfLF4GgLjtATG6QiM0xMYCwTGIoFxBgLjjCRRg1+as+zopmzEQprRzmNInMeSOI8jcR5P4jyBxHkiifMkEufJCZ0Dz/0z2TVlZtuz2J7V9my2Z7c9h+05bTcrajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIGMxF8sXhmAuMsBMZZCYyzERhnJzDOQWCck8DYTBI1+LU5y05pykYspBntPJXEeRqJ83QS5xkkzjNJnGeROM8mcZ6T0Dnw3N9i15S5bAfb+S8ettku2S7bbrfdoajB4F5FDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMsUBgLBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wxgqBsUpgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMMYagbFOYGSLGrQQfLF4LgJjIDC2EhjbCIwlAmOZwNhOYOwgiRr81pxl5zZlIxbSjHaeR+I8n8R5AYnzQhLnRSTOi0mcl5A4L03oHHju77RrSpftbttz257H9ry257M9v+0FFDUY3KuoAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxFgiMRQKjogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGWCEwVgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxlgjMNYJjGxRg06CLxZ3ERi7CYxzExjnITDOS2Ccj8A4P4FxAZKowe/NWXZZUzZiIc1o5+UkzitInFeSOK8icV5N4ryGxHktifO6hM6B5/4F7ZpSsV21vZDthW0vYntR24vZXlxRg8G9ihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGGOBwFgkMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIwVAmOVwKioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMNQJjncDIFjVYkOCLxRUCY5XAuBCBcWEC4yIExkUJjIsRGBcniRr80Zxl1zdlIxbSjHbeQOK8kcR5E4nzZhLnLSTOW0mct5E4b0/oHHjuX8KuKUvaXsr20raXsb2s7eVsL297BUUNBvcqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjAUCY5HAqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMVYIjFUCo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDHWCIx1AiNb1GAJgi8WL0lgXIrAuDSBcRkC47IExuUIjMsTGFcgiRpkLVl2R1M2YiHNaOedJM67SJx3kzjvIXHeS+K8j8R5P4nzgYTOgef+Fe2aspLtlW2vYntV26vZXt32GrbXVNRgcK+iBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGWCAwFgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYY4XAWCUwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihooahAiVyqjogYYo6IGGGONwFgnMLJFDVYk+GLxSgTGlQmMqxAYVyUwrkZgXJ3AuAaBcU2SqMFILVn2YFM2YiHNaOdDJM6HSZyPkDgfJXE+RuJ8nMT5BInzyYTOgef+teyasrbtdWyva3s92+vbrtmu2+5R1GBwr6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcZYIDAWCYyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhhjhcBYJTAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGihqECJXKqOiBhijogYYY43AWCcwskUN1iL4YvHaBMZ1CIzrEhjXIzCuT2CsERjrBMYekqhBU0uWPdWUjVhIM9r5NInzGRLnsyTO50icz5M4XyBxvkjifCmhc+C5v9euKX22+21vYHtD2xvZ3tj2JrY3VdRgcK+iBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGWCAwFgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYY4XAWCUwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihooahAiVyqjogYYo6IGGGONwFgnMLJFDXoJvljcR2DsJzBuQGDckMC4EYFxYwLjJgTGTUmiBiO3ZNnLTdmIhTSjna+QOF8lcb5G4nydxPkGifNNEudbJM63EzoHnvs3s2vK5ra3sL2l7a1sb217G9vb2t5OUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY12Izgi8WbExi3IDBuSWDcisC4NYFxGwLjtgTG7UiiBqO0ZNk7TdmIhTSjne+SON8jcb5P4vyAxPkhifMjEufHJM5PEjoHnvu3t2vKDrZ3tL2T7Z1t72J7V9u72d5dUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY12J7gi8U7EBh3JDDuRGDcmcC4C4FxVwLjbgTG3UmiBqO2ZNmnTdmIhTSjnZ+ROD8ncX5B4vySxPkVifNrEuc3JM5vEzoHnvv3sGvKnrb3sr237X1s72t7P9v72z5AUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY12IPgi8V7Ehj3IjDuTWDch8C4L4FxPwLj/gTGA0iiBqO1ZNl3TdmIhTSjnd+TOH8gcf5I4vyJxPkzifMXEuevJM7fEjoHnvsPtGvKQbYPtn2I7UNtH2b7cNtH2D5SUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY1OJDgi8UHERgPJjAeQmA8lMB4GIHxcALjEQTGI0miBqO3ZNnvTdmIhTSjnX+QOLOROZwjkTibSJwjkzhHIXGOSuIcLaFz4Ln/KLumHG37GNvH2j7O9vG2T7B9ou2TFDUY3KuoAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxFgiMRQKjogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGWCEwVgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxlgjMNYJjGxRg6MIvlh8NIHxGALjsQTG4wiMxxMYTyAwnkhgPIkkajBGS5aNTvDl4dw5BolzGIlzTBLnWCTOsUmc45A4xyVxjjdEUYOT7Zpyiu1TbZ9m+3TbZ9g+0/ZZts9W1GBwr6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcZYIDAWCYyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhhjhcBYJTAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGihqECJXKqOiBhijogYYY43AWCcwskUNTib4YvEpBMZTCYynERhPJzCeQWA8k8B4FoHxbJKowbCWLBuf4MvDuXMCEueEJM6JSJwTkzgnIXFOSuKcjMQ5+RBFDc6xa8q5ts+zfb7tC2xfaPsi2xfbvkRRg8G9ihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGGOBwFgkMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIwVAmOVwKioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMNQJjncDIFjU4h+CLxecSGM8jMJ5PYLyAwHghgfEiAuPFBMZLSKIGY7Zk2RQEXx7OnVOSOKcicU5N4pyGxDktiXM6Euf0JM7CEEUNLrVrymW2L7d9he0rbV9l+2rb19i+VlGDwb2KGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYY4HAWCQwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjBUCY5XAqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIw1AmOdwMgWNbiU4IvFlxEYLycwXkFgvJLAeBWB8WoC4zUExmtJogZjtWRZkeDLw7lzBhLnjCTOmUicM5M4ZyFxzkrinI3EOfsQRQ2us2vK9bZvsH2j7Zts32z7Ftu32r5NUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY1uI7gi8XXExhvIDDeSGC8icB4M4HxFgLjrQTG20iiBmO3ZNkcBF8ezp1zkjibSZwtJM65SJyBxNlK4mwjcZaGKGpwu11T7rB9p+27bN9t+x7b99q+z/b9ihoM7lXUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYCwTGIoFRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjrBAYqwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY6wRGOsERraowe0EXyy+g8B4J4HxLgLj3QTGewiM9xIY7yMw3k8SNRinJcvKBF8ezp3tJM4OEmcnibOLxNlN4pybxDkPiXPeIYoaPGDXlAdtP2T7YduP2H7U9mO2H7f9hKIGg3sVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wxgKBsUhgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGCsExiqBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBhrBMY6gZEtavAAwReLHyQwPkRgfJjA+AiB8VEC42MExscJjE+QRA3Gbcmy+Qi+PJw75ydxLkDiXJDEWSFxVkmcC5E4FyZxLjJEUYMn7ZrylO2nbT9j+1nbz9l+3vYLtl9U1GBwr6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcZYIDAWCYyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhhjhcBYJTAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGihqECJXKqOiBhijogYYY43AWCcwskUNniT4YvFTBManCYzPEBifJTA+R2B8nsD4AoHxRZKowXgtWbYowZeHc+diJM7FSZxLkDiXJHEuReJcmsS5DIlz2SGKGrxk15SXbb9i+1Xbr9l+3fYbtt+0/ZaiBoN7FTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMMYCgbFIYFTUAGNU1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgrBMYqgVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYawTGOoGRLWrwEsEXi18mML5CYHyVwPgagfF1AuMbBMY3CYxvkUQNxm/JsuUIvjycO5cnca5A4lyRxLkSiXNlEucqJM5VSZyrDVHU4G27prxj+13b79l+3/YHtj+0/ZHtjxU1GNyrqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMRYIjEUCo6IGGKOiBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxlghMFYJjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGihqEyJXKqKgBxqioAcZYIzDWCYxsUYO3Cb5Y/A6B8V0C43sExvcJjB8QGD8kMH5EYPyYJGowQUuWrU7w5eHcuQaJc00S51okzrVJnOuQONclca5H4lx/iKIGn9g15VPbn9n+3PYXtr+0/ZXtr21/o6jB4F5FDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMsUBgLBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wxgqBsUpgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMMYagbFOYGSLGnxC8MXiTwmMnxEYPycwfkFg/JLA+BWB8WsC4zckUYMJW7KsRvDl4dxZJ3H2kDh7SZx9JM5+EucGJM4NSZwbDVHU4Fu7pnxn+3vbP9j+0fZPtn+2/YvtXxU1GNyrqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMRYIjEUCo6IGGKOiBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxlghMFYJjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGihqEyJXKqKgBxqioAcZYIzDWCYxsUYNvCb5Y/B2B8XsC4w8Exh8JjD8RGH8mMP5CYPyVJGowUUuWbUzw5eHcuQmJc1MS52Ykzs1JnFuQOLckcW5F4tx6iKIGv9k15Xfbf+S/dNhl/zPbTbZHtj2K7VHzX/RT1OB/exU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTDGAoGxSGBU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYKwTGKoFRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGGsExjqBkS1q8BvBF4t/JzD+QWDMv0DX6MaRCIxNBMaRCYyjEBhH7UpzPod/h7Ily7Yh+PJw7tyWxLkdiXN7EucOJM4dSZw7kTh3JnHuMkRRg9HsmjK67TFsD7M9pu2xbI9texzb4ypqMLhXUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAYywQGIsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjLFCYKwSGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4yxRmCsExjZogajEXyxeHQC4xgExmEExjEJjGMRGMcmMI5DYByXJGowSUuW7Urw5eHcuRuJc3cS5x4kzj1JnHuROPcmce5D4tx3iKIG49k1ZXzbE9ie0PZEtie2PYntSW1PpqjB4F5FDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMsUBgLBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wxgqBsUpgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMMYagbFOYGSLGoxH8MXi8QmMExAYJyQwTkRgnJjAOAmBcVIC42QkUYNJW7JsP4IvD+fO/UmcB5A4DyRxHkTiPJjEeQiJ81AS52FDFDWY3K4pU9ie0vZUtqe2PY3taW1PZ3t6RQ0G9ypqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMBQJjkcCoqAHGqKgBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxVgiMVQKjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMdYIjHUCI1vUYHKCLxZPQWCcksA4FYFxagLjNATGaQmM0xEYpyeJGkzWkmWHE3x5OHceQeI8ksR5FInzaBLnMSTOY0mcx5E4jx+iqEHBrilF2zPYntH2TLZntj2L7Vltz6aoweBeRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjLFAYCwSGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMMYKgbFKYFTUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTDGGoGxTmBkixoUCL5YXCQwzkBgnJHAOBOBcWYC4ywExlkJjLORRA0mb8myEwi+PJw7TyRxnkTiPJnEeQqJ81QS52kkztNJnGcMUdRgdrumzGF7TtvNtltsz2U72M5/ya9NUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY1mJ3gi8VzEBjnJDA2ExhbCIxzERgDgbGVwNhGEjWYoiXLziT48nDuPIvEeTaJ8xwS57kkzvNInOeTOC8gcV44RFGDkl1TyrbbbXfY7rTdZbvb9ty251HUYHCvogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxlggMBYJjIoaYIyKGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGGOFwFglMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhhjjcBYJzCyRQ1KBF8sLhMY2wmMHQTGTgJjF4Gxm8A4N4FxHpKowZQtWXYRwZeHc+fFJM5LSJyXkjgvI3FeTuK8gsR5JYnzqiGKGsxr15T5bM9ve4H8+mK7YrtqeyHbCytqMLhXUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAYywQGIsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjLFCYKwSGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4yxRmCsExjZogbzEnyxeD4C4/wExgUIjAsSGCsExiqBcSEC48IkUYOpWrLsaoIvD+fOa0ic15I4ryNxXk/ivIHEeSOJ8yYS581DFDVYxK4pi9pezPbitpewvaTtpWwvbXsZRQ0G9ypqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMBQJjkcCoqAHGqKgBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxVgiMVQKjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMdYIjHUCI1vUYBGCLxYvSmBcjMC4OIFxCQLjkgTGpQiMSxMYlyGJGkzdkmW3EHx5OHfeSuK8jcR5O4nzDhLnnSTOu0icd5M47xmiqMGydk1ZzvbytlewvaLtlWyvbHsV26sqajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIGyxJ8sXg5AuPyBMYVCIwrEhhXIjCuTGBchcC4KknUYJqWLLuX4MvDufM+Euf9JM4HSJwPkjgfInE+TOJ8hMT56BBFDVaza8rqttewvabttWyvbXsd2+vaXk9Rg8G9ihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGGOBwFgkMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIwVAmOVwKioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMNQJjncDIFjVYjeCLxasTGNcgMK5JYFyLwLg2gXEdAuO6BMb1SKIG07Zk2WMEXx7OnY+TOJ8gcT5J4nyKxPk0ifMZEuezJM7nhihqsL5dU2q267Z7bPfa7rPdb3sD2xsqajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIG6xN8sbhGYKwTGHsIjL0Exj4CYz+BcQMC44YkUYPpWrLseYIvD+fOF0icL5I4XyJxvkzifIXE+SqJ8zUS5+tDFDXYyK4pG9vexPamtjezvbntLWxvaXsrRQ0G9ypqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMBQJjkcCoqAHGqKgBxqioAcaoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxVgiMVQKjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMdYIjHUCI1vUYCOCLxZvTGDchMC4KYFxMwLj5gTGLQiMWxIYtyKJGkzfkmVvEHx5OHe+SeJ8i8T5NonzHRLnuyTO90ic75M4PxiiqMHWdk3Zxva2trezvb3tHWzvaHsn2zsrajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIGWxN8sXgbAuO2BMbtCIzbExh3IDDuSGDcicC4M0nUoNCSZR8SfHk4d35E4vyYxPkJifNTEudnJM7PSZxfkDi/HKKowS52TdnV9m62d7e9h+09be9le2/b+yhqMLhXUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAYywQGIsERkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjLFCYKwSGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4yxRmCsExjZoga7EHyxeFcC424Ext0JjHsQGPckMO5FYNybwLgPSdSg2JJlXxF8eTh3fk3i/IbE+S2J8zsS5/ckzh9InD+SOH8aoqjBvnZN2c/2/rYPsH2g7YNsH2z7ENuHKmowuFdRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjLBAYiwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMsUJgrBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjLFGYKwTGNmiBvsSfLF4PwLj/gTGAwiMBxIYDyIwHkxgPITAeChJ1GCGliz7meDLw7nzFxLnryTO30icv5M4/yBx/vnFdwLnSCTOpoTOgef+w+yacrjtI2wfafso20fbPsb2sbaPU9RgcK+iBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGWCAwFgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYY4XAWCUwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihooahAiVyqjogYYo6IGGGONwFgnMLJFDQ4j+GLx4QTGIwiMRxIYjyIwHk1gPIbAeCyB8TiSqMGMLVk2MsGXh3PnKCTOUUmco5E4RydxjkHiHEbiHJPEOdYQRQ2Ot2vKCbZPtH2S7ZNtn2L7VNun2T5dUYPBvYoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhhjgcBYJDAqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMFQJjlcCoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjDUCY53AyBY1OJ7gi8UnEBhPJDCeRGA8mcB4CoHxVALjaQTG00miBjO1ZNnYBF8ezp3jkDjHJXGOR+Icn8Q5AYlzQhLnRCTOiYcoanCGXVPOtH2W7bNtn2P7XNvn2T7f9gWKGgzuVdQAY1TUAGNU1ABjVNQAY1TUQFGDELlSGRU1wBgLBMYigVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDRQ1C5EplVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGOsEBirBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjrBEY6wRGtqjBGQRfLD6TwHgWgfFsAuM5BMZzCYznERjPJzBeQBI1mLklyyYh+PJw7pyUxDkZiXNyEucUJM4pSZxTkTinJnFOM0RRgwvtmnKR7YttX2L7UtuX2b7c9hW2r1TUYHCvogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxlggMBYJjIoaYIyKGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGGOFwFglMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhhjjcBYJzCyRQ0uJPhi8UUExosJjJcQGC8lMF5GYLycwHgFgfFKkqjBLC1ZNi3Bl4dz53QkzulJnAUSZ5HEOQOJc0YS50wkzpmHKGpwlV1TrrZ9je1rbV9n+3rbN9i+0fZNihoM7lXUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYCwTGIoFRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjrBAYqwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY6wRGOsERraowVUEXyy+msB4DYHxWgLjdQTG6wmMNxAYbyQw3kQSNZi1JctmIfjycO6clcQ5G4lzdhLnHCTOOUmczSTOFhLnXEMUNbjZrim32L7V9m22b7d9h+07bd9l+25FDQb3KmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIwFAmORwKioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDFWCIxVAqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAx1giMdQIjW9TgZoIvFt9CYLyVwHgbgfF2AuMdBMY7CYx3ERjvJokazNZifwfBl4dzZyuJs43EWSJxlkmc7STODhJnJ4mza4iiBvfYNeVe2/fZvt/2A7YftP2Q7YdtP6KoweBeRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjLFAYCwSGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMMYKgbFKYFTUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTDGGoGxTmBkixrcQ/DF4nsJjPcRGO8nMD5AYHyQwPgQgfFhAuMjJFGD2VuyrJvgy8O5c24S5zwkznlJnPOROOcncS5A4lyQxFkZoqjBo3ZNecz247afsP2k7adsP237GdvPKmowuFdRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjLBAYiwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMsUJgrBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjLFGYKwTGNmiBo8SfLH4MQLj4wTGJwiMTxIYnyIwPk1gfIbA+CxJ1GCOliyrEnx5OHcuROJcmMS5CIlzURLnYiTOxUmcS5A4lxyiqMFzdk153vYLtl+0/ZLtl22/YvtV268pajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIGzxF8sfh5AuMLBMYXCYwvERhfJjC+QmB8lcD4GknUYM6WLFuK4MvDuXNpEucyJM5lSZzLkTiXJ3GuQOJckcS50hBFDV63a8obtt+0/Zbtt22/Y/td2+/Zfl9Rg8G9ihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGGOBwFgkMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIwVAmOVwKioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMNQJjncDIFjV4neCLxW8QGN8kML5FYHybwPgOgfFdAuN7BMb3SaIGzS1ZtjLBl4dz5yokzlVJnKuROFcnca5B4lyTxLkWiXPtIYoafGDXlA9tf2T7Y9uf2P7U9me2P7f9haIGg3sVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wxgKBsUhgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGCsExiqBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBhrBMY6gZEtavABwReLPyQwfkRg/JjA+AmB8VMC42cExs8JjF+QRA1aWrJsHYIvD+fOdUmc65E41ydx1kicdRJnD4mzl8TZN0RRgy/tmvKV7a9tf2P7W9vf2f7e9g+2f1TUYHCvogYYo6IGGKOiBhijogYYo6IGihqEyJXKqKgBxlggMBYJjIoaYIyKGmCMihpgjIoaYIyKGmCMihooahAiVyqjogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGGOFwFglMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaqCoQYhcqYyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhhjjcBYJzCyRQ2+JPhi8VcExq8JjN8QGL8lMH5HYPyewPgDgfFHkqjBXC1Z1k/w5eHcuQGJc0MS50Ykzo1JnJuQODclcW5G4tx8iKIGP9k15Wfbv9j+1fZvtn+3/Uf+C37d9n83/yU6RQ3+t1dRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjLBAYiwRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMsUJgrBIYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0UNQiRK5VRUQOMUVEDjLFGYKwTGNmiBj8RfLH4ZwLjLwTGXwmMvxEYfycw/kFgzL/A2ejGkbrTnM/hvzvXkmVbEHx5OHduSeLcisS5NYlzGxLntiTO7Uic25M4dxiiqEGTXVNGtj2K7VFtj2Z7dNtj2B5me0xFDQb3KmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIwFAmORwKioAcaoqAHGqKgBxqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDFWCIxVAqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxqiogaIGIXKlMipqgDEqaoAx1giMdQIjW9SgieCLxSMTGEchMI5KYByNwDg6gXEMAuMwAuOYJFGD/JcQdyT48nDu3InEuTOJcxcS564kzt1InLuTOPcgce45RFGDseyaMrbtcWyPa3s82+PbnsD2hLYnUtRgcK+iBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGWCAwFgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYY4XAWCUwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihooahAiVyqjogYYo6IGGGONwFgnMLJFDcYi+GLx2ATGcQiM4xIYxyMwjk9gnIDAOCGBcSKSqEFbS5btRfDl4dy5N4lzHxLnviTO/Uic+5M4DyBxHkjiPGiIogYT2zVlEtuT2p7M9uS2p7A9pe2pbE+tqMHgXkUNMEZFDTBGRQ0wRkUNMEZFDRQ1CJErlVFRA4yxQGAsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTDGCoGxSmBU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBgVNVDUIESuVEZFDTBGRQ0wxhqBsU5gZIsaTEzwxeJJCIyTEhgnIzBOTmCcgsA4JYFxKgLj1CRRg1JLlh1M8OXh3HkIifNQEudhJM7DSZxHkDiPJHEeReI8eoiiBtPYNWVa29PZnt52wXbR9gy2Z7Q9k6IGg3sVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wxgKBsUhgVNQAY1TUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGCsExiqBUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBhrBMY6gZEtajANwReLpyUwTkdgnJ7AWCAwFgmMMxAYZyQwzkQSNSi3ZNkxBF8ezp3HkjiPI3EeT+I8gcR5IonzJBLnySTOU4YoajCzXVNmsT2r7dlsz257Dttz2m623aKoweBeRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjLFAYCwSGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNMMYKgbFKYFTUAGNU1ABjVNQAY1TUAGNU1ABjVNQAY1TUAGNU1EBRgxC5UhkVNcAYFTXAGBU1UNQgRK5URkUNMEZFDTDGGoGxTmBkixrMTPDF4lkIjLMSGGcjMM5OYJyDwDgngbGZwNhCEjVob8myUwm+PJw7TyNxnk7iPIPEeSaJ8ywS59kkznNInOcOUdRgLrumBNv5L8u12S7ZLttut91hu1NRg8G9ihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGGOBwFgkMCpqgDEqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaYIwVAmOVwKioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMNQJjncDIFjWYi+CLxYHA2EpgbCMwlgiMZQJjO4Gxg8DYSRI16GjJsvMIvjycO88ncV5A4ryQxHkRifNiEuclJM5LSZyXDVHUoMuuKd2257Y9j+15bc9ne37bC+TXG0UNBvcqaoAxKmqAMSpqgDEqaoAxKmqgqEGIXKmMihpgjAUCY5HAqKgBxqioAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMVYIjFUCo6IGGKOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKiBogYhcqUyKmqAMSpqgDHWCIx1AiNb1KCL4IvF3QTGuQmM8xAY5yUwzkdgnJ/AuACBcUGSqEFnS5ZdTvDl4dx5BYnzShLnVSTOq0mc15A4ryVxXkfivH6IogYVu6ZUbS9ke2Hbi9he1PZithe3vYSiBoN7FTXAGBU1wBgVNcAYFTXAGBU1UNQgRK5URkUNMMYCgbFIYFTUAGNU1ABjVNQAY1TUAGNU1ABjVNRAUYMQuVIZFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgrBMYqgVFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQNFDULkSmVU1ABjVNQAY1TUQFGDELlSGRU1wBgVNcAYawTGOoGRLWpQIfhicZXAuBCBcWEC4yIExkUJjIsRGBcnMC5BEjXoasmyGwi+PJw7byRx3kTivJnEeQuJ81YS520kzttJnHcMUdRgSbumLGV7advL2F7W9nK2l7e9gu0VFTUY3KuoAcaoqAHGqKgBxqioAcaoqIGiBiFypTIqaoAxFgiMRQKjogYYo6IGGKOiBhijogYYo6IGGKOiBooahMiVyqioAcaoqAHGqKgBxqioAcaoqAHGqKgBxqioAcaoqAHGWCEwVgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGmCMihpgjIoaKGoQIlcqo6IGGKOiBhijogaKGoTIlcqoqAHGqKgBxlgjMNYJjGxRgyUJvli8FIFxaQLjMgTGZQmMyxEYlycwrkBgXJEkatDdkmV3Enx5OHfeReK8m8R5D4nzXhLnfSTO+0mcD5A4HxyiqMFKdk1Z2fYqtle1vZrt1W2vYXtN22spajC4V1EDjFFRA4xRUQOMUVEDjFFRA0UNQuRKZVTUAGMsEBiLBEZFDTBGRQ0wRkUNMEZFDTBGRQ0wRkUNFDUIkSuVUVEDjFFRA4xRUQOMUVEDjFFRA4xRUQOMUVEDjFFRA4yxQmCsEhgVNcAYFTXAGBU1wBgVNcAYFTXAGBU1wBgVNcAYFTVQ1CBErlRGRQ0wRkUNMEZFDRQ1CJErlVFRA4xRUQOMsUZgrBMY2aIGKxF8sXhlAuMqBMZVCYyrERhXJzCuQWBck8C4FknUYO6WLHuI4MvDufNhEucjJM5HSZyPkTgfJ3E+QeJ8ksT51BBFDda2a8o6tte1vZ7t9W3XbNdt99juVdRgcK+iBhijogYYo6IGGKOiBhijogaKGoTIlcqoqAHGWCAwFgmMihpgjIoaYIyKGmCMihpgjIoaYIyKGihqECJXKqOiBhijogYYo6IGGKOiBhijogYYo6IGGKOiBhijogYYY4XAWCUwKmqAMSpqgDEqaoAxKmqAMSpqgDEqaoAxKmqAMSpqoKhBiFypjIoaYIyKGmCMihooahAiVyqjogYYo6IGGGONwFgnMLJFDdYm+GLxOgTGdQmM6xEY1ycw1giMdQJjD4GxlyRqME9Llj1N8OXh3PkMifNZEudzJM7nSZwvkDhfJHG+ROJ8eYiiBn12Tem3vYHtDW1vZHtj25v8P+zcRcxD25V26x1mZo4dJmeFk4Oxw8yMdpiZmZmZmZmZmZk5J8zMcKf1S1fVKXfWWFa90pjS26hUdPQojW9Hkdeo3bp2G6MGu71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMywLgKMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuA4ybAGNa1OAmAQ+LbxpgvFmA8eYBxlsEGG8ZYLxVgPHWAcbbhEQNDlpM07cCHg9vnd8OcX4nxPndEOf3QpzfD3H+IMT5wxDnYXuKGty2vim3q92+dofaHWt3qt25dpfaXY0a7PYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzLAOMqwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DjBuAoxpUYPbBjwsvl2A8fYBxjsEGO8YYLxTgPHOAca7BBjvGhI1OHgxTT8KeDy8df44xPmTEOdPQ5w/C3H+PMT5ixDnL0Ocv9pT1OBu9U25e+0etXvW7lW7d+0+tfvW7mfUYLfXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBhhXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGdYBxE2BMixrcLeBh8d0DjPcIMN4zwHivAOO9A4z3CTDeN8B4v5CowSGLafp1wOPhrfM3Ic7fhjh/F+L8fYjzDyHOP4Y4/xTi/POeogb3r2/KA2oPrD2o9uDaQ2oPrT2s9nCjBru9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjMsC4CjAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgOMmwBjWtTg/gEPix8QYHxggPFBAcYHBxgfEmB8aIDxYQHGh4dEDQ5dTNNfAh4Pb51/DXH+LcT59xDnP0Kc/wxx/ivE+e8Q53/2FDV4RH1THll7VO3RtcfUHlt7XO3xtScYNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IGjwh4WPzIAOOjAoyPDjA+JsD42ADj4wKMjw8wPiEkanDhxTT9N+Dx8NY5HSnDebgQ5+FDnEcIcR4xxHmkEOeRQ5xHGej8n3/7n1jflCfVnlx7Su2ptafVnl57Ru2ZRg12e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxmWAcRVgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wHGDcBxrSowRMDHhY/KcD45ADjUwKMTw0wPi3A+PQA4zMCjM8MiRosF9N01IDHw1vn0UKcRw9xHiPEecwQ57FCnMcOcR4nxHncPUUNnlXflGfXnlN7bu15tefXXlB7Ye1FRg12e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxmWAcRVgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wHGDcBxrSowbMCHhY/O8D4nADjcwOMzwswPj/A+IIA4wsDjC8KiRqsFtN0vIDHw1vn8UOcJwhxnjDEeaIQ54lDnCcJcZ40xHmyPUUNXlzflJfUXlp7We3ltVfUXll7Ve3VRg12e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxmWAcRVgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wHGDcBxrSowYsDHha/JMD40gDjywKMLw8wviLA+MoA46sCjK8OiRpcZDFNJw94PLx1niLEecoQ56lCnKcOcZ4mxHnaEOcsxDnfU9TgNfVNeW3tdbXX195Qe2PtTbU3195i1GC316gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAYYVwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxnWAcRNgTIsavCbgYfFrA4yvCzC+PsD4hgDjGwOMbwowvjnA+JaQqMFFF9N0uoDHw1vn6UOcZwhxnjHEeaYQ55lDnGcJcZ41xHm2PUUN3lrflLfV3l57R+2dtXfV3l17T+29Rg12e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxmWAcRVgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wHGDcBxrSowVsDHha/LcD49gDjOwKM7wwwvivA+O4A43sCjO8NiRpcbDFNZw94PLx1niPEuQhxnjPE2UKc5wpxnjvEeZ4Q53n3FDV4X31T3l/7QO2DtQ/VPlz7SO2jtY8ZNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IG7wt4WPz+AOMHAowfDDB+KMD44QDjRwKMHw0wfiwkanDxxTSdL+Dx8NZ5/hDnBUKcFwxxXijEeUCI88AQ50EhzoP3FDX4eH1TPlH7ZO1TtU/XPlP7bO1ztc8bNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IGHw94WPyJAOMnA4yfCjB+OsD4mQDjZwOMnwswfj4kanCJxTQdEvB4eOs8NMR54RDnMsS5CnFeJMR50RDnxUKcF99T1OAL9U35Yu1LtS/XvlL7au1rta/XvmHUYLfXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBhhXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGdYBxE2BMixp8IeBh8RcDjF8KMH45wPiVAONXA4xfCzB+PcD4jZCowSUX03SJgMfDW+clQ5yXCnFeOsR5mRDnZUOclwtxXj7EeYU9RQ2+Wd+Ub9W+XftO7bu179W+X/tB7YdGDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBNwMeFn8rwPjtAON3AozfDTB+L8D4/QDjDwKMPwyJGlxqMU1XDHg8vHVeKcR55RDnVUKcVw1xXi3EefUQ5zVCnNfcU9TgsPqm/Kj249pPaj+t/az289ovar80arDba9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgOMqwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zrAuAkwpkUNDgt4WPyjAOOPA4w/CTD+NMD4swDjzwOMvwgw/jIkanDpxTRdK+Dx8NZ57RDndUKc1w1xXi/Eef0Q5w1CnDcMca73FDX4VX1Tfl37Te23td/Vfl/7Q+2PtT8ZNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IGvwp4WPzrAONvAoy/DTD+LsD4+wDjHwKMfwww/ikkanCZxTRtAh4Pb503CnHeOMR5kxDnTUOcNwtx3jzEeYsQ5y33FDX4c31T/lL7a+1vtb/X/lH7Z+1ftX8bNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IGfw54WPyXAONfA4x/CzD+PcD4jwDjPwOM/wow/jskanDZxTTdKuDx8NZ56xDnbUKctw1x3i7EefsQ5x1CnHcMcd5pT1GD/9Q35b/bH8odUP967fC1I9SOWDtS7cjbH6gZNfjfvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zLAuAowGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4DjJsAY1rU4D8BD4v/G2DcPlD7v248XIDx8AHGIwQYjxhgPFKA8cgHjPl7jv/vlItpunPA4+Gt8y4hzruGOO8W4rx7iPMeIc57hjjvFeK8956iBkepb8pRa0erHb12jNoxa8eqHbt2HKMGu71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMywLgKMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuA4ybAGNa1OAoAQ+LjxpgPFqA8egBxmMEGI8ZYDxWgPHYAcbjhEQNLr+YpvsEPB7eOu8b4rxfiPP+Ic4HhDgfGOJ8UIjzwSHOh+wpanDc+qYcr3b82glqJ6ydqHbi2klqJzVqsNtr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuA4yrAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjOsC4CTCmRQ2OG/Cw+HgBxuMHGE8QYDxhgPFEAcYTBxhPEmA8aUjU4AqLaXpowOPhrfNhIc6HhzgfEeJ8ZIjzUSHOR4c4HxPifOyeogYnq2/KyWunqJ2ydqraqWunqZ22NjNqsNtr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuA4yrAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjOsC4CTCmRQ1OFvCw+OQBxlMEGE8ZYDxVgPHUAcbTBBhPG2CchUQNrriYpscFPB7eOh8f4nxCiPOJIc4nhTifHOJ8SojzqSHOp+0pajCvb8rpaqevnaF2xtqZameunaV2VqMGu71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMywLgKMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuA4ybAGNa1GAe8LD4dAHG0wcYzxBgPGOA8UwBxjMHGM8SYDxrSNTgSotpenrA4+Gt8xkhzmeGOJ8V4nx2iPM5Ic7nhjifF+J8/p6iBmerb8rZa+eoLWrnrLXa9odp566dx6jBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNThbwMPiswcYzxFgXAQYzxlgbAHGcwUYzx1gPE9I1ODKi2l6QcDj4a3zhSHOF4U4XxzifEmI86UhzpeFOF8e4nzFnqIG561vyvlq569doHbB2oVqB9QOrB1k1GC316gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAYYVwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxnWAcRNgTIsanDfgYfH5AoznDzBeIMB4wQDjhQKMBwQYDwwwHhQSNbjKYppeGfB4eOt8VYjz1SHO14Q4XxvifF2I8/UhzjeEON+4p6jBwfVNOaR26PbbUlvWVrWL1C5au5hRg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWpwcMDD4kMCjIcGGC8cYFwGGFcBxosEGC8aYLxYSNTgqotpelPA4+Gt880hzreEON8a4nxbiPPtIc53hDjfGeJ8156iBhevb8olapesXap26dplapetXa52eaMGu71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMywLgKMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuA4ybAGNa1ODiAQ+LLxFgvGSA8VIBxksHGC8TYLxsgPFyAcbLh0QNrraYpncHPB7eOt8T4nxviPN9Ic73hzg/EOL8YIjzQyHOD+8panCF+qZcsXal2pVrV6ldtXa12tVr1zBqsNtr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuA4yrAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjOsC4CTCmRQ2uEPCw+IoBxisFGK8cYLxKgPGqAcarBRivHmC8RkjU4OqLafpIwOPhrfOjIc6PhTg/HuL8RIjzkyHOT4U4Px3i/MyeogbXrG/KtWrXrl2ndt3a9WrXr92gdkOjBru9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjMsC4CjAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgOMmwBjWtTgmgEPi68VYLx2gPE6AcbrBhivF2C8foDxBgHGG4ZEDa6xmKbPBjwe3jo/F+L8fIjzCyHOL4Y4vxTi/HKI8yshzq/uKWqwrm/Kpnaj2o1rN6ndtHaz2s1rtzBqsNtr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuA4yrAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjOsC4CTCmRQ3WAQ+LNwHGGwUYbxxgvEmA8aYBxpsFGG8eYLxFSNTgmotp+lrA4+Gt8+shzm+EOL8Z4vxWiPPbIc7vhDi/G+L83p6iBresb8qtareu3aZ229rtarev3aF2R6MGu71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMywLgKMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuA4ybAGNa1OCWAQ+LbxVgvHWA8TYBxtsGGG8XYLx9gPEOAcY7hkQNrrWYpu8HPB7eOn8Q4vxhiPOwEOePQpw/DnH+JMT50xDnz/YUNbhTfVPuXLtL7a61u9XuXrtH7Z61exk12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogZ3CnhYfOcA410CjHcNMN4twHj3AOM9Aoz3DDDeKyRqcO3FNP084PHw1vmLEOcvQ5y/CnH+OsT5mxDnb0Ocvwtx/n5PUYN71zflPrX71u5Xu3/tAbUH1h5Ue7BRg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWpw74CHxfcJMN43wHi/AOP9A4wPCDA+MMD4oADjg0OiBtdZTNMfAh4Pb51/DHH+KcT55xDnX0Kcfw1x/i3E+fcQ5z/2FDV4SH1THlp7WO3htUfUHll7VO3RtccYNdh5Rg0go1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjMsC4CjAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgOMmwBjWtTgIQEPix8aYHxYgPHhAcZHBBgfGWB8VIDx0QHGx4REDa67mKZ/Bjwe3jr/FeL8d4jzPyHO/4Y4pyNnOA8X4jx8iPMIA53/82//Y+ub8rja42tPqD2x9qTak2tPqT3VqMFur1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1eGzAw+LHBRgfH2B8QoDxiQHGJwUYnxxgfEqA8akhUYPrLabpiAGPh7fOI4U4jxziPEqI86ghzqOFOI8e4jxGiPOYe4oaPK2+KU+vPaP2zNqzas+uPaf23NrzjBrs9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjMsA4yrAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgOMG4CjGlRg6cFPCx+eoDxGQHGZwYYnxVgfHaA8TkBxucGGJ8XEjW4/mKajhXweHjrPHaI8zghzuOGOI8X4jx+iPMEIc4ThjhPtKeowfPrm/KC2gtrL6q9uPaS2ktrL6u93KjBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNXh+wMPiFwQYXxhgfFGA8cUBxpcEGF8aYHxZgPHlIVGDGyym6cQBj4e3zpOEOE8a4jxZiPPkIc5ThDhPGeI8VYjz1HuKGryivimvrL2q9uraa2qvrb2u9vraG4wa7PYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzLAOMqwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DjBuAoxpUYNXBDwsfmWA8VUBxlcHGF8TYHxtgPF1AcbXBxjfEBI1uOFimk4T8Hh46zxtiHMW4pyHOE8X4jx9iPMMIc4zhjjPtKeowRvrm/Km2ptrb6m9tfa22ttr76i906jBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNXhjwMPiNwUY3xxgfEuA8a0BxrcFGN8eYHxHgPGdIVGD9WKazhzweHjrPEuI86whzrOFOM8e4jxHiHMR4jxniLPtKWrwrvqmvLv2ntp7a++rvb/2gdoHax8yarDba9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgOMqwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zrAuAkwpkUN3hXwsPjdAcb3BBjfG2B8X4Dx/QHGDwQYPxhg/FBI1GCzmKZzBTwe3jrPHeI8T4jzvCHO84U4zx/ivECI84IhzgvtKWrw4fqmfKT20drHah+vfaL2ydqnap82arDba9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgOMqwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zrAuAkwpkUNPhzwsPgjAcaPBhg/FmD8eIDxEwHGTwYYPxVg/HRI1OBGi2k6IODx8NZ5YIjzoBDnwSHOQ0Kch4Y4LxziXIY4V3uKGnymvimfrX2u9vnaF2pfrH2p9uXaV4wa7PYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzLAOMqwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DjBuAoxpUYPPBDws/myA8XMBxs8HGL8QYPxigPFLAcYvBxi/EhI1uPFimi4S8Hh467xoiPNiIc6LhzgvEeK8ZIjzUiHOS4c4L7OnqMFX65vytdrXa9+ofbP2rdq3a9+pfdeowW6vUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4DDCuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCM6wDjJsCYFjX4asDD4q8FGL8eYPxGgPGbAcZvBRi/HWD8ToDxuyFRg5sspumyAY+Ht87LhTgvH+K8QojziiHOK4U4rxzivEqI86p7ihp8r74p36/9oPbD2mG1H9V+XPtJ7adGDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjB9wIeFn8/wPiDAOMPA4yHBRh/FGD8cYDxJwHGn4ZEDW66mKarBTwe3jqvHuK8RojzmiHOa4U4rx3ivE6I87ohzuvtKWrws/qm/Lz2i9ova7+q/br2m9pva78zarDba9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgOMqwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zrAuAkwpkUNfhbwsPjnAcZfBBh/GWD8VYDx1wHG3wQYfxtg/F1I1OBmi2m6fsDj4a3zBiHOG4Y41yHOTYjzRiHOG4c4bxLivOmeoga/r2/KH2p/rP2p9ufaX2p/rf2t9nejBru9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjMsC4CjAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgOMmwBjWtTg9wEPi/8QYPxjgPFPAcY/Bxj/EmD8a4DxbwHGv4dEDW6+mKabBTwe3jpvHuK8RYjzliHOW4U4bx3ivE2I87YhztvtKWrwj/qm/LP2r9q/a/+p/Xf7o7QD699XO/z2x19GDf53r1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1+EfAw+J/Bhj/FWD8d4DxPwHG/wYYtw8k/68bDxdgPPyBY/6e085bLKbp9gGPh7fOO4Q47xjivFOI884hzruEOO8a4rxbiPPue4oaHKG+KUesHal25NpRaketHa129NoxjBrs9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjMsA4yrAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgOMG4CjGlRgyMEPCw+YoDxSAHGIwcYjxJgPGqA8WgBxqMHGI8REjW45WKa7hHweHjrvGeI814hznuHOO8T4rxviPN+Ic77hzgfsKeowTHrm3Ks2rFrx6kdt3a82vFrJ6id0KjBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNThmwMPiYwUYjx1gPE6A8bgBxuMFGI8fYDxBgPGEIVGDWy2m6YEBj4e3zgeFOB8c4nxIiPOhIc6HhTgfHuJ8RIjzkXuKGpyoviknrp2kdtLayWonr52idsraqYwa7PYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzLAOMqwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DjBuAoxpUYMTBTwsPnGA8SQBxpMGGE8WYDx5gPEUAcZTBhhPFRI1uPVimh4V8Hh463x0iPMxIc7HhjgfF+J8fIjzCSHOJ4Y4n7SnqMGp65tymtppa7PavHa62ulrZ6id0ajBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNTh1wMPi0wQYTxtgnAUY5wHG0wUYTx9gPEOA8YwhUYPbLKbpyQGPh7fOp4Q4nxrifFqI8+khzmeEOJ8Z4nxWiPPZe4oanKm+KWeunaV21trZamevnaO2qJ3TqMFur1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1OFPAw+IzBxjPEmA8a4DxbAHGswcYzxFgXAQYzxkSNbjtYpqeE/B4eOt8bojzeSHO54c4XxDifGGI80UhzheHOF+yp6hBq2/K9gde566dp3be2vlq569doHZBowa7vUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zLAuAowGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4DjJsAY1rUoAU8LD5XgPHcAcbzBBjPG2A8X4Dx/AHGCwQYLxgSNbjdYppeGvB4eOt8WYjz5SHOV4Q4XxnifFWI89UhzteEOF+7p6jBheqbckDtwNpBtYNrh9QO3X5rakujBru9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjMsC4CjAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgOMmwBjWtTgQgEPiw8IMB4YYDwowHhwgPGQAOOhAcYLBxiXIVGD2y+m6XUBj4e3zteHON8Q4nxjiPNNIc43hzjfEuJ8a4jzbXuKGqzqm3KR2kVrF6tdvHaJ2iVrl6pd2qjBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNVgFPCy+SIDxogHGiwUYLx5gvESA8ZIBxksFGC8dEjW4w2Ka3h7weHjrfEeI850hzneFON8d4nxPiPO9Ic73hTjfv6eowWXqm3LZ2uVql69doXbF2pVqV65dxajBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNbhMwMPiywYYLxdgvHyA8QoBxisGGK8UYLxygPEqIVGDOy6m6QMBj4e3zg+GOD8U4vxwiPMjIc6Phjg/FuL8eIjzE3uKGly1vilXq129do3aNWvXql27dp3adY0a7PYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzLAOMqwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DjBuAoxpUYOrBjwsvlqA8eoBxmsEGK8ZYLxWgPHaAcbrBBivGxI1uNNimj4Z8Hh46/xUiPPTIc7PhDg/G+L8XIjz8yHOL4Q4v7inqMH16pty/doNajesrWub2o1qN67dxKjBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNbhewMPi6wcYbxBgvGGAcR1g3AQYbxRgvHGA8SYhUYM7L6bpSwGPh7fOL4c4vxLi/GqI82shzq+HOL8R4vxmiPNbe4oa3LS+KTer3bx2i9ota7eq3bp2m9ptjRrs9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjMsA4yrAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgOMG4CjGlRg5sGPCy+WYDx5gHGWwQYbxlgvFWA8dYBxtsEGG8bEjW4y2Kavh3weHjr/E6I87shzu+FOL8f4vxBiPOHIc7DQpw/2lPU4Hb1Tbl97Q61O9buVLtz7S61u9buZtRgt9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wGGFcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZ1gHETYEyLGtwu4GHx7QOMdwgw3jHAeKcA450DjHcJMN41wHi3kKjBXRfT9OOAx8Nb509CnD8Ncf4sxPnzEOcvQpy/DHH+KsT56z1FDe5e35R71O5Zu1ft3rX71O5bu1/t/kYNdnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZlgHEVYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBxg3Aca0qMHdAx4W3yPAeM8A470CjPcOMN4nwHjfAOP9Aoz3D4ka3G0xTb8JeDy8df42xPm7EOfvQ5x/CHH+McT5pxDnn0Ocf9lT1OAB9U15YO1BtQfXHlJ7aO1htYfXHmHUYLfXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBhhXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGdYBxE2BMixo8IOBh8QMDjA8KMD44wPiQAONDA4wPCzA+PMD4iJCowd0X0/TXgMfDW+ffQpx/D3H+I8T5zxDnv0Kc/w5x/ifE+d89RQ0eWd+UR9UeXXtM7bG1x9UeX3tC7YlGDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBIwMeFj8qwPjoAONjAoyPDTA+LsD4+ADjEwKMTwyJGtxj+yPEo0z//5Fm2nm4EOfhQ5xHCHEeMcR5pBDnkUOcRwlxHnWg83/+7X9SfVOeXHtK7am1p9WeXntG7Zm1Zxk12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogZPCnhY/OQA41MCjE8NMD4twPj0AOMzAozPDDA+KyRqcM9F/bMDHg9vnUcPcR4jxHnMEOexQpzHDnEeJ8R53BDn8fYUNXh2fVOeU3tu7Xm159deUHth7UW1Fxs12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogbPDnhY/JwA43MDjM8LMD4/wPiCAOMLA4wvCjC+OCRqcK/FNB0/4PHw1nmCEOcJQ5wnCnGeOMR5khDnSUOcJwtxnnxPUYOX1DflpbWX1V5ee0XtlbVX1V5de41Rg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWrwkoCHxS8NML4swPjyAOMrAoyvDDC+KsD46gDja0KiBvdeTNMpAh4Pb52nDHGeKsR56hDnaUKcpw1xzkKc8xDn6fYUNXhtfVNeV3t97Q21N9beVHtz7S21txo12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogavDXhY/LoA4+sDjG8IML4xwPimAOObA4xvCTC+NSRqcJ/FNJ0+4PHw1nmGEOcZQ5xnCnGeOcR5lhDnWUOcZwtxnn1PUYO31Tfl7bV31N5Ze1ft3bX31N5be59Rg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWrwtoCHxW8PML4jwPjOAOO7AozvDjC+J8D43gDj+0KiBvddTNM5Ah4Pb52LEOc5Q5wtxHmuEOe5Q5znCXGeN8R5vj1FDd5f35QP1D5Y+1Dtw7WP1D5a+1jt40YNdnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZlgHEVYDRqwBiNGjBGowb/71rfGTWAjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNXh/wMPiDwQYPxhg/FCA8cMBxo8EGD8aYPxYgPHjIVGD+y2m6fwBj4e3zguEOC8Y4rxQiPOAEOeBIc6DQpwHhzgP2VPU4BP1Tflk7VO1T9c+U/ts7XO1z9e+YNRgt9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wGGFcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZ1gHETYEyLGnwi4GHxJwOMnwowfjrA+JkA42cDjJ8LMH4+wPiFkKjB/RfTdGjA4+Gt88IhzmWIcxXivEiI86IhzouFOC8e4rzEnqIGX6xvypdqX659pfbV2tdqX699o/ZNowa7vUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zLAuAowGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4DjJsAY1rU4IsBD4u/FGD8coDxKwHGrwYYvxZg/HqA8RsBxm+GRA0esJimSwY8Ht46LxXivHSI8zIhzsuGOC8X4rx8iPMKIc4r7ilq8K36pny79p3ad2vfq32/9oPaD2uHGTXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBt8KeFj87QDjdwKM3w0wfi/A+P0A4w8CjD8MMB4WEjV44GKarhTweHjrvHKI8yohzquGOK8W4rx6iPMaIc5rhjivtaeowY/qm/Lj2k9qP639rPbz2i9qv6z9yqjBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNfhRwMPiHwcYfxJg/GmA8WcBxp8HGH8RYPxlgPFXIVGDBy2m6doBj4e3zuuEOK8b4rxeiPP6Ic4bhDhvGOJchzg3e4oa/Lq+Kb+p/bb2u9rva3+o/bH2p9qfjRrs9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjMsA4yrAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgOMG4CjGlRg18HPCz+TYDxtwHG3wUYfx9g/EOA8Y8Bxj8FGP8cEjV48GKabhTweHjrvHGI8yYhzpuGOG8W4rx5iPMWIc5bhjhvtaeowV/qm/LX2t9qf6/9o/bP2r9q/679x6jBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNfhLwMPivwYY/xZg/HuA8R8Bxn8GGP8VYPx3gPE/IVGDhyym6dYBj4e3ztuEOG8b4rxdiPP2Ic47hDjvGOK8U4jzznuKGvx3++Oug+pfqx2+doTaEWtHqh25dpTtD6uMGvzvXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRlgXAUYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGNcBxk2AMS1q8N+Ah8XbB2D/142HCzAePsB4hADjEQOMRwowHjnAeJSDxvw9p50PXUzTXQIeD2+ddw1x3i3EefcQ5z1CnPcMcd4rxHnvEOd99hQ1OGp9U45WO3rtGLVj1o5VO3btOLXjGjXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBkcNeFh8tADj0QOMxwgwHjPAeKwA47EDjMcJMB43JGrwsMU03Tfg8fDWeb8Q5/1DnA8IcT4wxPmgEOeDQ5wPCXE+dE9Rg+PVN+X4tRPUTlg7Ue3EtZPUTlo7mVGD3V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEZYFwFGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBjXAcZNgDEtanC8gIfFxw8wniDAeMIA44kCjCcOMJ4kwHjSAOPJQqIGD19M08MCHg9vnQ8PcT4ixPnIEOejQpyPDnE+JsT52BDn4/YUNTh5fVNOUTtl7VS1U9dOUzttbVabGzXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBicPeFh8igDjKQOMpwownjrAeJoA42kDjLMA4zwkavCIxTQ9PuDx8Nb5hBDnE0OcTwpxPjnE+ZQQ51NDnE8LcT59T1GD09U35fS1M9TOWDtT7cy1s9TOWjubUYPdXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRlgXAUYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGNcBxk2AMS1qcLqAh8WnDzCeIcB4xgDjmQKMZw4wniXAeNYA49lCogaPXEzTMwIeD2+dzwxxPivE+ewQ53NCnM8NcT4vxPn8EOcL9hQ1OHt9U85RW9TOWWu17Y+pzl07T+28Rg12e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRr8v2t9Z9QAMho1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1OHvAw+JzBBgXAcZzBhhbgPFcAcZzBxjPE2A8b0jU4FGLaXphwOPhrfNFIc4XhzhfEuJ8aYjzZSHOl4c4XxHifOWeogbnq2/K+WsXqF2wdqHaAbUDawfVDjZqsNtr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuA4yrAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjOsC4CTCmRQ3OF/Cw+PwBxgsEGC8YYLxQgPGAAOOBAcaDAowHh0QNHr2YplcFPB7eOl8d4nxNiPO1Ic7XhThfH+J8Q4jzjSHON+0panBIfVMO3X5XasvaqnaR2kVrF6td3KjBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNTgk4GHxoQHGCwcYlwHGVYDxIgHGiwYYLxZgvHhI1OAxi2l6c8Dj4a3zLSHOt4Y43xbifHuI8x0hzneGON8V4nz3nqIGl6hvyiVrl6pdunaZ2mVrl6tdvnYFowa7vUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zLAuAowGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4DjJsAY1rU4BIBD4svGWC8VIDx0gHGywQYLxtgvFyA8fIBxiuERA0eu5im9wQ8Ht463xvifF+I8/0hzg+EOD8Y4vxQiPPDIc6P7ClqcMX6plypduXaVWpXrV2tdvXaNWrXNGqw22vUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4DjKsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOM6wLgJMKZFDa4Y8LD4SgHGKwcYrxJgvGqA8WoBxqsHGK8RYLxmSNTgcYtp+mjA4+Gt82Mhzo+HOD8R4vxkiPNTIc5Phzg/E+L87J6iBteqb8q1a9epXbd2vdr1azeo3bC2Nmqw22vUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4DjKsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOM6wLgJMKZFDa4V8LD42gHG6wQYrxtgvF6A8foBxhsEGG8YYFyHRA0ev5imzwU8Ht46Px/i/EKI84shzi+FOL8c4vxKiPOrIc6v7SlqsKlvyo1qN67dpHbT2s1qN6/donZLowa7vUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zLAuAowGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4DjJsAY1rUYBPwsPhGAcYbBxhvEmC8aYDxZgHGmwcYbxFgvGVI1OAJi2n6esDj4a3zGyHOb4Y4vxXi/HaI8zshzu+GOL8X4vz+nqIGt6pvyq1rt6ndtna72u1rd6jdsXYnowa7vUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zLAuAowGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4DjJsAY1rU4FYBD4tvHWC8TYDxtgHG2wUYbx9gvEOA8Y4BxjuFRA2euJimHwQ8Ht46fxjiPCzE+aMQ549DnD8Jcf40xPmzEOfP9xQ1uHN9U+5Su2vtbrW71+5Ru2ftXrV7GzXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBncOeFh8lwDjXQOMdwsw3j3AeI8A4z0DjPcKMN47JGrwpMU0/SLg8fDW+csQ569CnL8Ocf4mxPnbEOfvQpy/D3H+YU9Rg/vUN+W+tfvV7l97QO2BtQfVHlx7iFGD3V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEZYFwFGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBjXAcZNgDEtanCfgIfF9w0w3i/AeP8A4wMCjA8MMD4owPjgAONDQqIGT15M0x8DHg9vnX8Kcf45xPmXEOdfQ5x/C3H+PcT5jxDnP/cUNXhofVMeVnt47RG1R9YeVXt07TG1xxo12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogYPDXhY/LAA48MDjI8IMD4ywPioAOOjA4yPCTA+NiRq8JTFNP0r4PHw1vnvEOd/Qpz/DXH+zwfa/5edhwtxHj7EeYQQ5xEHOv/n3/7H1Tfl8bUn1J5Ye1LtybWn1J5ae5pRg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWrwuICHxY8PMD4hwPjEAOOTAoxPDjA+JcD41ADj00KiBk9dTNORAh4Pb51HDnEeJcR51BDn0UKcRw9xHiPEecwQ57H2FDV4en1TnlF7Zu1ZtWfXnlN7bu15tecbNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IGTw94WPyMAOMzA4zPCjA+O8D4nADjcwOMzwswPj8kavC0xTQdO+Dx8NZ5nBDncUOcxwtxHj/EeYIQ5wlDnCcKcZ54T1GDF9Q35YW1F9VeXHtJ7aW1l9VeXnuFUYPdXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRlgXAUYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGNcBxk2AMS1q8IKAh8UvDDC+KMD44gDjSwKMLw0wvizA+PIA4ytCogZPX0zTSQIeD2+dJw1xnizEefIQ5ylCnKcMcZ4qxHnqEOdp9hQ1eGV9U15Ve3XtNbXX1l5Xe33tDbU3GjXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBq8MeFj8qgDjqwOMrwkwvjbA+LoA4+sDjG8IML4xJGrwjMU0nTbg8fDWOQtxzkOcpwtxnj7EeYYQ5xlDnGcKcZ55T1GDN9U35c21t9TeWntb7e21d9TeWXuXUYPdXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRlgXAUYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGNcBxk2AMS1q8KaAh8VvDjC+JcD41gDj2wKMbw8wviPA+M4A47tCogbPXEzTWQIeD2+dZw1xni3EefYQ5zlCnIsQ5zlDnC3Eea49RQ3eXd+U99TeW3tf7f21D9Q+WPtQ7cNGDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBuwMeFr8nwPjeAOP7AozvDzB+IMD4wQDjhwKMHw6JGjxrMU3nDng8vHWeJ8R53hDn+UKc5w9xXiDEecEQ54VCnAfsKWrwkfqmfLT2sdrHa5+ofbL2qdqna58xarDba9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgOMqwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zrAuAkwpkUNPhLwsPijAcaPBRg/HmD8RIDxkwHGTwUYPx1g/ExI1ODZi2k6MODx8NZ5UIjz4BDnISHOQ0OcFw5xLkOcqxDnRfYUNfhsfVM+V/t87Qu1L9a+VPty7Su1rxo12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogafDXhY/LkA4+cDjF8IMH4xwPilAOOXA4xfCTB+NSRq8JzFNF004PHw1nmxEOfFQ5yXCHFeMsR5qRDnpUOclwlxXnZPUYOv1Tfl67Vv1L5Z+1bt27Xv1L5b+55Rg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWrwtYCHxV8PMH4jwPjNAOO3AozfDjB+J8D43QDj90KiBs9dTNPlAh4Pb52XD3FeIcR5xRDnlUKcVw5xXiXEedUQ59X2FDX4fn1TflD7Ye2w2o9qP679pPbT2s+MGuz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMywDjKsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuA4wbgKMaVGD7wc8LP5BgPGHAcbDAow/CjD+OMD4kwDjTwOMPwuJGjxvMU1XD3g8vHVeI8R5zRDntUKc1w5xXifEed0Q5/VCnNffU9Tg5/VN+UXtl7Vf1X5d+03tt7Xf1X5v1GC316gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAYYVwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxnWAcRNgTIsa/DzgYfEvAoy/DDD+KsD46wDjbwKMvw0w/i7A+PuQqMHzF9N0g4DHw1vnDUOc6xDnJsR5oxDnjUOcNwlx3jTEebM9RQ3+UN+UP9b+VPtz7S+1v9b+Vvt77R9GDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBHwIeFv8xwPinAOOfA4x/CTD+NcD4twDj3wOM/wiJGrxgMU03D3g8vHXeIsR5yxDnrUKctw5x3ibEedsQ5+1CnLffU9Tgn/VN+Vft37X/1P67/SHVwfXvqR2+doTtj5aMGvzvXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRlgXAUYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGNcBxk2AMS1q8M+Ah8X/CjD+O8D4nwDjfwOM2weI/9eNhwswHj7AeISDx/w9p50vXEzTHQIeD2+ddwxx3inEeecQ511CnHcNcd4txHn3EOc99hQ1OGJ9U45UO3LtKLWj1o5WO3rtGLVjGjXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBkcMeFh8pADjkQOMRwkwHjXAeLQA49EDjMcIMB4zJGrwosU03TPg8fDWea8Q571DnPcJcd43xHm/EOf9Q5wPCHE+cE9Rg2PVN+XYtePUjls7Xu34tRPUTlg7kVGD3V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEZYFwFGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBjXAcZNgDEtanCsgIfFxw4wHifAeNwA4/ECjMcPMJ4gwHjCAOOJQqIGL15M04MCHg9vnQ8OcT4kxPnQEOfDQpwPD3E+IsT5yBDno/YUNThxfVNOUjtp7WS1k9dOUTtl7VS1Uxs12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogYnDnhYfJIA40kDjCcLMJ48wHiKAOMpA4ynCjCeOiRq8JLFND064PHw1vmYEOdjQ5yPC3E+PsT5hBDnE0OcTwpxPnlPUYPT1DfltLVZbV47Xe30tTPUzlg7k1GD3V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEZYFwFGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBjXAcZNgDEtanCagIfFpw0wzgKM8wDj6QKMpw8wniHAeMYA45lCogYvXUzTUwIeD2+dTw1xPi3E+fQQ5zNCnM8McT4rxPnsEOdz9hQ1OHN9U85SO2vtbLWz185RW9TOWWtGDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBmQMeFp8lwHjWAOPZAoxnDzCeI8C4CDCeM8DYQqIGL1tM03MDHg9vnc8LcT4/xPmCEOcLQ5wvCnG+OMT5khDnS/cUNdj+KOnctfPUzls7X+38tQvULli7kFGD3V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEZYFwFGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBjXAcZNgDEtanCugIfF5w4wnifAeN4A4/kCjOcPMF4gwHjBAOOFQqIGL19M08sCHg9vnS8Pcb4ixPnKEOerQpyvDnG+JsT52hDn6/YUNTigvikH1g6qHVw7pHbo9jtTW9ZWRg12e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxmWAcRVgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wHGDcBxrSowQEBD4sPDDAeFGA8OMB4SIDx0ADjhQOMywDjKiRq8IrFNL0+4PHw1vmGEOcbQ5xvCnG+OcT5lhDnW0Ocbwtxvn1PUYOL1DflorWL1S5eu0TtkrVL1S5du4xRg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWpwkYCHxRcNMF4swHjxAOMlAoyXDDBeKsB46QDjZUKiBq9cTNM7Ah4Pb53vDHG+K8T57hDne0Kc7w1xvi/E+f4Q5wf2FDW4bH1TLle7fO0KtSvWrlS7cu0qtasaNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IGlw14WHy5AOPlA4xXCDBeMcB4pQDjlQOMVwkwXjUkavCqxTR9MODx8Nb5oRDnh0OcHwlxfjTE+bEQ58dDnJ8IcX5yT1GDq9U35eq1a9SuWbtW7dq169SuW7ueUYPdXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRlgXAUYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGNcBxk2AMS1qcLWAh8VXDzBeI8B4zQDjtQKM1w4wXifAeN0A4/VCogavXkzTpwIeD2+dnw5xfibE+dkQ5+dCnJ8PcX4hxPnFEOeX9hQ1uH59U25Qu2FtXdvUblS7ce0mtZsaNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IG1w94WHyDAOMNA4zrAOMmwHijAOONA4w3CTDeNCRq8JrFNH054PHw1vmVEOdXQ5xfC3F+PcT5jRDnN0Oc3wpxfntPUYOb1Tfl5rVb1G5Zu1Xt1rXb1G5bu51Rg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWpws4CHxTcPMN4iwHjLAOOtAoy3DjDeJsB42wDj7UKiBq9dTNN3Ah4Pb53fDXF+L8T5/RDnD0KcPwxxHhbi/FGI88d7ihrcvr4pd6jdsXan2p1rd6ndtXa32t2NGuz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMywDjKsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuA4wbgKMaVGD2wc8LL5DgPGOAcY7BRjvHGC8S4DxrgHGuwUY7x4SNXjdYpp+EvB4eOv8aYjzZyHOn4c4fxHi/GWI81chzl+HOH+zp6jBPeqbcs/avWr3rt2ndt/a/Wr3rz3AqMFur1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1uEfAw+J7BhjvFWC8d4DxPgHG+wYY7xdgvH+A8QEhUYPXL6bptwGPh7fO34U4fx/i/EOI848hzj+FOP8c4vxLiPOve4oaPLC+KQ+qPbj2kNpDaw+rPbz2iNojjRrs9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjMsA4yrAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgOMG4CjGlRgwcGPCx+UIDxwQHGhwQYHxpgfFiA8eEBxkcEGB8ZEjV4w2Ka/hbweHjr/HuI8x8hzn+GOP8V4vx3iPM/Ic7/hjj/53/Zpp3/82//o+qb8ujaY2qPrT2u9vjaE2pPrD3JqMFur1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1eFTAw+JHBxgfE2B8bIDxcQHGxwcYnxBgfGKA8UkhUYM3LuqfOfBRLuk8fIjzCCHOI4Y4jxTiPHKI8yghzqOGOI+2p6jBk+ub8pTaU2tPqz299ozaM2vPqj3bqMFur1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1eHLAw+KnBBifGmB8WoDx6QHGZwQYnxlgfFaA8dkhUYM3Labp6AGPh7fOY4Q4jxniPFaI89ghzuOEOI8b4jxeiPP4e4oaPKe+Kc+tPa/2/NoLai+svaj24tpLjBrs9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjMsA4yrAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgOMG4CjGlRg+cEPCx+boDxeQHG5wcYXxBgfGGA8UUBxhcHGF8SEjV482KaThDweHjrPGGI80QhzhOHOE8S4jxpiPNkIc6ThzhPsaeowUvrm/Ky2strr6i9svaq2qtrr6m91qjBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNXhpwMPilwUYXx5gfEWA8ZUBxlcFGF8dYHxNgPG1IVGDtyym6ZQBj4e3zlOFOE8d4jxNiPO0Ic5ZiHMe4jxdiPP0e4oavK6+Ka+vvaH2xtqbam+uvaX21trbjBrs9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjMsA4yrAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgOMG4CjGlRg9cFPCx+fYDxDQHGNwYY3xRgfHOA8S0BxrcGGN8WEjV462KazhDweHjrPGOI80whzjOHOM8S4jxriPNsIc6zhzjPsaeowdvrm/KO2jtr76q9u/ae2ntr76u936jBbq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgMMK4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzrAOMmwJgWNXh7wMPidwQY3xlgfFeA8d0BxvcEGN8bYHxfgPH9IVGDty2maRHweHjrPGeIs4U4zxXiPHeI8zwhzvOGOM8X4jz/nqIGH6hvygdrH6p9uPaR2kdrH6t9vPYJowa7vUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zLAuAowGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4DjJsAY1rU4AMBD4s/GGD8UIDxwwHGjwQYPxpg/FiA8eMBxk+ERA3evpimCwQ8Ht46LxjivFCI84AQ54EhzoNCnAeHOA8JcR66p6jBJ+ub8qnap2ufqX229rna52tfqH3RqMFur1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1+GTAw+JPBRg/HWD8TIDxswHGzwUYPx9g/EKA8YshUYN3LOqfFfB4eOtchjhXIc6LhDgvGuK8WIjz4iHOS4Q4L7mnqMGX6pvy5dpXal+tfa329do3at+sfcuowW6vUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4DDCuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCM6wDjJsCYFjX4UsDD4i8HGL8SYPxqgPFrAcavBxi/EWD8ZoDxWyFRg3cupulSAY+Ht85LhzgvE+K8bIjzciHOy4c4rxDivGKI80p7ihp8u74p36l9t/a92vdrP6j9sHZY7UdGDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBtwMeFn8nwPjdAOP3AozfDzD+IMD4wwDjYQHGH4VEDd61mKYrBzwe3jqvEuK8aojzaiHOq4c4rxHivGaI81ohzmvvKWrw4/qm/KT209rPaj+v/aL2y9qvar82arDba9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgOMqwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zrAuAkwpkUNfhzwsPgnAcafBhh/FmD8eYDxFwHGXwYYfxVg/HVI1ODdi2m6TsDj4a3zuiHO64U4rx/ivEGI84YhznWIcxPivNGeoga/qW/Kb2u/q/2+9ofaH2t/qv259hejBru9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjMsC4CjAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgOMmwBjWtTgNwEPi38bYPxdgPH3AcY/BBj/GGD8U4DxzwHGv4REDd6zmKYbBzwe3jpvEuK8aYjzZiHOm4c4bxHivGWI81YhzlvvKWrw1/qm/K3299o/av+s/av279p/av81arDba9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgOMqwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zrAuAkwpkUN/hrwsPhvAca/Bxj/EWD8Z4DxXwHGfwcY/xNg/G9I1OC9i2m6TcDj4a3ztiHO24U4bx/ivEOI844hzjuFOO8c4rzLnqIG0yH1f9cOXztC7Yi1I9WOXDtK7ajbHwQZNfjfvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zLAuAowGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4DjJsAY1rUYPvA6v/6f6aHCzAePsB4hADjEQOMRwowHjnAeJQA41EPGfP3nHa+bzFNdw14PLx13i3EefcQ5z1CnPcMcd4rxHnvEOd9Qpz33VPU4Gj1TTl67Ri1Y9aOVTt27Ti149aOZ9Rgt9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wGGFcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZ1gHETYEyLGhwt4GHx0QOMxwgwHjPAeKwA47EDjMcJMB43wHi8kKjB+xfTdL+Ax8Nb5/1DnA8IcT4wxPmgEOeDQ5wPCXE+NMT5sD1FDY5f35QT1E5YO1HtxLWT1E5aO1nt5EYNdnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZlgHEVYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBxg3Aca0qMHxAx4WnyDAeMIA44kCjCcOMJ4kwHjSAOPJAownD4kafGAxTQ8PeDy8dT4ixPnIEOejQpyPDnE+JsT52BDn40Kcj99T1OAU9U05Ze1UtVPXTlM7bW1Wm9dOZ9Rgt9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wGGFcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZ1gHETYEyLGpwi4GHxKQOMpwownjrAeJoA42kDjLMA4zzAeLqQqMEHF9P0hIDHw1vnE0OcTwpxPjnE+ZQQ51NDnE8LcT49xPmMPUUNTl/flDPUzlg7U+3MtbPUzlo7W+3sRg12e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxmWAcRVgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wHGDcBxrSowekDHhafIcB4xgDjmQKMZw4wniXAeNYA49kCjGcPiRp8aDFNzwx4PLx1PivE+ewQ53NCnM8NcT4vxPn8EOcLQpwv3FPU4Bz1TVnUzllrte0PgM5dO0/tvLXzGTXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBucIeFi8CDCeM8DYAoznCjCeO8B4ngDjeQOM5wuJGnx4MU0vCng8vHW+OMT5khDnS0OcLwtxvjzE+YoQ5ytDnK/aU9Tg/PVNuUDtgrUL1Q6oHVg7qHZw7RCjBru9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjMsC4CjAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgOMmwBjWtTg/AEPiy8QYLxggPFCAcYDAowHBhgPCjAeHGA8JCRq8JHFNL064PHw1vmaEOdrQ5yvC3G+PsT5hhDnG0OcbwpxvnlPUYNDt9+U2rK2ql2kdtHaxWoXr13CqMFur1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAwwrgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjOsA4ybAmBY1ODTgYfGFA4zLAOMqwHiRAONFA4wXCzBePMB4iZCowUcX0/SWgMfDW+dbQ5xvC3G+PcT5jhDnO0Oc7wpxvjvE+Z49RQ0uWd+US9UuXbtM7bK1y9UuX7tC7YpGDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBJQMeFl8qwHjpAONlAoyXDTBeLsB4+QDjFQKMVwyJGnxsMU3vDXg8vHW+L8T5/hDnB0KcHwxxfijE+eEQ50dCnB/dU9TgSvVNuXLtKrWr1q5Wu3rtGrVr1q5l1GC316gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAYYVwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxnWAcRNgTIsaXCngYfGVA4xXCTBeNcB4tQDj1QOM1wgwXjPAeK2QqMHHF9P0sYDHw1vnx0OcnwhxfjLE+akQ56dDnJ8JcX42xPm5PUUNrl3flOvUrlu7Xu36tRvUblhb1zZGDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBtQMeFl8nwHjdAOP1AozXDzDeIMB4wwDjOsC4CYkafGIxTZ8PeDy8dX4hxPnFEOeXQpxfDnF+JcT51RDn10KcX99T1OBG9U25ce0mtZvWbla7ee0WtVvWbmXUYLfXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBhhXAUajBozRqAFjNGrAGI0a/L9rfWfUADIaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DjBuAoxpUYMbBTwsvnGA8SYBxpsGGG8WYLx5gPEWAcZbBhhvFRI1+ORimr4R8Hh46/xmiPNbIc5vhzi/E+L8bojzeyHO74c4f7CnqMGt65tym9pta7er3b52h9oda3eq3dmowW6vUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4DDCuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCM6wDjJsCYFjW4dcDD4tsEGG8bYLxdgPH2AcY7BBjvGGC8U4DxziFRg08tpumHAY+Ht87DQpw/CnH+OMT5kxDnT0OcPwtx/jzE+Ys9RQ3uUt+Uu9buVrt77R61e9buVbt37T5GDXZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGZYBxFWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAcYNwHGtKjBXQIeFt81wHi3AOPdA4z3CDDeM8B4rwDjvQOM9wmJGnx6MU2/DHg8vHX+KsT56xDnb0Kcvw1x/i7E+fsQ5x9CnH/cU9TgvvVNuV/t/rUH1B5Ye1DtwbWH1B5q1GC316gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAYYVwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxnWAcRNgTIsa3DfgYfH9Aoz3DzA+IMD4wADjgwKMDw4wPiTA+NCQqMFnFtP0p4DHw1vnn0Ocfwlx/jXE+bcQ599DnP8Icf4zxPmvPUUNHlbflIfXHlF7ZO1RtUfXHlN7bO1xRg12e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxmWAcRVgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wHGDcBxrSowcMCHhY/PMD4iADjIwOMjwowPjrA+JgA42MDjI8LiRp8djFN/w54PLx1/ifE+d8Q53T0DOfhQpyHD3EeIcR5xBDnkQY6/+ff/sfXN+UJtSfWnlR7cu0ptafWnlZ7ulGD3V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEZYFwFGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBjXAcZNgDEtavD4gIfFTwgwPjHA+KQA45MDjE8JMD41wPi0AOPTQ6IGn1tM05EDHg9vnUcJcR41xHm0EOfRQ5zHCHEeM8R5rBDnsfcUNXhGfVOeWXtW7dm159SeW3te7fm1Fxg12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogbPCHhY/MwA47MCjM8OMD4nwPjcAOPzAozPDzC+ICRq8PnFNB0n4PHw1nncEOfxQpzHD3GeIMR5whDniUKcJw5xnmRPUYMX1jflRbUX115Se2ntZbWX115Re6VRg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWrwwoCHxS8KML44wPiSAONLA4wvCzC+PMD4igDjK0OiBl9YTNNJAx4Pb50nC3GePMR5ihDnKUOcpwpxnjrEeZoQ52n3FDV4VX1TXl17Te21tdfVXl97Q+2NtTcZNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IGrwp4WPzqAONrAoyvDTC+LsD4+gDjGwKMbwwwvikkavDFxTTNAh4Pb53zEOfpQpynD3GeIcR5xhDnmUKcZw5xnmVPUYM31zflLbW31t5We3vtHbV31t5Ve7dRg91eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWrw5oCHxW8JML41wPi2AOPbA4zvCDC+M8D4rgDju0OiBl9aTNNZAx4Pb51nC3GePcR5jhDnIsR5zhBnC3GeK8R57j1FDd5T35T31t5Xe3/tA7UP1j5U+3DtI0YNdnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZlgHEVYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBxg3Aca0qMF7Ah4WvzfA+L4A4/sDjB8IMH4wwPihAOOHA4wfCYkafHkxTecJeDy8dZ43xHm+EOf5Q5wXCHFeMMR5oRDnASHOA/cUNfhofVM+Vvt47RO1T9Y+Vft07TO1zxo12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogYfDXhY/LEA48cDjJ8IMH4ywPipAOOnA4yfCTB+NiRq8JXFNB0U8Hh46zw4xHlIiPPQEOeFQ5zLEOcqxHmREOdF9xQ1+Fx9Uz5f+0Lti7Uv1b5c+0rtq7WvGTXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBp8LeFj8+QDjFwKMXwwwfinA+OUA41cCjF8NMH4tJGrw1cU0XSzg8fDWefEQ5yVCnJcMcV4qxHnpEOdlQpyXDXFebk9Rg6/XN+UbtW/WvlX7du07te/Wvlf7vlGD3V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEZYFwFGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBjXAcZNgDEtavD1gIfF3wgwfjPA+K0A47cDjN8JMH43wPi9AOP3Q6IGX1tM0+UDHg9vnVcIcV4xxHmlEOeVQ5xXCXFeNcR5tRDn1fcUNfhBfVN+WDus9qPaj2s/qf209rPaz40a7PYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzLAOMqwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DjBuAoxpUYMfBDws/mGA8bAA448CjD8OMP4kwPjTAOPPAow/D4kafH0xTdcIeDy8dV4zxHmtEOe1Q5zXCXFeN8R5vRDn9UOcN9hT1OAX9U35Ze1XtV/XflP7be13td/X/mDUYLfXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBhhXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGdYBxE2BMixr8IuBh8S8DjL8KMP46wPibAONvA4y/CzD+PsD4h5CowTcW03TDgMfDW+c6xLkJcd4oxHnjEOdNQpw3DXHeLMR58z1FDf5Y35Q/1f5c+0vtr7W/1f5e+0ftn0YNdnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZlgHEVYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBxg3Aca0qMEfAx4W/ynA+OcA418CjH8NMP4twPj3AOM/Aoz/DIkafHMxTbcIeDy8dd4yxHmrEOetQ5y3CXHeNsR5uxDn7UOcd9hT1OBf9U35d+0/tf9uf/xzaP3/a4evHaF2xO2PbYwa/O9eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxGWBcBRiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAY1wHGTYAxLWrwr4CHxf8OMP4nwPjfAOP2gd//dePhAoyHDzAeIcB4xEPH/D2nnd9aTNMdAx4Pb513CnHeOcR5lxDnXUOcdwtx3j3EeY8Q5z33FDU4Un1Tjlw7Su2otaPVjl47Ru2YtWMZNdjtNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYlwHGVYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcR1g3AQY06IGRwp4WHzkAONRAoxHDTAeLcB49ADjMQKMxwwwHiskavDtxTTdK+Dx8NZ57xDnfUKc9w1x3i/Eef8Q5wNCnA8McT5oT1GDY9c35Ti149aOVzt+7QS1E9ZOVDuxUYPdXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRlgXAUYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGNcBxk2AMS1qcOyAh8XHCTAeN8B4vADj8QOMJwgwnjDAeKIA44lDogbfWUzTgwMeD2+dDwlxPjTE+bAQ58NDnI8IcT4yxPmoEOej9xQ1OEl9U05aO1nt5LVT1E5ZO1Xt1LXTGDXY7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGJcBxlWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEdYNwEGNOiBicJeFh80gDjyQKMJw8wniLAeMoA46kCjKcOMJ4mJGrw3cU0PSbg8fDW+dgQ5+NCnI8PcT4hxPnEEOeTQpxPDnE+ZU9Rg9PWN2VWm9dOVzt97Qy1M9bOVDuzUYPdXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRlgXAUYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGNcBxk2AMS1qcNqAh8WzAOM8wHi6AOPpA4xnCDCeMcB4pgDjmUOiBt9bTNNTAx4Pb51PC3E+PcT5jBDnM0OczwpxPjvE+ZwQ53P3FDU4S31Tzlo7W+3stXPUFrVz1lrtXEYNdnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZlgHEVYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBxg3Aca0qMFZAh4WnzXAeLYA49kDjOcIMC4CjOcMMLYA47lCogbfX0zT8wIeD2+dzw9xviDE+cIQ54tCnC8Ocb4kxPnSEOfL9hQ1OHd9U85TO2/tfLXz1y5Qu2DtQrUDjBrs9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjMsA4yrAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgOMG4CjGlRg3MHPCw+T4DxvAHG8wUYzx9gvECA8YIBxgsFGA8IiRr8YDFNLw94PLx1viLE+coQ56tCnK8Ocb4mxPnaEOfrQpyv31PU4MD6phxUO7h2SO3Q7TemtqytahcxarDba9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgOMqwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zrAuAkwpkUNDgx4WHxQgPHgAOMhAcZDA4wXDjAuA4yrAONFQqIGP1xM0xsCHg9vnW8Mcb4pxPnmEOdbQpxvDXG+LcT59hDnO/YUNbhofVMuVrt47RK1S9YuVbt07TK1yxo12O01asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiXAcZVgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxHWDcBBjTogYXDXhYfLEA48UDjJcIMF4ywHipAOOlA4yXCTBeNiRqcNhimt4Z8Hh463xXiPPdIc73hDj/P3buKsbV7Gy39humpjCDHaZVM8zJssPMjHaYmZmZmZmZmZmZmZmh05D0/1i/dvSddJ3MMa11S+OR7pO9P9W6VAe2lK45PhTi/HCI8yMhzo+GOD+2pajBles75Sq1q9auVrt67Rq1a9auVbu2UYPdvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4MoBD4uvEmC8aoDxagHGqwcYrxFgvGaA8VoBxmuHRA1+sWeaPh7weHjj/ESI85Mhzk+FOD8d4vxMiPOzIc7PhTg/v6WowXXqO+W6tevVrl+7Qe2GtRvVbly7iVGD3b1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OA6AQ+LrxtgvF6A8foBxhsEGG8YYLxRgPHGAcabhEQNfrlnmr4Q8Hh44/xiiPNLIc4vhzi/EuL8aojzayHOr4c4v7GlqMFN6zvlZrVVbV27ee0WtVvWblW7tVGD3b1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OCmAQ+LbxZgXAUY1wHGmwcYbxFgvGWA8VYBxluHRA1+tWeavhnweHjj/FaI89shzu+EOL8b4vxeiPP7Ic4fhDh/uKWowW3qO+W2tdvVbl+7Q+2OtTvV7ly7i1GD3b1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OA2AQ+LbxtgvF2A8fYBxjsEGO8YYLxTgPHOAca7hEQNfr1nmn4U8Hh44/xxiPMnIc6fhjh/FuL8eYjzFyHOX4Y4f7WlqMFd6zvlbrW71+5Ru2ftXrV71+5Tu69Rg929Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgrgEPi+8WYLx7gPEeAcZ7BhjvFWC8d4DxPgHG+4ZEDX6zZ5p+HfB4eOP8TYjztyHO34U4fx/i/EOI848hzj+FOP+8pajB/eo75f61B9QeWHtQ7cG1h9QeWnuYUYPdvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4H4BD4vvH2B8QIDxgQHGBwUYHxxgfEiA8aEBxoeFRA1+u2ea/hLweHjj/GuI828hzr+HOP8R4vxniPNfIc6DQ5z/3lLU4OH1nfKI2iNrj6o9uvaY2mNrj6s93qjB7l6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAON82veNRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGDw94WPyIAOMjA4yPCjA+OsD4mADjYwOMjwswPj4kavC7PdN0SMDj4Y3z0BDnYSHOw0Oc/wlx/jfEeUSIczpehvMoA53/97P/CfWd8sTak2pPrj2l9tTa02pPrz3DqMHuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8ISAh8VPDDA+KcD45ADjUwKMTw0wPi3A+PQA4zNCoga/3zNNRw14PLxxHi3EefQQ5zFCnMcMcR4rxHnsEOdxQpzH3VLU4Jn1nfKs2rNrz6k9t/a82vNrL6i90KjB7l6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavDMgIfFzwowPjvA+JwA43MDjM8LMD4/wPiCAOMLQ6IGf9gzTccLeDy8ce4X4tw/xHlAiPPAEOdBIc7jhzhPEOI84ZaiBi+q75QX115Se2ntZbWX115Re2XtVUYNdvcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYMXBTwsfnGA8SUBxpcGGF8WYHx5gPEVAcZXBhhfFRI1+OOeaTpRwOPhjfPEIc6ThDhPGuI8WYjz5CHOU4Q4TxniPNWWogavru+U19ReW3td7fW1N9TeWHtT7c1GDXb3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDVwc8LH5NgPG1AcbXBRhfH2B8Q4DxjQHGNwUY3xwSNfjTnmk6dcDj4Y3zNCHO04Y4TxfinIU45yHO04c4zxDiPOOWogZvqe+Ut9beVnt77R21d9beVXt37T1GDXb3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDtwQ8LH5rgPFtAca3BxjfEWB8Z4DxXQHGdwcY3xMSNfjznmk6U8Dj4Y3zzCHOs4Q4zxriPFuI8+whznOEOM8Z4tyzpajBe+s75X2199c+UPtg7UO1D9c+UvuoUYPdvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4L0BD4vfF2B8f4DxAwHGDwYYPxRg/HCA8SMBxo+GRA3+smeadgIeD2+cLcR5rhDnuUOc5wlxnjfEeb4Q5/lDnBfYUtTgY/Wd8vHaJ2qfrH2q9unaZ2qfrX3OqMHuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8LGAh8UfDzB+IsD4yQDjpwKMnw4wfibA+NkA4+dCogZ/3TNNFwx4PLxxXijEeeEQ50VCnBcNcV4sxHnxEOclQpx7txQ1+Hx9p3yh9sXal2pfrn2l9tXa12pfN2qwu9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGnw+4GHxFwKMXwwwfinA+OUA41cCjF8NMH4twPj1kKjB3/ZM0yLg8fDGuQxxXjLEeakQ56VDnJcJcV42xHm5EOfltxQ1+EZ9p3yz9q3at2vfqX239r3a92s/MGqwu9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGnwj4GHxNwOM3wowfjvA+J0A43cDjN8LMH4/wPiDkKjB3/dM0xUCHg9vnFcMcV4pxHnlEOdVQpxXDXFeLcR59RDnNbYUNfhhfaf8qPbj2k9qP639rPbz2i9qvzRqsLvXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixr8MOBh8Y8CjD8OMP4kwPjTAOPPAow/DzD+IsD4y5CowT/2TNM1Ax4Pb5zXCnFeO8R5nRDndUOc1wtxXj/EeYMQ5w23FDX4VX2n/Lr2m9pva7+r/b72h9ofa38yarC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsa/CrgYfGvA4y/CTD+NsD4uwDj7wOMfwgw/jHA+KeQqME/90zTjQIeD2+cNw5x3iTEedMQ581CnKsQ5zrEefMQ5y22FDX4c32n/KX219rfan+v/aP2z9q/agcbNdjda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUN/hzwsPgvAca/Bhj/FmD8e4DxHwHGfwYY/xVgPDgkavCvPdN0y4DHwxvnrUKctw5x3ibEedsQ5+1CnLcPcd4hxHnHLUUN/l3fKYfUDq0dVju89p/af2tH/L8/tDFqcOReowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrw74CHxYcEGA8NMB4WYDw8wPifAON/A4xHBBg3P4gyjowaHLxnmu4U8Hh447xziPMuIc67hjjvFuK8e4jzHiHOe4Y477WlqMFR6ocftXa02tFrx6gds3as2rFrx9n840YNjtxr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ02D6z29d/pUQOMRwswHj3AeIwA4zEDjMcKMB47wHicvWM+z/E4zZ5punfA4+GN8z4hzvuGOO8X4rx/iPMBIc4HhjgfFOJ88JaiBsetH3682n61/WsH1A6sHVQ7fu0Em3/cqMGRe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSoweaB1b7+Oz1egHG/AOP+AcYDAowHBhgPCjAeP8B4gr1jPs9p5yF7pukhAY+HN86HhjgfFuJ8eIjzESHOR4Y4HxXifHSI8zFbihqcsH74iWonrp2kdtLayWonr52idsrNP27U4Mi9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtRg88BqX/+dnijAeOIA40kCjCcNMJ4swHjyAOMpAoyn3Dvm85x2Hrpnmh4b8Hh443xciPPxIc4nhDifGOJ8UojzySHOp4Q4n7qlqMGp6oefunaa2mlrp6vNavPa6Wtn2PzjRg2O3GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDTYPrPb13+mpA4ynCTCeNsB4ugDjLMA4DzCePsB4hr1jPs9p52F7pulpAY+HN86nhzifEeJ8ZojzWSHOZ4c4nxPifG6I83lbihqcsX74mWpnrp2ldtba2Wpnr52jds7NP27U4Mi9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtRg88BqX/+dninAeOYA41kCjGcNMJ4twHj2AOM5Aozn3Dvm85x2Hr5nmp4f8Hh443xBiPOFIc4XhThfHOJ8SYjzpSHOl4U4X76lqMGe+uE7tVbb/NHKuWvnqZ23dr7a+Tf/uFGDI/caNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYPNA6t9/Xe6E2BsAcZzBRjPHWA8T4DxvAHG8wUYz793zOc57fzPnml6RcDj4Y3zlSHOV4U4Xx3ifE2I87UhzteFOF8f4nzDlqIGF6gffsHahWoXrl2kdtHaxWoXr11i848bNThyr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY12Dyw2td/pxcMMF4owHjhAONFAowXDTBeLMB48QDjJfaO+Tynnf/dM01vDHg8vHG+KcT55hDnW0Kcbw1xvi3E+fYQ5ztCnO/cUtRgb/3wRW1Zu2TtUrVL1y5Tu2ztcpt/3KjBkXuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHevQH/m3mAcRlgvGSA8VIBxksHGC8TYLxsgPFye8d8ntPOI/ZM07sCHg9vnO8Ocb4nxPneEOf7QpzvD3F+IMT5wRDnh7YUNbh8/fAr1K5Yu1LtyrWr1K5au1rt6pt/3KjBkXuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHmgdW+/ju9QoDxigHGKwUYrxxgvEqA8aoBxqsFGK++d8znOe2cdqbpwwGPhzfOj4Q4Pxri/FiI8+Mhzk+EOD8Z4vxUiPPTW4oaXKN++DVr16pdu3ad2nVr16tdv3aDzT9u1ODIvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYPPAal//nV4zwHitAOO1A4zXCTBeN8B4vQDj9QOMN9g75vOcdh5lZ5o+E/B4eOP8bIjzcyHOz4c4vxDi/GKI80shzi+HOL+ypajBDeuH36h249pNajet3ay2qq1rN9/840YNjtxr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ02D6z29d/pjQKMNw4w3iTAeNMA480CjKsA4zrAePO9Yz7PaedRd6bpqwGPhzfOr4U4vx7i/EaI85shzm+FOL8d4vxOiPO7W4oa3KJ++C1rt6rdunab2m1rt6vdvnaHzT9u1ODIvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYPPAal//nd4ywHirAOOtA4y3CTDeNsB4uwDj7QOMd9g75vOcdh5tZ5q+F/B4eOP8fojzByHOH4Y4fxTi/HGI8ychzp+GOH+2pajBHeuH36l259pdanet3a1299o9avfc/ONGDY7ca9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNNg+s9vXf6Z0CjHcOMN4lwHjXAOPdAox3DzDeI8B4z71jPs9p59F3punnAY+HN85fhDh/GeL8VYjz1yHO34Q4fxvi/F2I8/dbihrcq374vWv3qd23dr/a/WsPqD2w9qDNP27U4Mi9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtRg88BqX/+d3jvAeJ8A430DjPcLMN4/wPiAAOMDA4wP2jvm85x2HmNnmv4Q8Hh44/xjiPNPIc4/hzj/EuL8a4jzbyHOv4c4/7GlqMGD64c/pPbQ2sNqD689ovbI2qNqj97840YNjtxr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ02D6z29d/pQwKMDw0wPizA+PAA4yMCjI8MMD4qwPjovWM+z2nnMXem6Z8Bj4c3zn+FOA8Ocf47xHlIiPPQEOdhIc7DQ5z/2VLU4DH1wx9be1zt8bUn1J5Ye1LtybWnbP5xowZH7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBpsHVvv67/SxAcbHBRgfH2B8QoDxiQHGJwUYnxxgfMreMZ/ntPNYO9P034DHwxvnESHOab8M51FCnEcNcR4txHn0EOcxQpzHHOj8v5/9T60f/rTa02vPqD2z9qzas2vPqT13848bNThyr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY12Dyw2td/p08LMD49wPiMAOMzA4zPCjA+O8D4nADjc/eO+TynncfemaZjBTwe3jiPHeI8TojzuCHO44U49wtx7h/iPCDEeeCWogbPqx/+/NoLai+svaj24tpLai+tvWzzjxs1OHKvUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjXYPLDa13+nzw8wviDA+MIA44sCjC8OML4kwPjSAOPL9o75PKedx9mZpoMCHg9vnMcPcZ4gxHnCEOeJQpwnDnGeJMR50hDnybYUNXh5/fBX1F5Ze1Xt1bXX1F5be13t9Zt/3KjBkXuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHmgdW+/jt9RYDxlQHGVwUYXx1gfE2A8bUBxtcFGF+/d8znOe087s40nTzg8fDGeYoQ5ylDnKcKcZ46xHmaEOdpQ5ynC3HOthQ1eEP98DfW3lR7c+0ttbfW3lZ7e+0dm3/cqMGRe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSoweaB1b7+O31jgPFNAcY3BxjfEmB8a4DxbQHGtwcY37F3zOc57TzezjTNAx4Pb5ynD3GeIcR5xhDnmUKcZw5xniXEedYQ59m2FDV4Z/3wd9XeXXtP7b2199XeX/tA7YObf9yowZF7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjB5oHVvv47fVeA8d0BxvcEGN8bYHxfgPH9AcYPBBg/uHfM5znt3G9nms4e8Hh44zxHiPOcIc49Ic6dEGcLcZ4rxHnuEOd5thQ1+FD98A/XPlL7aO1jtY/XPlH7ZO1Tm3/cqMGRe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSoweaB1b7+O/1wgPEjAcaPBhg/FmD8eIDxEwHGTwYYP7V3zOc57dx/Z5rOG/B4eOM8X4jz/CHOC4Q4LxjivFCI88IhzouEOC+6pajBp+uHf6b22drnap+vfaH2xdqXal/e/ONGDY7ca9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNNg+s9vXf6WcCjJ8NMH4uwPj5AOMXAoxfDDB+KcD45b1jPs9p5wE703SxgMfDG+fFQ5yXCHHuDXEuQpzLEOclQ5yXCnFeektRg6/UD/9q7Wu1r9e+Uftm7Vu1b9e+s/nHjRocudeoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGmweWO3rv9OvBhi/FmD8eoDxGwHGbwYYvxVg/HaA8Tt7x3ye084Dd6bpMgGPhzfOy4Y4LxfivHyI8wohziuGOK8U4rxyiPMqW4oafLd++Pdq36/9oPbD2o9qP679pPbTzT9u1ODIvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYPPAal//nX4vwPj9AOMPAow/DDD+KMD44wDjTwKMP9075vOcdh60M01XDXg8vHFeLcR59RDnNUKc1wxxXivEee0Q53VCnNfdUtTgZ/XDf177Re2XtV/Vfl37Te23td9t/nGjBkfuNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGP9u77/9Ofx5g/EWA8ZcBxl8FGH8dYPxNgPG3Acbf7R3zeU47j78zTdcLeDy8cV4/xHmDEOcNQ5w3CnHeOMR5kxDnTUOcN9tS1OD39cP/UPtj7U+1P9f+Uvtr7W+1v2/+caMGR+41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogabB1b7+u/0DwHGPwYY/xRg/HOA8S8Bxr8GGP8WYPz73jGf5/i71J1pWgU8Ht441yHOm4c4bxHivGWI81YhzluHOG8T4rztlqIG/6gf/s/av2oH1/5dO6R2aO2w2uGbf9yowZF7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjB5oHVvv47/WeA8V8BxoMDjP8OMB4SYDw0wHhYgPHwvWM+z/F3njvTdLuAx8Mb5+1DnHcIcd4xxHmnEOedQ5x3CXHeNcR5ty1FDf5TP/y/tSM2/8ii/v9qR60drXb02jFqRg128Ro1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg80Dq339d/rfAOMRAcbNA7p93XiUAONRA4xHCzAePcB4jMWYz3P8DeXONN094PHwxnmPEOc9Q5z3CnHeO8R5nxDnfUOc9wtx3n9LUYNj1nfKsWrHrh2ndtza8Wr71favHVAzarCL16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaHDPgYfGxAozHDjAeJ8B43ADj8QKM+wUY9w8wHrAY83mOv0/cmaYHBDwe3jgfGOJ8UIjzwSHOh4Q4HxrifFiI8+EhzkdsKWpwYH2nHFQ7fu0EtRPWTlQ7ce0ktZPWjBrs4jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBgcGPCw+KMB4/ADjCQKMJwwwnijAeOIA40kCjCddjPk8x3+XO9P0yIDHwxvno0Kcjw5xPibE+dgQ5+NCnI8PcT4hxPnELUUNTlbfKSevnaJ2ytqpaqeunaZ22trpakYNdvEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYOTBTwsPnmA8RQBxlMGGE8VYDx1gPE0AcbTBhhPtxjzeY6/q9uZpicFPB7eOJ8c4nxKiPOpIc6nhTifHuJ8RojzmSHOZ20pajCr75R57fS1M9TOWDtT7cy1s9TOWjNqsIvXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixrMAh4WzwOMpw8wniHAeMYA45kCjGcOMJ4lwHjWxZjPc/zN2s40PTvg8fDG+ZwQ53NDnM8LcT4/xPmCEOcLQ5wvCnG+eEtRg7PVd8rZa+eonbO2p7ZTa7XNH4icu2bUYBevUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjU4W8DD4rMHGM8RYDxngHFPgHEnwNgCjOcKMJ57MebzHH8PtjNNLwl4PLxxvjTE+bIQ58tDnK8Icb4yxPmqEOerQ5yv2VLU4Dz1nXLe2vlq569doHbB2oVqF65dpGbUYBevUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjU4T8DD4vMGGM8XYDx/gPECAcYLBhgvFGC8cIDxIosxn+f4W6udaXptwOPhjfN1Ic7XhzjfEOJ8Y4jzTSHON4c43xLifOuWogYXre+Ui9UuXrvE5vultqgta5esXapm1GAXr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1uGjAw+KLBRgvHmC8RIBxb4BxEWBcBhgvGWC81GLM5zn+jmlnmt4W8Hh443x7iPMdIc53hjjfFeJ8d4jzPSHO94Y437elqMGl6zvlMrXL1i5Xu3ztCrUr1q5Uu3LNqMEuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcOmAh8WXCTBeNsB4uQDj5QOMVwgwXjHAeKUA45UXYz7P8XdBO9P0/oDHwxvnB0KcHwxxfijE+eEQ50dCnB8NcX4sxPnxLUUNrlLfKVetXa129do1atesXat27dp1akYNdvEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYOrBDwsvmqA8WoBxqsHGK8RYLxmgPFaAcZrBxivsxjzeY6/udmZpk8EPB7eOD8Z4vxUiPPTIc7PhDg/G+L8XIjz8yHOL2wpanDd+k65Xu36tRvUbli7Ue3GtZvUblozarCL16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaXDfgYfH1AozXDzDeIMB4wwDjjQKMNw4w3iTAeNPFmM9z/D3LzjR9MeDx8Mb5pRDnl0OcXwlxfjXE+bUQ59dDnN8IcX5zS1GDm9V3yqq2rt28dovaLWu3qt26dpuaUYNdvEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4GYBD4tXAcZ1gPHmAcZbBBhvGWC8VYDx1gHG2yzGfJ7jb0V2pulbAY+HN85vhzi/E+L8bojzeyHO74c4fxDi/GGI80dbihrctr5Tble7fe0OtTvW7lS7c+0utbvWjBrs4jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBrcNeFh8uwDj7QOMdwgw3jHAeKcA450DjHcJMN51MebzHH+HsTNNPw54PLxx/iTE+dMQ589CnD8Pcf4ixPnLEOevQpy/3lLU4G71nXL32j1q96zdq3bv2n1q963dr2bUYBevUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjW4W8DD4rsHGO8RYLxngPFeAcZ7BxjvE2C8b4Dxfosxn+f4G4edafpNwOPhjfO3Ic7fhTh/H+L8Q4jzjyHOP4U4/xzi/MuWogb3r++UB9QeWHtQ7cG1h9QeWntY7eE1owa7eI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowf0DHhY/IMD4wADjgwKMDw4wPiTA+NAA48MCjA9fjPk8x98P7EzTXwMeD2+cfwtx/j3E+Y8Q5z9DnP8KcR4c4vx3iPOQLUUNHlHfKY+sPar26Npjao+tPa72+NoTakYNdvEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNHBDwsfmSA8VEBxkcHGB8TYHxsgPFxAcbHBxifsBjzeY7/bf7ONB0a8Hh44zwsxHl4iPM/Ic7/hjiPCHFO+2c4jxLiPOpA5//97H9ifac8qfbk2lNqT609rfb02jNqz6wZNdjFa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNnhjwsPhJAcYnBxifEmB8aoDxaQHGpwcYnxFgfOZizOc5/nfvO9N0tIDHwxvn0UOcxwhxHjPEeawQ57FDnMcJcR43xHm8LUUNnlXfKc+uPaf23Nrzas+vvaD2wtqLakYNdvEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNnBTwsfnaA8TkBxucGGJ8XYHx+gPEFAcYXBhhftBjzeY7/TfnONO0X8Hh449w/xHlAiPPAEOdBIc7jhzhPEOI8YYjzRFuKGry4vlNeUntp7WW1l9deUXtl7VW1V9eMGuziNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGLw54WPySAONLA4wvCzC+PMD4igDjKwOMrwowvnox5vMc/3vtnWk6ccDj4Y3zJCHOk4Y4TxbiPHmI8xQhzlOGOE8V4jz1lqIGr6nvlNfWXld7fe0NtTfW3lR7c+0tNaMGu3iNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMFrAh4WvzbA+LoA4+sDjG8IML4xwPimAOObA4xvWYz5PMf/Fnpnmk4T8Hh44zxtiPN0Ic5ZiHMe4jx9iPMMIc4zhjjPtKWowVvrO+VttbfX3lF7Z+1dtXfX3lN7b82owS5eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrw1oCHxW8LML49wPiOAOM7A4zvCjC+O8D4ngDjexdjPs/xvzPemaYzBzwe3jjPEuI8a4jzbCHOs4c4zxHiPGeIc0+Ic2dLUYP31XfK+2sfqH2w9qHah2sfqX209rGaUYNdvEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4H0BD4vfH2D8QIDxgwHGDwUYPxxg/EiA8aMBxo8txnye43/Du1M/I+Dx8MZ5rhDnuUOc5wlxnjfEeb4Q5/lDnBcIcV5wS1GDj9d3yidqn6x9qvbp2mdqn619rvb5mlGDXbxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1ODjAQ+LPxFg/GSA8VMBxk8HGD8TYPxsgPFzAcbPL8Z8nuN/H7szTRcKeDy8cV44xHmREOdFQ5wXC3FePMR5iRDn3hDnYktRgy/Ud8oXa1+qfbn2ldpXa1+rfb32jZpRg128Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgCwEPi78YYPxSgPHLAcavBBi/GmD8WoDx6wHGbyzGfJ7jf3u6M03LgMfDG+clQ5yXCnFeOsR5mRDnZUOclwtxXj7EeYUtRQ2+Wd8p36p9u/ad2ndr36t9v/aD2g9rRg128Ro1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg28GPCz+VoDx2wHG7wQYvxtg/F6A8fsBxh8EGH+4GPN5jv9d5840XTHg8fDGeaUQ55VDnFcJcV41xHm1EOfVQ5zXCHFec0tRgx/Vd8qPaz+p/bT2s9rPa7+o/bL2q5pRg128Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgRwEPi38cYPxJgPGnAcafBRh/HmD8RYDxlwHGXy3GfJ7jfzO5M03XCng8vHFeO8R5nRDndUOc1wtxXj/EeYMQ5w1DnDfaUtTg1/Wd8pvab2u/q/2+9ofaH2t/qv25ZtRgF69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNfh1wMPi3wQYfxtg/F2A8fcBxj8EGP8YYPxTgPHPizGf5/jfIO5M040DHg9vnDcJcd40xHmzEOcqxLkOcd48xHmLEOcttxQ1+Et9p/y19rfa32v/qP2z9q/awbV/14wa7OI1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogZ/CXhY/NcA498CjH8PMP4jwPjPAOO/AowHBxj/vRjzeY7/fd/ONN0q4PHwxnnrEOdtQpy3DXHeLsR5+xDnHUKcdwxx3mlLUYND6jvl0NphtcNr/6n9t3ZEbVrW/23NqMEuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcEjAw+JDA4yHBRgPDzD+J8D43wDjEQHGzQPOfd14lOWYz3P8b+d2punOAY+HN867hDjvGuK8W4jz7iHOe4Q47xnivFeI895bihoctb5TjlY7eu0YtWPWjlU7du04tePWjBrs4jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBkdd7vu/06MFGI8eYDxGgPGYAcZjBRiPHWA8ToDxuMsxn+f436XtTNN9Ah4Pb5z3DXHeL8R5/xDnA0KcDwxxPijE+eAQ50O2FDU4Xn2n7Ffbv3ZA7cDaQbXj105QO2HNqMEuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qsHlgta//TvcLMO4fYDwgwHhggPGgAOPxA4wnCDCecDnm8xz/m6+daXpowOPhjfNhIc6HhzgfEeJ8ZIjzUSHOR4c4HxPifOyWogYnqu+UE9dOUjtp7WS1k9dOUTtl7VQ1owa7eI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSoweaB1b7+Oz1xgPEkAcaTBhhPFmA8eYDxFAHGUwYYT7Uc83mO/z3VzjQ9LuDx8Mb5+BDnE0KcTwxxPinE+eQQ51NCnE8NcT5tS1GDU9d3ymlqp62drjarzWunr52hdsaaUYNdvEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYPPAal//nZ4mwHjaAOPpAoyzAOM8wHj6AOMZAoxnXI75PMf/Vmlnmp4e8Hh443xGiPOZIc5nhTifHeJ8TojzuSHO54U4n7+lqMGZ6jvlzLWz1M5aO1vt7LVz1M5Z21MzarCL16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsabB5Y7eu/0zMHGM8SYDxrgPFsAcazBxjPEWA8Z4Bxz3LM5zn+d0A70/SCgMfDG+cLQ5wvCnG+OMT5khDnS0OcLwtxvjzE+YotRQ126jul1TZ/aHHu2nlq562dr3b+2gVqRg128Ro1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg80Dq339d9oCjOcKMJ47wHieAON5A4znCzCeP8B4geWYz3P8d7kzTa8MeDy8cb4qxPnqEOdrQpyvDXG+LsT5+hDnG0Kcb9xS1OCC9Z1yodqFaxepXbR2sdrFa5fYfN/UjBrs4jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBpsHVvv67/RCAcYLBxgvEmC8aIDxYgHGiwcYLxFg3Lsc83mO//3KzjS9KeDx8Mb55hDnW0Kcbw1xvi3E+fYQ5ztCnO8Mcb5rS1GDRX2nLGuXrF2qdunaZWqXrV2udvmaUYNdvEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYPPAal//nS4DjJcMMF4qwHjpAONlAoyXDTBeLsB4+eWYz3P8b0N2pundAY+HN873hDjfG+J8X4jz/SHOD4Q4Pxji/FCI88Nbihpcob5Trli7Uu3KtavUrlq7Wu3qtWvUjBrs4jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBpsHVvv67/SKAcYrBRivHGC8SoDxqgHGqwUYrx5gvMZyzOc5/ncXO9P0kYDHwxvnR0OcHwtxfjzE+YkQ5ydDnJ8KcX46xPmZLUUNrlnfKdeqXbt2ndp1a9erXb92g9oNa0YNdvEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYPNA6t9/Xd6rQDjtQOM1wkwXjfAeL0A4/UDjDcIMN5wOebzHP+bhp1p+mzA4+GN83Mhzs+HOL8Q4vxiiPNLIc4vhzi/EuL86paiBjeq75Qb125Su2ntZrVVbV27ee0WNaMGu3iNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHmgdW+/ju9cYDxJgHGmwYYbxZgXAUY1wHGmwcYb7Ec83mO/73AzjR9LeDx8Mb59RDnN0Kc3wxxfivE+e0Q53dCnN8NcX5vS1GDW9Z3yq1qt67dpnbb2u1qt6/doXbHmlGDXbxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1GDzwGpf/53eKsB46wDjbQKMtw0w3i7AePsA4x0CjHdcjvk8x/9b/M40fT/g8fDG+YMQ5w9DnD8Kcf44xPmTEOdPQ5w/C3H+fEtRgzvVd8qda3ep3bV2t9rda/eo3bN2r5pRg128Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtRg88BqX/+d3jnAeJcA410DjHcLMN49wHiPAOM9A4z3Wo75PMf/O/fONP0i4PHwxvnLEOevQpy/DnH+JsT52xDn70Kcvw9x/mFLUYN713fKfWr3rd2vdv/aA2oPrD2o9uCaUYNdvEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYPPAal//nd4nwHjfAOP9Aoz3DzA+IMD4wADjgwKMD16O+TzH/xvyzjT9MeDx8Mb5pxDnn0Ocfwlx/jXE+bcQ599DnP8Icf5zS1GDh9R3ykNrD6s9vPaI2iNrj6o9uvaYmlGDXbxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1GDzwGpf/50+NMD4sADjwwOMjwgwPjLA+KgA46MDjI9Zjvk8x//77M40/Svg8fDGeXCI898hzkNCnIeGOA8LcR4e4vxPiPO/W4oaPLa+Ux5Xe3ztCbUn1p5Ue3LtKbWn1owa7OI1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogabB1b7+u/0cQHGxwcYnxBgfGKA8UkBxicHGJ8SYHzqcsznOf7fPnem6YiAx8Mb53RAhvMoIc6jhjiPFuI8eojzGCHOY4Y4jzXQ+X8/+59W3ylPrz2j9szas2rPrj2n9tza82pGDXbxGjWYiJ9r1AAyGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNdg8sNrXf6dPDzA+I8D4zADjswKMzw4wPifA+NwA4/OWYz7P8f+uuDNNxw54PLxxHifEedwQ5/FCnPuFOPcPcR4Q4jwwxHnQlqIGz6/vlBfUXlh7Ue3FtZfUXlp7We3lNaMGu3iNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHmgdW+/jt9QYDxhQHGFwUYXxxgfEmA8aUBxpcFGF++HPN5jv83u51pOn7A4+GN8wQhzhOGOE8U4jxxiPMkIc6ThjhPFuI8+ZaiBq+o75RX1l5Ve3XtNbXX1l5Xe33tDTWjBrt4jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjB5oHVvv47fWWA8VUBxlcHGF8TYHxtgPF1AcbXBxjfsBzzeY7/97CdaTpFwOPhjfOUIc5ThThPHeI8TYjztCHO04U4ZyHO+ZaiBm+s75Q31d5ce0vtrbW31d5ee0ftnTWjBrt4jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjB5oHVvv47fVOA8c0BxrcEGN8aYHxbgPHtAcZ3BBjfuRzzeY7/t6adaTp9wOPhjfMMIc4zhjjPFOI8c4jzLCHOs4Y4zxbiPPuWogbvqu+Ud9feU3tv7X2199c+UPtg7UM1owa7eI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSoweaB1b7+O313gPE9Acb3BhjfF2B8f4DxAwHGDwYYP7Qc83mO/3ecnWk6R8Dj4Y3znCHOPSHOnRBnC3GeK8R57hDneUKc591S1ODD9Z3ykdpHax+rfbz2idona5+qfbpm1GAXr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY12Dyw2td/px8JMH40wPixAOPHA4yfCDB+MsD4qQDjp5djPs/x/0ayM03nC3g8vHGeP8R5gRDnBUOcFwpxXjjEeZEQ50VDnBfbUtTgM/Wd8tna52qfr32h9sXal2pfrn2lZtRgF69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNdg8sNrXf6efDTB+LsD4+QDjFwKMXwwwfinA+OUA41eWYz7P8f/+sDNNFw94PLxxXiLEuTfEuQhxLkOclwxxXirEeekQ52W2FDX4an2nfK329do3at+sfav27dp3at+tGTXYxWvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDTYPrPb13+nXAoxfDzB+I8D4zQDjtwKM3w4wfifA+N3lmM9z/H/b35mmywY8Ht44LxfivHyI8wohziuGOK8U4rxyiPMqIc6rbilq8L36Tvl+7Qe1H9Z+VPtx7Se1n9Z+VjNqsIvXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixpsHljt67/T7wcYfxBg/GGA8UcBxh8HGH8SYPxpgPFnyzGf5/j/br4zTVcLeDy8cV49xHmNEOc1Q5zXCnFeO8R5nRDndUOc19tS1ODn9Z3yi9ova7+q/br2m9pva7+r/b5m1GAXr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY12Dyw2td/p78IMP4ywPirAOOvA4y/CTD+NsD4uwDj75djPs/x/016Z5quH/B4eOO8QYjzhiHOG4U4bxzivEmI86YhzpuFOFdbihr8ob5T/lj7U+3Ptb/U/lr7W+3vtX/UjBrs4jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBpsHVvv67/SPAcY/BRj/HGD8S4DxrwHGvwUY/x5g/MdyzOc5/r/37kzTOuDx8MZ58xDnLUKctwxx3irEeesQ521CnLcNcd5uS1GDf9Z3yr9qB9f+XTukdmjtsNrhtf/UjBrs4jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBpsHVvv67/RfAcaDA4z/DjAeEmA8NMB4WIDx8ADjf5ZjPs/x/y11Z5puH/B4eOO8Q4jzjiHOO4U47xzivEuI864hzruFOO++pajBf+s75YjadMn6f68dtXa02tFrx6gdc/PHDUYNjtxr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ02D6z29d/pEQHGzQO1fd14lADjUQOMRwswHj3AeIwA4zEvOebzHP/fKXem6R4Bj4c3znuGOO8V4rx3iPM+Ic77hjjvF+K8f4jzAVuKGhyrvlOOXTtO7bi149X2q+1fO6B2oFGD3b1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OBYAQ+Ljx1gPE6A8bgBxuMFGPcLMO4fYDwgwHhgSNTgKjvT9MCAx8Mb54NCnA8OcT4kxPnQEOfDQpwPD3E+IsT5yC1FDQ6q75Tj105QO2HtRLUT105SO2ntZEYNdvcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYODAh4WHz/AeIIA4wkDjCcKMJ44wHiSAONJA4wnC4kaXHVnmh4V8Hh443x0iPMxIc7HhjgfF+J8fIjzCSHOJ4Y4n7SlqMHJ6zvlFLVT1k5VO3XtNLXT1k5Xmxk12N1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ1OHvCw+BQBxlMGGE8VYDx1gPE0AcbTBhhPF2CchUQNrrYzTU8OeDy8cT4lxPnUEOfTQpxPD3E+I8T5zBDns0Kcz95S1GBe3ymnr52hdsbamWpnrp2ldtba2Ywa7O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogbzgIfFpw8wniHAeMYA45kCjGcOMJ4lwHjWAOPZQqIGV9+ZpucEPB7eOJ8b4nxeiPP5Ic4XhDhfGOJ8UYjzxSHOl2wpanD2+k45R+2ctT21nVqrbf6o4dy18xg12N1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ3OHvCw+BwBxnMGGPcEGHcCjC3AeK4A47kDjOcJiRpcY2eaXhrweHjjfFmI8+UhzleEOF8Z4nxViPPVIc7XhDhfu6WowXnrO+V8tfPXLlC7YO1CtQvXLlK7qFGD3b1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OC8AQ+LzxdgPH+A8QIBxgsGGC8UYLxwgPEiAcaLhkQNrrkzTa8LeDy8cb4+xPmGEOcbQ5xvCnG+OcT5lhDnW0Ocb9tS1OBi9Z1y8dolNt8ttUVtWbtk7VK1Sxs12N1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ0uFvCw+OIBxksEGPcGGBcBxmWA8ZIBxksFGC8dEjW41s40vT3g8fDG+Y4Q5ztDnO8Kcb47xPmeEOd7Q5zvC3G+f0tRg8vUd8pla5erXb52hdoVa1eqXbl2FaMGu3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMFlAh4WXzbAeLkA4+UDjFcIMF4xwHilAOOVA4xXCYkaXHtnmj4Q8Hh44/xgiPNDIc4Phzg/EuL8aIjzYyHOj4c4P7GlqMFV6zvlarWr165Ru2btWrVr165Tu65Rg929Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgqgEPi68WYLx6gPEaAcZrBhivFWC8doDxOgHG64ZEDa6zM02fDHg8vHF+KsT56RDnZ0Kcnw1xfi7E+fkQ5xdCnF/cUtTgevWdcv3aDWo3rN2oduPaTWo3rd3MqMHuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcL2Ah8XXDzDeIMB4wwDjjQKMNw4w3iTAeNMA481CogbX3ZmmLwU8Ht44vxzi/EqI86shzq+FOL8e4vxGiPObIc5vbSlqsKrvlHXt5rVb1G5Zu1Xt1rXb1G5r1GB3r1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1WAU8LF4HGG8eYLxFgPGWAcZbBRhvHWC8TYDxtiFRg+vtTNO3Ax4Pb5zfCXF+N8T5vRDn90OcPwhx/jDE+aMQ54+3FDW4XX2n3L52h9oda3eq3bl2l9pda3czarC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsa3C7gYfHtA4x3CDDeMcB4pwDjnQOMdwkw3jXAeLeQqMH1d6bpJwGPhzfOn4Y4fxbi/HmI8xchzl+GOH8V4vx1iPM3W4oa3L2+U+5Ru2ftXrV71+5Tu2/tfrX7GzXY3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDe4e8LD4HgHGewYY7xVgvHeA8T4BxvsGGO8XYLx/SNTgBjvT9NuAx8Mb5+9CnL8Pcf4hxPnHEOefQpx/DnH+JcT51y1FDR5Q3ykPrD2o9uDaQ2oPrT2s9vDaI4wa7O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogYPCHhY/MAA44MCjA8OMD4kwPjQAOPDAowPDzA+IiRqcMOdafpbwOPhjfPvIc5/hDj/GeL8V4jz4BDnv0Och4Q4D91S1OCR9Z3yqNqja4+pPbb2uNrja0+oPdGowe5eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrwyICHxY8KMD46wPiYAONjA4yPCzA+PsD4hADjE0OiBjfamabDAh4Pb5yHhzj/E+L8b4jziBDndGCG8yghzqOGOI820Pl/P/ufVN8pT649pfbU2tNqT689o/bM2rOMGuzuNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGTwp4WPzkAONTAoxPDTA+LcD49ADjMwKMzwwwPiskanDjnWk6esDj4Y3zGCHOY4Y4jxXiPHaI8zghzuOGOI8X4txvS1GDZ9d3ynNqz609r/b82gtqL6y9qPZiowa7e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowbMDHhY/J8D43ADj8wKMzw8wviDA+MIA44sCjC8OiRrcZGea9g94PLxxHhDiPDDEeVCI8/ghzhOEOE8Y4jxRiPPEW4oavKS+U15ae1nt5bVX1F5Ze1Xt1bXXGDXY3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDV4S8LD4pQHGlwUYXx5gfEWA8ZUBxlcFGF8dYHxNSNTgpjvTdJKAx8Mb50lDnCcLcZ48xHmKEOcpQ5ynCnGeOsR5mi1FDV5b3ymvq72+9obaG2tvqr259pbaW40a7O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogavDXhY/LoA4+sDjG8IML4xwPimAOObA4xvCTC+NSRqcLOdaTptwOPhjfN0Ic5ZiHMe4jx9iPMMIc4zhjjPFOI885aiBm+r75S3195Re2ftXbV3195Te2/tfUYNdvcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYO3BTwsfnuA8R0BxncGGN8VYHx3gPE9Acb3BhjfFxI1WO1M01kCHg9vnGcNcZ4txHn2EOc5QpznDHHuCXHuhDjblqIG76/vlA/UPlj7UO3DtY/UPlr7WO3jRg129xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg/cHPCz+QIDxgwHGDwUYPxxg/EiA8aMBxo8FGD8eEjVY70zTuQIeD2+c5w5xnifEed4Q5/lCnOcPcV4gxHnBEOeFthQ1+ER9p3yy9qnap2ufqX229rna52tfMGqwu9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGnwi4GHxJwOMnwowfjrA+JkA42cDjJ8LMH4+wPiFkKjBzXem6cIBj4c3zouEOC8a4rxYiPPiIc5LhDj3hjgXIc7llqIGX6zvlC/Vvlz7Su2rta/Vvl77Ru2bRg129xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRgy8GPCz+UoDxywHGrwQYvxpg/FqA8esBxm8EGL8ZEjW4xc40XTLg8fDGeakQ56VDnJcJcV42xHm5EOflQ5xXCHFecUtRg2/Vd8q3a9+pfbf2vdr3az+o/bD2I6MGu3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMG3Ah4WfzvA+J0A43cDjN8LMH4/wPiDAOMPA4w/Coka3HJnmq4U8Hh447xyiPMqIc6rhjivFuK8eojzGiHOa4Y4r7WlqMGP6zvlJ7Wf1n5W+3ntF7Vf1n5V+7VRg929Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgxwEPi38SYPxpgPFnAcafBxh/EWD8ZYDxVwHGX4dEDW61M03XDng8vHFeJ8R53RDn9UKc1w9x3iDEecMQ541CnDfeUtTgN/Wd8tva72q/r/2h9sfan2p/rv3FqMHuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8JuAh8W/DTD+LsD4+wDjHwKMfwww/inA+OcA419Coga33pmmmwQ8Ht44bxrivFmIcxXiXIc4bx7ivEWI85YhzlttKWrw1/pO+Vvt77V/1P5Z+1ft4Nq/a4cYNdjda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUN/hrwsPhvAca/Bxj/EWD8Z4DxXwHGgwOM/w4wHhISNbjNzjTdOuDx8MZ5mxDnbUOctwtx3j7EeYcQ5x1DnHcKcd55S1GDQ+s75bDa4bX/1P5bO2LzBw2Xqv+72lE3fzhg1ODIvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4NCAh8WHBRgPDzD+J8D43wDjEQHGzQPJfd14lADjUS815vOcdt52Z5ruEvB4eOO8a4jzbiHOu4c47xHivGeI814hznuHOO+zpajB0eo75ei1Y9SOWTtW7di149SOWzueUYPdvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4GgBD4uPHmA8RoDxmAHGYwUYjx1gPE6A8bgBxuOFRA1utzNN9w14PLxx3i/Eef8Q5wNCnA8McT4oxPngEOdDQpwP3VLUYL/6Ttm/dkDtwNpBtePXTlA7Ye1ERg129xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg/0CHhbvH2A8IMB4YIDxoADj8QOMJwgwnjDAeKKQqMHtd6bpYQGPhzfOh4c4HxHifGSI81EhzkeHOB8T4nxsiPNxW4oanLi+U05SO2ntZLWT105RO2XtVLVTGzXY3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDU4c8LD4JAHGkwYYTxZgPHmA8RQBxlMGGE8VYDx1SNTgDjvT9PiAx8Mb5xNCnE8McT4pxPnkEOdTQpxPDXE+LcT59C1FDU5T3ymnrZ2uNqvNa6evnaF2xtqZjBrs7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBqcJeFh82gDj6QKMswDjPMB4+gDjGQKMZwwwnikkanDHnWl6RsDj4Y3zmSHOZ4U4nx3ifE6I87khzueFOJ8f4nzBlqIGZ67vlLPUzlo7W+3stXPUzlnbU9sxarC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsanDngYfFZAoxnDTCeLcB49gDjOQKM5www7gkw7oREDe60M00vDHg8vHG+KMT54hDnS0KcLw1xvizE+fIQ5ytCnK/cUtSg1XfK5o8Dzl07T+28tfPVzl+7QO2CRg129xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRgxbwsPhcAcZzBxjPE2A8b4DxfAHG8wcYLxBgvGBI1ODOO9P0qoDHwxvnq0OcrwlxvjbE+boQ5+tDnG8Icb4xxPmmLUUNLlTfKReuXaR20drFahevXWLzXVNbGDXY3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDS4U8LD4wgHGiwQYLxpgvFiA8eIBxksEGPcGGBchUYO77EzTmwMeD2+cbwlxvjXE+bYQ59tDnO8Icb4zxPmuEOe7txQ1WNZ3yiVrl6pdunaZ2mVrl6tdvnYFowa7e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowTLgYfElA4yXCjBeOsB4mQDjZQOMlwswXj7AeIWQqMFdd6bpPQGPhzfO94Y43xfifH+I8wMhzg+GOD8U4vxwiPMjW4oaXLG+U65Uu3LtKrWr1q5Wu3rtGrVrGjXY3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDa4Y8LD4SgHGKwcYrxJgvGqA8WoBxqsHGK8RYLxmSNTgbjvT9NGAx8Mb58dCnB8PcX4ixPnJEOenQpyfDnF+JsT52S1FDa5V3ynXrl2ndt3a9WrXr92gdsPajYwa7O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogbXCnhYfO0A43UCjNcNMF4vwHj9AOMNAow3DDDeKCRqcPedafpcwOPhjfPzIc4vhDi/GOL8UojzyyHOr4Q4vxri/NqWogY3ru+Um9RuWrtZbVVb125eu0XtlkYNdvcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYMbBzwsvkmA8aYBxpsFGFcBxnWA8eYBxlsEGG8ZEjW4x840fT3g8fDG+Y0Q5zdDnN8KcX47xPmdEOd3Q5zfC3F+f0tRg1vVd8qta7ep3bZ2u9rta3eo3bF2J6MGu3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMGtAh4W3zrAeJsA420DjLcLMN4+wHiHAOMdA4x3Coka3HNnmn4Q8Hh44/xhiPNHIc4fhzh/EuL8aYjzZyHOn4c4f7GlqMGd6zvlLrW71u5Wu3vtHrV71u5Vu7dRg929Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgzgEPi+8SYLxrgPFuAca7BxjvEWC8Z4DxXgHGe4dEDe61M02/DHg8vHH+KsT56xDnb0Kcvw1x/i7E+fsQ5x9CnH/cUtTgPvWdct/a/Wr3rz2g9sDag2oPrj3EqMHuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcJ+Ah8X3DTDeL8B4/wDjAwKMDwwwPijA+OAA40NCogb33pmmPwU8Ht44/xzi/EuI868hzr+FOP8e4vxHiPOfIc5/bSlq8ND6TnlY7eG1R9QeWXtU7dG1x9Qea9Rgd69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNXhowMPihwUYHx5gfESA8ZEBxkcFGB8dYHxMgPGxIVGD++xM08EBj4c3zn+HOA8JcR4a4jwsxHl4iPM/Ic7/hjiP2FLU4HH1nfL42hNqT6w9qfbk2lNqT609zajB7l6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavC4gIfFjw8wPiHA+MQA45MCjE8OMD4lwPjUAOPTQqIG9938gd9B0/+ONNPOo4Q4jxriPFqI8+ghzmOEOI8Z4jxWiPPYA53/97P/6fWd8ozaM2vPqj279pzac2vPqz3fqMHuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8PSAh8XPCDA+M8D4rADjswOMzwkwPjfA+LwA4/NDogb326mffdD0vyPNtPO4Ic7jhTj3C3HuH+I8IMR5YIjzoBDn8bcUNXhBfae8sPai2otrL6m9tPay2strrzBqsLvXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixq8IOBh8QsDjC8KML44wPiSAONLA4wvCzC+PMD4ipCowf13pukEB03/O9JMO08Y4jxRiPPEIc6ThDhPGuI8WYjz5CHOU2wpavDK+k55Ve3VtdfUXlt7Xe31tTfU3mjUYHevUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjV4ZcDD4lcFGF8dYHxNgPG1AcbXBRhfH2B8Q4DxjSFRgwfsTNMpD5r+d6SZdp4qxHnqEOdpQpynDXGeLsQ5C3HOQ5yn31LU4E31nfLm2ltqb629rfb22jtq76y9y6jB7l6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavCmgIfFbw4wviXA+NYA49sCjG8PML4jwPjOAOO7QqIGD9yZpjMcNP3vSDPtPGOI80whzjOHOM8S4jxriPNsIc6zhzjPsaWowbvrO+U9tffW3ld7f+0DtQ/WPlT7sFGD3b1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1ODdAQ+L3xNgfG+A8X0BxvcHGD8QYPxggPFDAcYPh0QNHrQzTec8aPrfkWbauSfEuRPibCHOc4U4zx3iPE+I87whzvNtKWrwkfpO+WjtY7WP1z5R+2TtU7VP1z5j1GB3r1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1+EjAw+KPBhg/FmD8eIDxEwHGTwYYPxVg/HSA8TMhUYMH70zT+Q+a/nekmXZeIMR5wRDnhUKcFw5xXiTEedEQ58VCnBffUtTgs/Wd8rna52tfqH2x9qXal2tfqX3VqMHuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1+P+v9Z1RA8ho1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsafDbgYfHnAoyfDzB+IcD4xQDjlwKMXw4wfiXA+NWQqMFDdqbpEgdN/zvSTDv3hjgXIc5liPOSIc5LhTgvHeK8TIjzsluKGnytvlO+XvtG7Zu1b9W+XftO7bu17xk12N1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ2+FvCw+OsBxm8EGL8ZYPxWgPHbAcbvBBi/G2D8XkjU4KE703S5g6b/HWmmnZcPcV4hxHnFEOeVQpxXDnFeJcR51RDn1bYUNfh+faf8oPbD2o9qP679pPbT2s9qPzdqsLvXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixp8P+Bh8Q8CjD8MMP4owPjjAONPAow/DTD+LMD485CowcN2punqB03/O9JMO68R4rxmiPNaIc5rhzivE+K8bojzeiHO628pavCL+k75Ze1XtV/XflP7be13td/X/mDUYHevUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjX4RcDD4l8GGH8VYPx1gPE3AcbfBhh/F2D8fYDxDyFRg4fvTNMNDpr+d6SZdt4wxHmjEOeNQ5w3CXHeNMR5sxDnKsS53lLU4I/1nfKn2p9rf6n9tfa32t9r/6j906jB7l6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavDHgIfFfwow/jnA+JcA418DjH8LMP49wPiPAOM/Q6IGj9iZppsfNP3vSDPtvEWI85YhzluFOG8d4rxNiPO2Ic7bhThvv6Wowb/qO+Xg2r9rh9QOrR1WO7z2n9p/jRrs7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBv8KeFh8cIDx3wHGQwKMhwYYDwswHh5g/E+A8b8hUYNH7kzTHQ6a/nekmXbeMcR5pxDnnUOcdwlx3jXEebcQ591DnPfYUtTgiM0fBtR/eD9K7ai1o9WOXjtG7Zi1Y23+o7xRgyP3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDIwIeFm8egO3rxqMEGI8aYDxagPHoAcZjBBiPGWA81qXHfJ7TzkftTNM9D5r+d6SZdt4rxHnvEOd9Qpz3DXHeL8R5/xDnA0KcD9xS1ODY9Z1ynNpxa8er7Vfbv3ZA7cDaQUYNdvcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNjBzwsPk6A8bgBxuMFGPcLMO4fYDwgwHhggPGgkKjBo3em6UEHTf870kw7HxzifEiI86EhzoeFOB8e4nxEiPORIc5HbSlqcPz6TjlB7YS1E9VOXDtJ7aS1k9VObtRgd69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNTh+wMPiEwQYTxhgPFGA8cQBxpMEGE8aYDxZgPHkIVGDx+xM06MPmv53pJl2PibE+dgQ5+NCnI8PcT4hxPnEEOeTQpxP3lLU4BT1nXLK2qlqp66dpnba2ulqs9rcqMHuXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcIqAh8WnDDCeKsB46gDjaQKMpw0wni7AOAswzkOiBo/dmaanHDT970gz7XxqiPNpIc7/j517Cnp+S9cunra7V9tI2nxm20jatpm0bdu2bdu2bbuXbeu7U19V1z7ZOZljpvZVNe6q63TVr3Lw/g+eNcdrQ5yvC3G+PsT5hhDnG0Ocb9pS1ODC9U25SO2itYvVLl67RO2StUvVLm3UYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjNMA4CzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBxgXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGZYBxFWBMixpcOOBh8UUCjBcNMF4swHjxAOMlAoyXDDBeKsB46ZCowUt2JpM37zL575Fm2vmWEOdbQ5xvC3G+PcT5jhDnO0Oc7wpxvntLUYPL1DflsrXL1XZqrbb+Q/wValesXcmowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjW4TMDD4ssGGC8XYNwJMLYA4+UDjFcIMF4xwHilkKjBS3cmk/fsMvnvkWba+d4Q5/tCnO8PcX4gxPnBEOeHQpwfDnF+ZEtRgyvXN+UqtavWrla7eu0atWvWrlW7tlGDzV6jBozRqMH/v9Z3Rg0go1EDxmjUwKhB67xRRqMGjHEaYJwFGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4DjIsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMywLgKMKZFDa4c8LD4KgHGqwYYrxZgvHqA8RoBxmsGGK8VYLx2SNTgZTuTyUd3mfz3SDPt/FiI8+Mhzk+EOD8Z4vxUiPPTIc7PhDg/u6WowXXqm3Ld9XelNq8tatev3aB2w9qNjBps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wGGGcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjPMA4yLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgMMK4CjGlRg+sEPCy+boDxegHGeYBxEWC8foDxBgHGGwYYbxQSNXj5zmTyuV0m/z3STDs/H+L8QojziyHOL4U4vxzi/EqI86shzq9tKWpw4/qm3KR209rNajev3aJ2y9qtarc2arDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRpgnAUYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgOMiwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zLAuAowpkUNbhzwsPgmAcabBhhvFmC8eYDxFgHGWwYYbxVgvHVI1OAVO5PJ13eZ/PdIM+38RojzmyHOb4U4vx3i/E6I87shzu+FOL+/pajBbeqbctva7Wq3r92hdsfanWp3rt3FqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxmmAcRZgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOA8wLgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjMsA4yrAmBY1uE3Aw+LbBhhvF2C8fYDxDgHGOwYY7xRgvHOA8S4hUYNX7kwmP9hl8t8jzbTzhyHOH4U4fxzi/EmI86chzp+FOH8e4vzFlqIGd61vyt1qd6/do3bP2r1q967dp7Y0arDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRpgnAUYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgOMiwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zLAuAowpkUN7hrwsPhuAca7BxjvEWC8Z4DxXgHGewcY7xNgXIZEDV61M5n8cpfJf480085fhTh/HeL8TYjztyHO34U4fx/i/EOI849bihqs6pty39r9avevPaD2wNqDag+uPcSowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjVYBTwsvm+A8X4BxvsHGB8QYHxggPFBAcYHBxgfEhI1ePXOZPKnXSb/PdJMO/8c4vxLiPOvIc6/hTj/HuL8R4jznyHOf20pavDQ+qY8rPbw2iNqj6w9qvbo2mNqjzVqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxGmCcBRiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOA4yLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjMsC4CjCmRQ0eGvCw+GEBxocHGB8RYHxkgPFRAcZHBxgfE2B8bEjU4DU7k8m/d5n890gz7fxPiHPXEOduIc7dQ5x7hDj3DHHuFeLce0tRg8fVN+XxtSfUnlh7Uu3JtafUnlp7mlGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIzTAOMswGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEeYFwEGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiXAcZVgDEtavC4gIfFjw8wPiHA+MQA45MCjE8OMD4lwPjUAOPTQqIGr92ZTPbZZfLfI820c98Q534hzv1DnAeEOA8McR4U4jw4xHnIlqIGT69vyjNqz6w9q/bs2nNqz609r/Z8owabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGKcBxlmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zzAuAgwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4DjKsAY1rU4OkBD4ufEWB8ZoDxWQHGZwcYnxNgfG6A8XkBxueHRA1etzOZHLrL5L9HmmnnYSHOw0OcR4Q4jwxxHhXiPDrEeUyI89gtRQ1eUN+UF9ZeVHtx7SW1l9ZeVnt57RVGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBCwIeFr8wwPiiAOOLA4wvCTC+NMD4sgDjywOMrwiJGrx+ZzI5bpfJf480087jQ5wnhDhPDHFOzpzhPEmI86QhzpOFOE8+0Pk//+1/ZX1TXlV7de01tdfWXld7fe0NtTcaNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGrwx4WPyqAOOrA4yvCTC+NsD4ugDj6wOMbwgwvjEkavCGncnkFAGPh9fOU4Y4TxXiPHWI8zQhztOGOE8X4jx9iPMMW4oavKm+KW+uvaX21trbam+vvaP2ztq7jBps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wGGGcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjPMA4yLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgMMK4CjGlRgzcFPCx+c4DxLQHGtwYY3xZgfHuA8R0BxncGGN8VEjV4485kcsaAx8Nr55lCnLuEOM8c4jxLiPOsIc6zhTjPHuI8x5aiBu+ub8p7au+tva/2/toHah+sfaj2YaMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBinAcZZgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOM8wLgIMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuA4yrAGNa1ODdAQ+L3xNgfG+A8X0BxvcHGD8QYPxggPFDAcYPh0QN3rQzmZwz4PHw2nmuEOe5Q5znCXGeN8R5vhDn+UOcFwhxXnBLUYOP1Dflo7WP1T5e+0Ttk7VP1T5d+4xRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWrwkYCHxR8NMH4swPjxAOMnAoyfDDB+KsD46QDjZ0KiBm/emUwuFPB4eO2chjhnIc4LhzgvEuK8aIjzYiHOi4c4L7GlqMFn65vyudrna1+ofbH2pdqXa1+pfdWowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjX4bMDD4s8FGD8fYPxCgPGLAcYvBRi/HGD8SoDxqyFRg7fsTCaXDHg8vHZeKsR56RDnZUKclw1xXi7EuRPibCHOy28pavC1+qZ8vfaN2jdr36p9u/ad2ndr3zNqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxGmCcBRiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOA4yLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjMsC4CjCmRQ2+FvCw+OsBxm8EGL8ZYPxWgPHbAcbvBBi/G2D8XkjU4K07k8kVAh4Pr51XDHFeKcR55RDnVUKcVw1xXi3EefUQ5zW2FDX4fn1TflD7Ye1HtR/XflL7ae1ntZ8bNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IG3w94WPyDAOMPA4w/CjD+OMD4kwDjTwOMPwsw/jwkavC2ncnkmgGPh9fOa4U4rx3ivE6I87ohzuuFOOchzkWI8/pbihr8or4pv6z9qvbr2m9qv639rvb72h+MGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDXwQ8LP5lgPFXAcZfBxh/E2D8bYDxdwHG3wcY/xASNXj7zmRyg4DHw2vnDUOcNwpx3jjEeZMQ501DnDcLcd48xHmLLUUN/ljflD/V/lz7S+2vtb/V/l77R+2fRg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4DjLMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxnmAcRFgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wGGFcBxrSowR8DHhb/KcD45wDjXwKMfw0w/i3A+PcA4z8CjP8MiRq8Y2cyuWXA4+G181YhzluHOG8T4rxtiPN2Ic7bhzjvEOK845aiBv+qb8q/a/+p7VrbrbZ7bY/anrW9jBps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wGGGcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjPMA4yLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgMMK4m//eNaVGDfwU8LP53gPE/AcZdA4y7BRh3DzDuEWDcM8C4V0jU4J07k8mdAh4Pr513DnHeJcR51xDn3UKcdw9x3iPEec8Q5722FDXYu74p+9T2re1X2792QO3A2kG1g40abPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBhhnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzzAOMiwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DDCuAoxpUYO9Ax4W7xNg3DfAuF+Acf8A4wEBxgMDjAcFGA8OiRq8a2cyuXfA4+G18z4hzmWIcxXivG+I834hzvuHOB8Q4nzglqIGh9Q35dDaYbXDa0fUjqwdVTu6doxRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWpwSMDD4kMDjIcFGA8PMB4RYDwywHhUgPHoAOMxIVGDd+9MJg8KeDy8dj44xPmQEOdDQ5wPC3E+PMT5iBDnI0Ocj9pS1ODY+qYcVzu+dkLtxPUf4euP3CepnbR2svUfvI0a/O9eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWpwbMDD4uMCjMcHGE8IMJ4YYFw/QPy/bjxJgPGkAcaT3WjMv+e08z07k8mjAx4Pr52PCXE+NsT5uBDn40OcTwhxPjHE+aQQ55O3FDU4eX1TTlE7Ze1UtVPXTlM7be10tdMbNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGJw94WHyKAOMpA4ynCjCeOsB4mgDjaQOMpwswnj4kavDencnkKQGPh9fOp4Y4nxbifHqI8xkhzmeGOJ8V4nx2iPM5W4oanKG+KWesnam2S+3MtbPUzlo7W+3sRg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4DjLMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxnmAcRFgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wGGFcBxrSowRkCHhafMcB4pgDjLgHGMwcYzxJgPGuA8WwBxrOHRA3etzOZPDfg8fDa+bwQ5/NDnC8Icb4wxPmiEOeLQ5wvCXG+dEtRg3PUN+WctXPVzl07T+28tfPVzl+7gFGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIzTAOMswGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEeYFwEGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiXAcZVgDEtanCOgIfF5wwwnivAeO4A43kCjOcNMJ4vwHj+AOMFQqIG79+ZTF4W8Hh47Xx5iPMVIc5XhjhfFeJ8dYjzNSHO14Y4X7elqMEF65tyodq0NqtduHaR2kVrF6td3KjBZq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZpgHEWYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgPMC4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzLAOMqwJgWNbhgwMPiCwUYpwHGWYDxwgHGiwQYLxpgvFiA8eIhUYMP7Ewmrw94PLx2viHE+cYQ55tCnG8Ocb4lxPnWEOfbQpxv31LU4BL1Tblk7VK1S9cuU7ts7XK1nVozarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRpgnAUYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgOMiwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zLAuAowpkUNLhHwsPiSAcZLBRgvHWC8TIDxsgHGywUYdwKMLSRq8MGdyeQdAY+H1853hjjfFeJ8d4jzPSHO94Y43xfifH+I8wNbihqs/6B9hdoVa1eqXbl2ldpVa1erXd2owWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjW4fMDD4isEGK8YYLxSgPHKAcarBBivGmC8WoDx6iFRgw/tTCYfDHg8vHZ+KMT54RDnR0KcHw1xfizE+fEQ5ydCnJ/cUtTgGvVNuWbtWrVr165Tu+76O1Ob1xZGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBNQIeFl8zwHitAOO1A4zXCTBeN8B4vQDjPMC4CIkafHhnMvlUwOPhtfPTIc7PhDg/G+L8XIjz8yHOL4Q4vxji/NKWogbXr2/KDWo3rN2oduPaTWo3rd2sdnOjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTg+gEPi28QYLxhgPFGAcYbBxhvEmC8aYDxZgHGm4dEDT6yM5l8OeDx8Nr5lRDnV0OcXwtxfj3E+Y0Q5zdDnN8KcX57S1GDW9Q35Za1W9VuXbtN7ba129VuX7uDUYPNXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjNMA4yzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcR5gXAQYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGJcBxlWAMS1qcIuAh8W3DDDeKsB46wDjbQKMtw0w3i7AePsA4x1CogYf3ZlMvhPweHjt/G6I83shzu+HOH8Q4vxhiPNHIc4fhzh/sqWowR3rm3Kn2p1rd6ndtXa32t1r96jd06jBZq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZpgHEWYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgPMC4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzLAOMqwJgWNbhjwMPiOwUY7xxgvEuA8a4BxrsFGO8eYLxHgPGeIVGDj+1MJj8NeDy8dv4sxPnzEOcvQpy/DHH+KsT56xDnb0Kcv91S1OBe9U25d+0+tWVtVbtv7X61+9ceYNRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOM0wDgLMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wHGBcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZlgHEVYEyLGtwr4GHxvQOM9wkwLgOMqwDjfQOM9wsw3j/A+ICQqMHHdyaT3wU8Hl47fx/i/EOI848hzj+FOP8c4vxLiPOvIc6/bSlq8MD6pjyo9uDaQ2oPrT2s9vDaI2qPNGqw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEaYJwFGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4DjIsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMywLgKMKZFDR4Y8LD4QQHGBwcYHxJgfGiA8WEBxocHGB8RYHxkSNTgEzuTyd8DHg+vnf8Icf4zxPmvEOe/Q5z/CXHuGuLcLcS5+5aiBo+qb8qja4+pPbb2uNrja0+oPbH2JKMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBinAcZZgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOM8wLgIMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuA4yrAGNa1OBRAQ+LHx1gfEyA8bEBxscFGB8fYHxCgPGJAcYnhUQNPrkzmewR8Hh47dwzxLlXiHPvEOc+Ic59Q5z7hTj3D3EesKWowZPrm/KU2lNrT6s9vfaM2jNrz6o926jBZq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZpgHEWYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgPMC4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzLAOMqwJgWNXhywMPipwQYnxpgfFqA8ekBxmcEGJ8ZYHxWgPHZIVGDT+1MJgcGPB5eOw8KcR4c4jwkxHloiPOwEOfhIc4jQpxHbilq8Jz6pjy39rza82svqL2w9qLai2svMWqw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEaYJwFGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4DjIsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMywLgKMKZFDZ4T8LD4uQHG5wUYnx9gfEGA8YUBxhcFGF8cYHxJSNTg0zuTyVEBj4fXzqNDnMeEOI8NcR4X4jw+xHlCiPPEEOf/fLxJO//nv/0vrW/Ky2ovr72i9sraq2qvrr2m9lqjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTgpQEPi18WYHx5gPEVAcZXBhhfFWB8dYDxNQHG14ZEDT6zU//NgY9ySedJQ5wnC3GePMR5ihDnKUOcpwpxnjrEeZotRQ1eV9+U19feUHtj7U21N9feUntr7W1GDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjB6wIeFr8+wPiGAOMbA4xvCjC+OcD4lgDjWwOMbwuJGnx2ZzI5bcDj4bXzdCHO04c4zxDiPGOI80whzl1CnGcOcZ5lS1GDt9c35R21d9beVXt37T2199beV3u/UYPNXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjNMA4yzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcR5gXAQYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGJcBxlWAMS1q8PaAh8XvCDC+M8D4rgDjuwOM7wkwvjfA+L4A4/tDogaf25lMzhrweHjtPFuI8+whznOEOM8Z4jxXiPPcIc7zhDjPu6WowQfqm/LB2odqH659pPbR2sdqH699wqjBZq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZpgHEWYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgPMC4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzLAOMqwJgWNfhAwMPiDwYYPxRg/HCA8SMBxo8GGD8WYPx4gPETIVGDz+9MJucLeDy8dp4/xHmBEOcFQ5wXCnFOQ5yzEOeFQ5wX2VLU4JP1TflU7dO1z9Q+W/tc7fO1L9S+aNRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOM0wDgLMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wHGBcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZlgHEVYEyLGnwy4GHxpwKMnw4wfibA+NkA4+cCjJ8PMH4hwPjFkKjBF3Ymk4sGPB5eOy8W4rx4iPMSIc5LhjgvFeK8dIjzMiHOy24pavCl+qZ8ufaV2ldrX6t9vfaN2jdr3zJqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxGmCcBRiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOA4yLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjMsC4CjCmRQ2+FPCw+MsBxq8EGL8aYPxagPHrAcZvBBi/GWD8VkjU4Is7k8nlAh4Pr507Ic4W4rx8iPMKIc4rhjivFOK8cojzKluKGny7vinfqX239r3a92s/qP2w9qPaj40abPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBhhnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzzAOMiwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DDCuAoxpUYNvBzws/k6A8bsBxu8FGL8fYPxBgPGHAcYfBRh/HBI1+NLOZHLVgMfDa+fVQpxXD3FeI8R5zRDntUKc1w5xXifEed0tRQ1+Ut+Un9Z+Vvt57Re1X9Z+Vft17TdGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBTwIeFv80wPizAOPPA4y/CDD+MsD4qwDjrwOMvwmJGnx5p/5bAY+H1855iHMR4rx+iPMGIc4bhjhvFOK8cYjzJluKGvy2vim/q/2+9ofaH2t/qv259pfaX40abPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBhhnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzzAOMiwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DDCuAoxpUYPfBjws/l2A8fcBxj8EGP8YYPxTgPHPAca/BBj/GhI1+MrOZHLTgMfDa+fNQpw3D3HeIsR5yxDnrUKctw5x3ibEedstRQ3+Vt+Uv9f+Uftn7V+1f9f+U9u1tptRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWrwt4CHxX8PMP4jwPjPAOO/Aoz/DjD+J8C4a4Bxt5CowVd3JpPbBTweXjtvH+K8Q4jzjiHOO4U47xzivEuI864hzrttKWqwe31T9qjtWdurtndtn9q+tf1q+xs12Ow1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4DTDOAoxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBjnAcZFgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxGWBcBRjToga7Bzws3iPAuGeAca8A494Bxn0CjPsGGPcLMO4fEjX42s5kcveAx8Nr5z1CnPcMcd4rxHnvEOd9QpzLEOcqxHnfLUUNDqhvyoG1g2oH1w6pHVo7rHZ47QijBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTggICHxQcGGA8KMB4cYDwkwHhogPGwAOPhAcYjQqIGX9+ZTO4X8Hh47bx/iPMBIc4HhjgfFOJ8cIjzISHOh4Y4H7alqMGR9U05qnZ07ZjasbXjasfXTqidaNRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOM0wDgLMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wHGBcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZlgHEVYEyLGhwZ8LD4qADj0QHGYwKMxwYYjwswHh9gPCHAeGJI1OAbO5PJwwMeD6+djwhxPjLE+agQ56NDnI8JcT42xPm4EOfjtxQ1mNQfi09SO2ntZLWT105RO2XtVLVTr/+YbNTgf/caNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBhhnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1+P/X+s6oAWQ0asAYjRowRqMGjHEeYFwEGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiXAcZVgDEtarB+YPV//Tc9SYDxpAHGkwUYTx5gPEWA8ZQBxlMFGE994zH/ntPOb+5MJk8IeDy8dj4xxPmkEOeTQ5xPCXE+NcT5tBDn00Ocz9hS1OA09U05be10tdPXzlA7Y+1MtV1qZzZqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxGmCcBRiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOA4yLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjMsC4CjCmRQ1OE/Cw+LQBxtMFGE8fYDxDgPGMAcYzBRh3CTCeOSRq8K2dyeSZAY+H185nhTifHeJ8TojzuSHO54U4nx/ifEGI84Vbihqcpb4pZ62drXb22jlq56ydq3bu2nmMGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDswQ8LD5rgPFsAcazBxjPEWA8Z4DxXAHGcwcYzxMSNfj2zmTyooDHw2vni0OcLwlxvjTE+bIQ58tDnK8Icb4yxPmqLUUNzlvflPPVzl+7QO2CtQvVprVZ7cJGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBeQMeFp8vwHj+AOMFAowXDDBeKMA4DTDOAowXDokafGdnMnl1wOPhtfM1Ic7XhjhfF+J8fYjzDSHON4Y43xTifPOWogYXqW/KRWsXq128donaJWuXql26dhmjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTgIgEPiy8aYLxYgPHiAcZLBBgvGWC8VIDx0gHGy4REDb67M5m8JeDx8Nr51hDn20Kcbw9xviPE+c4Q57tCnO8Ocb5nS1GDy9Y35XK1nVqrrf94fIXaFWtXql3ZqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxmmAcRZgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOA8wLgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjMsA4yrAmBY1uGzAw+LLBRh3AowtwHj5AOMVAoxXDDBeKcB45ZCowfd2JpP3BjweXjvfF+J8f4jzAyHOD4Y4PxTi/HCI8yMhzo9uKWpwlfqmXLV2tdrVa9eoXbN2rdq1a9cxarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRpgnAUYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgOMiwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zLAuAowpkUNrhLwsPiqAcarBRivHmC8RoDxmgHGawUYrx1gvE5I1OD7O5PJxwIeD6+dHw9xfiLE+ckQ56dCnJ8OcX4mxPnZEOfnthQ1uO76m1Kb1xa169duULth7Ua1Gxs12Ow1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4DTDOAoxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBjnAcZFgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxGWBcBRjTogbXDXhYfL0A4zzAuAgwXj/AeIMA4w0DjDcKMN44JGrwg53J5PMBj4fXzi+EOL8Y4vxSiPPLIc6vhDi/GuL8Wojz61uKGtykvik3rd2sdvPaLWq3rN2qduvabYwabPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBhhnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzzAOMiwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DDCuAoxpUYObBDwsvmmA8WYBxpsHGG8RYLxlgPFWAcZbBxhvExI1+OHOZPKNgMfDa+c3Q5zfCnF+O8T5nRDnd0Oc3wtxfj/E+YMtRQ1uW9+U29VuX7tD7Y61O9XuXLtL7a5GDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBbQMeFt8uwHj7AOMdAox3DDDeKcB45wDjXQKMdw2JGvxoZzL5YcDj4bXzRyHOH4c4fxLi/GmI82chzp+HOH8R4vzllqIGd6tvyt1r96jds3av2r1r96ktayujBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTgbgEPi+8eYLxHgPGeAcZ7BRjvHWC8T4BxGWBchUQNfrwzmfwq4PHw2vnrEOdvQpy/DXH+LsT5+xDnH0Kcfwxx/mlLUYP71jflfrX71x5Qe2DtQbUH1x5Se6hRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWpw34CHxfcLMN4/wPiAAOMDA4wPCjA+OMD4kADjQ0OiBj/ZmUz+HPB4eO38S4jzryHOv4U4/x7i/EeI858hzn+FOP+9pajBw+qb8vDaI2qPrD2q9ujaY2qPrT3OqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxmmAcRZgNGrAGI0aMEajBv//Wt8ZNYCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGDwt4WPzwAOMjAoyPDDA+KsD46ADjYwKMjw0wPi4kavDTncnkPwGPh9fOXUOcu4U4dw9x7hHi3DPEuVeIc+8Q5z5biho8vr4pT6g9sfak2pNrT6k9tfa02tONGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDxwc8LH5CgPGJAcYnBRifHGB8SoDxqQHGpwUYnx4SNfjZzmSyb8Dj4bVzvxDn/iHOA0KcB4Y4DwpxHhziPCTEeeiWogbPqG/KM2vPqj279pzac2vPqz2/9gKjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTgGQEPi58ZYHxWgPHZAcbnBBifG2B8XoDx+QHGF4REDX6+M5kcFvB4eO08PMR5RIjzyBDnUSHOo0Ocx4Q4jw1xHrelqMEL65vyotqLay+pvbT2strLa6+ovdKowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjV4YcDD4hcFGF8cYHxJgPGlAcaXBRhfHmB8RYDxlSFRg1/sTCbHBzweXjtPCHGeGOKcnDXDeZIQ50lDnCcLcZ48xHmKgc7/+W//q+qb8uraa2qvrb2u9vraG2pvrL3JqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxmmAcRZgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOA8wLgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjMsA4yrAmBY1eFXAw+JXBxhfE2B8bYDxdQHG1wcY3xBgfGOA8U0hUYNf7kwmpwx4PLx2nirEeeoQ52lCnKcNcZ4uxHn6EOcZQpxn3FLU4M31TXlL7a21t9XeXntH7Z21d9XebdRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOM0wDgLMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wHGBcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZlgHEVYEyLGrw54GHxWwKMbw0wvi3A+PYA4zsCjO8MML4rwPjukKjBr3YmkzMFPB5eO3cJcZ45xHmWEOdZQ5xnC3GePcR5jhDnObcUNXhPfVPeW3tf7f21D9Q+WPtQ7cO1jxg12Ow1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4DTDOAoxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBjnAcZFgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxGWBcBRjTogbvCXhY/N4A4/sCjO8PMH4gwPjBAOOHAowfDjB+JCRq8OudyeRcAY+H185zhzjPE+I8b4jzfCHO84c4LxDivGCI80Jbihp8tL4pH6t9vPaJ2idrn6p9uvaZ2meNGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDjwY8LP5YgPHjAcZPBBg/GWD8VIDx0wHGzwQYPxsSNfjNzmQyDXg8vHbOQpwXDnFeJMR50RDnxUKcFw9xXiLEecktRQ0+V9+Uz9e+UPti7Uu1L9e+Uvtq7WtGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjB5wIeFn8+wPiFAOMXA4xfCjB+OcD4lQDjVwOMXwuJGvx2ZzK5VMDj4bXz0iHOy4Q4LxvivFyIcyfE2UKclw9xXmFLUYOv1zflG7Vv1r5V+3btO7Xv1r5X+75Rg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWrw9YCHxd8IMH4zwPitAOO3A4zfCTB+N8D4vQDj90OiBr/bmUyuGPB4eO28UojzyiHOq4Q4rxrivFqI8+ohzmuEOK+5pajBD+qb8sPaj2o/rv2k9tPaz2o/r/3CqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxmmAcRZgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOA8wLgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjMsA4yrAmBY1+EHAw+IfBhh/FGD8cYDxJwHGnwYYfxZg/HmA8RchUYPf70wm1wp4PLx2XjvEeZ0Q53VDnNcLcc5DnIsQ5/VDnDfYUtTgl/VN+VXt17Xf1H5b+13t97U/1P5o1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4zTAOAswGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAcYFwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxmWAcRVgTIsa/DLgYfGvAoy/DjD+JsD42wDj7wKMvw8w/iHA+MeQqMEfdiaTGwY8Hl47bxTivHGI8yYhzpuGOG8W4rx5iPMWIc5bbilq8Kf6pvy59pfaX2t/q/299o/aP2v/Mmqw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEaYJwFGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4DjIsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMywLgKMKZFDf4U8LD4zwHGvwQY/xpg/FuA8e8Bxn8EGP8ZYPxXSNTgjzuTya0CHg+vnbcOcd4mxHnbEOftQpy3D3HeIcR5xxDnnbYUNfh3fVP+U9u1tltt99oetT1re9X2Nmqw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEaYJwFGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4DjIsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMywLgKMKZFDf4d8LD4PwHGXQOMuwUYdw8w7hFg3DPAuFeAce+QqMGfdiaTOwc8Hl477xLivGuI824hzruHOO8R4rxniPNeIc57bylqsE99U/at7Vfbv3ZA7cDaQbWDa4cYNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IG+wQ8LN43wLhfgHH/AOMBAcYDA4wHBRgPDjAeEhI1+PPOZHKfgMfDa+cyxLkKcd43xHm/EOf9Q5wPCHE+MMT5oC1FDQ6tb8phtcNrR9SOrB1VO7p2TO1YowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGKcBxlmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zzAuAgwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4DjKsAY1rU4NCAh8WHBRgPDzAeEWA8MsB4VIDx6ADjMQHGY0OiBn/ZmUweHPB4eO18SIjzoSHOh4U4Hx7ifESI85EhzkeFOB+9pajBcfVNOb52Qu3E9R+O6w+zJ6mdtHay2snXf6g1avC/e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4DjLMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxnmAcRFgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wGGFcBxrSowXEBD4uPDzCeEGA8McC4fuD3f914kgDjSQOMJwswnvwmY/49p51/3ZlMHhPweHjtfGyI83EhzseHOJ8Q4nxiiPNJIc4nhzifsqWowSnqm3LK2qlqp66dpnba2ulqp6+dwajBZq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZpgHEWYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgPMC4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzLAOMqwJgWNThFwMPiUwYYTxVgPHWA8TQBxtMGGE8XYDx9gPEMIVGDv+1MJk8NeDy8dj4txPn0EOczQpzPDHE+K8T57BDnc0Kcz91S1OCM9U05U22X2plrZ6mdtXa22tlr5zBqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxGmCcBRiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOA4yLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjMsC4CjCmRQ3OGPCw+EwBxl0CjGcOMJ4lwHjWAOPZAoxnDzCeIyRq8PedyeR5AY+H187nhzhfEOJ8YYjzRSHOF4c4XxLifGmI82Vbihqcs74p56qdu3ae2nlr56udv3aB2gWNGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDcwY8LD5XgPHcAcbzBBjPG2A8X4Dx/AHGCwQYLxgSNfjHzmTy8oDHw2vnK0KcrwxxvirE+eoQ52tCnK8Ncb4uxPn6LUUNLlTflGltVrtw7SK1i9YuVrt47RJGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBhQIeFk8DjLMA44UDjBcJMF40wHixAOPFA4yXCIka/HNnMnlDwOPhtfONIc43hTjfHOJ8S4jzrSHOt4U43x7ifMeWogaXrG/KpWqXrl2mdtna5Wo7tVa7vFGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIzTAOMswGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEeYFwEGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiXAcZVgDEtanDJgIfFlwowXjrAeJkA42UDjJcLMO4EGFuA8fIhUYN/7Uwm7wx4PLx2vivE+e4Q53tCnO8Ncb4vxPn+EOcHQpwf3FLU4Ar1Tbli7Uq1K9euUrtq7Wq1q9euYdRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOM0wDgLMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wHGBcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZlgHEVYEyLGlwh4GHxFQOMVwowXjnAeJUA41UDjFcLMF49wHiNkKjBv3cmkw8FPB5eOz8c4vxIiPOjIc6PhTg/HuL8RIjzkyHOT20panDN+qZcq3bt2nVq111/Y2rz2qJ2faMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBinAcZZgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOM8wLgIMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuA4yrAGNa1OCaAQ+LrxVgvHaA8ToBxusGGK8XYJwHGBcBxuuHRA3+szOZfDrg8fDa+ZkQ52dDnJ8LcX4+xPmFEOcXQ5xfCnF+eUtRgxvUN+WGtRvVbly7Se2mtZvVbl67hVGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIzTAOMswGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEeYFwEGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiXAcZVgDEtanCDgIfFNwww3ijAeOMA400CjDcNMN4swHjzAOMtQqIGu+5MJl8JeDy8dn41xPm1EOfXQ5zfCHF+M8T5rRDnt0Oc39lS1OCW9U25Ve3WtdvUblu7Xe32tTvU7mjUYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjNMA4CzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBxgXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGZYBxFWBMixrcMuBh8a0CjLcOMN4mwHjbAOPtAoy3DzDeIcB4x5CowW47k8l3Ax4Pr53fC3F+P8T5gxDnD0OcPwpx/jjE+ZMQ50+3FDW4U31T7ly7S+2utbvV7l67R+2etXsZNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGdwp4WHznAONdAox3DTDeLcB49wDjPQKM9www3iskarD7zmTys4DHw2vnz0Ocvwhx/jLE+asQ569DnL8Jcf42xPm7LUUN7l3flPvUlrVV7b61+9XuX3tA7YFGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBvQMeFt8nwLgMMK4CjPcNMN4vwHj/AOMDAowPDIka7LEzmfw+4PHw2vmHEOcfQ5x/CnH+OcT5lxDnX0Ocfwtx/n1LUYMH1TflwbWH1B5ae1jt4bVH1B5Ze5RRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWrwoICHxQ8OMD4kwPjQAOPDAowPDzA+IsD4yADjo0KiBnvuTCb/CHg8vHb+M8T5rxDnv0Oc/wlx7hri3C3EuXuIc48tRQ0eXd+Ux9QeW3tc7fG1J9SeWHtS7clGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBowMeFj8mwPjYAOPjAoyPDzA+IcD4xADjkwKMTw6JGuy1M5nsGfB4eO3cK8S5d4hznxDnviHO/UKc+4c4DwhxHrilqMFT6pvy1NrTak+vPaP2zNqzas+uPceowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjV4SsDD4qcGGJ8WYHx6gPEZAcZnBhifFWB8doDxOSFRg713JpODAh4Pr50HhzgPCXEeGuI8LMR5eIjziBDnkSHOo7YUNXhufVOeV3t+7QW1F9ZeVHtx7SW1lxo12Ow1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4DTDOAoxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBjnAcZFgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxGWBcBRjTogbPDXhY/LwA4/MDjC8IML4wwPiiAOOLA4wvCTC+NCRqsM/OZHJ0wOPhtfOYEOexIc7jQpzHhzhPCHGeGOKcnC3DeZKBzv/5b//L6pvy8toraq+svar26tpraq+tvc6owWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjV4WcDD4pcHGF8RYHxlgPFVAcZXBxhfE2B8bYDxdSFRg313JpOTBjweXjtPFuI8eYjzFCHOU4Y4TxXiPHWI8zQhztNuKWrw+vqmvKH2xtqbam+uvaX21trbam83arDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRpgnAUYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgOMiwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zLAuAowpkUNXh/wsPgNAcY3BhjfFGB8c4DxLQHGtwYY3xZgfHtI1GC/ncnkdAGPh9fO04c4zxDiPGOI80whzl1CnGcOcZ4lxHnWLUUN3lHflHfW3lV7d+09tffW3ld7f+0DRg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4DjLMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxnmAcRFgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wGGFcBxrSowTsCHha/M8D4rgDjuwOM7wkwvjfA+L4A4/sDjB8IiRrsvzOZnC3g8fDaefYQ5zlCnOcMcZ4rxHnuEOd5QpznDXGeb0tRgw/WN+VDtQ/XPlL7aO1jtY/XPlH7pFGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIzTAOMswGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEeYFwEGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiXAcZVgDEtavDBgIfFHwowfjjA+JEA40cDjB8LMH48wPiJAOMnQ6IGB+xMJucPeDy8dl4gxHnBEOeFQpzTEOcsxHnhEOdFQpwX3VLU4FP1Tfl07TO1z9Y+V/t87Qu1L9a+ZNRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOM0wDgLMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wHGBcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZlgHEVYEyLGnwq4GHxpwOMnwkwfjbA+LkA4+cDjF8IMH4xwPilkKjBgTuTycUCHg+vnRcPcV4ixHnJEOelQpyXDnFeJsR52RDn5bYUNfhyfVO+Uvtq7Wu1r9e+Uftm7Vu1bxs12Ow1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4DTDOAoxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBjnAcZFgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxGWBcBRjTogZfDnhY/JUA41cDjF8LMH49wPiNAOM3A4zfCjB+OyRqcNDOZLIT8Hh47WwhzsuHOK8Q4rxiiPNKIc4rhzivEuK86paiBt+pb8p3a9+rfb/2g9oPaz+q/bj2E6MGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBinAcZZgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOM8wLgIMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuA4yrAGNa1OA7AQ+Lvxtg/F6A8fsBxh8EGH8YYPxRgPHHAcafhEQNDt6ZTK4W8Hh47bx6iPMaIc5rhjivFeK8dojzOiHO64Y4r7elqMFP65vys9rPa7+o/bL2q9qva7+p/daowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjX4acDD4p8FGH8eYPxFgPGXAcZfBRh/HWD8TYDxtyFRg0N2JpN5wOPhtXMR4rx+iPMGIc4bhjhvFOK8cYjzJiHOm24pavC7+qb8vvaH2h9rf6r9ufaX2l9rfzNqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxGmCcBRiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOA4yLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjMsC4CjCmRQ1+F/Cw+PcBxj8EGP8YYPxTgPHPAca/BBj/GmD8W0jU4NCdyeRmAY+H186bhzhvEeK8ZYjzViHOW4c4bxPivG2I83Zbihr8vb4p/6j9s/av2r9r/6ntWtuttrtRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWrw94CHxf8IMP4zwPivAOO/A4z/CTDuGmDcLcC4e0jU4LCdyeT2AY+H1847hDjvGOK8U4jzziHOu4Q47xrivFuI8+5bihrsUd+UPWt71fau7VPbt7Zfbf/aAUYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOA4yzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZ5gHERYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBhhXAca0qMEeAQ+L9www7hVg3DvAuE+Acd8A434Bxv0DjAeERA0O35lM7hHweHjtvGeI814hznuHOO8T4lyGOFchzvuGOO+3pajBgfVNOah2cO2Q2qG1w2qH146oHWnUYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjNMA4CzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBxgXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGZYBxFWBMixocGPCw+KAA48EBxkMCjIcGGA8LMB4eYDwiwHhkSNTgiJ3J5P4Bj4fXzgeEOB8Y4nxQiPPBIc6HhDgfGuJ8WIjz4VuKGhxV35Sja8fUjq0dVzu+dkLtxPUfadd/BDVq8L97jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBUQEPi48OMB4TYDw2wHhcgPH4AOMJAcYTA4zrB6aUcWTU4MidyeQRAY+H185HhjgfFeJ8dIjzMSHOx4Y4HxfifHyI8wlbihqcpL4pJ62drHby2ilqp6ydqnbq2mmMGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDk9z0//5vetIA48kCjCcPMJ4iwHjKAOOpAoynDjCeJiRqcNTOZPLEgMfDa+eTQpxPDnE+JcT51BDn00KcTw9xPiPE+cwtRQ1OW9+U09VOXztD7Yy1M9V2qZ25dhajBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTgtAEPi08XYDx9gPEMAcYzBhjPFGDcJcB45gDjWUKiBkfvTCbPCng8vHY+O8T5nBDnc0OczwtxPj/E+YIQ5wtDnC/aUtTgrPVNOVvt7LVz1M5ZO1ft3LXz1M5r1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4zTAOAswGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAcYFwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxmWAcRVgTIsanDXgYfHZAoxnDzCeI8B4zgDjuQKM5w4wnifAeN6QqMExO5PJiwMeD6+dLwlxvjTE+bIQ58tDnK8Icb4yxPmqEOertxQ1OF99U85fu0DtgrUL1aa1We3CtYsYNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IG5wt4WHz+AOMFAowXDDBeKMA4DTDOAowXDjBeJCRqcOzOZPKagMfDa+drQ5yvC3G+PsT5hhDnG0OcbwpxvjnE+ZYtRQ0uWt+Ui9UuXrtE7ZK1S9UuXbtM7bJGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBRQMeFl8swHjxAOMlAoyXDDBeKsB46QDjZQKMlw2JGhy3M5m8NeDx8Nr5thDn20Oc7whxvjPE+a4Q57tDnO8Jcb53S1GDy9U3ZafWaus/eF6hdsXalWpXrl3FqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxmmAcRZgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOA8wLgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjMsA4yrAmBY1uFzAw+KdAGMLMF4+wHiFAOMVA4xXCjBeOcB4lZCowfE7k8n7Ah4Pr53vD3F+IMT5wRDnh0KcHw5xfiTE+dEQ58e2FDW4an1Trla7eu0atWvWrlW7du06tesaNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGVw14WHy1AOPVA4zXCDBeM8B4rQDjtQOM1wkwXjckanDCzmTy8YDHw2vnJ0KcnwxxfirE+ekQ52dCnJ8NcX4uxPn5LUUNrlfflHltUbt+7Qa1G9ZuVLtx7SZGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjB9QIeFs8DjIsA4/UDjDcIMN4wwHijAOONA4w3CYkanLgzmXwh4PHw2vnFEOeXQpxfDnF+JcT51RDn10KcXw9xfmNLUYOb1jflZrWb125Ru2XtVrVb125Tu61Rg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWpw04CHxTcLMN48wHiLAOMtA4y3CjDeOsB4mwDjbUOiBpP6Bb4Z8Hh47fxWiPPbIc7vhDi/G+L8Xojz+yHOH4Q4f7ilqMHt6pty+9odanes3al259pdanet3c2owWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGaYBxFmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4DzAuAoxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMywDjKsCYFjW4XcDD4tsHGO8QYLxjgPFOAcY7BxjvEmC8a4DxbiFRg5PUL/CjgMfDa+ePQ5w/CXH+NMT5sxDnz0Ocvwhx/jLE+astRQ3uXt+Ue9TuWbtX7d61+9SWtVXtvkYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOA4yzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZ5gHERYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBhhXAca0qMHdAx4W3yPAeM8A470CjPcOMN4nwLgMMK4CjPcNiRqctH6BXwc8Hl47fxPi/G2I83chzt+HOP8Q4vxjiPNPIc4/bylqcL/6pty/9oDaA2sPqj249pDaQ2sPM2qw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEaYJwFGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4DjIsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMywLgKMKZFDe4X8LD4/gHGBwQYHxhgfFCA8cEBxocEGB8aYHxYSNTgZPUL/CXg8fDa+dcQ599CnH8Pcf4jxPnPEOe/Qpz/DnH+Z0tRg4fXN+URtUfWHlV7dO0xtcfWHld7vFGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIzTAOMswGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEeYFwEGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiXAcZVgDEtavDwgIfFjwgwPjLA+KgA46MDjI8JMD42wPi4AOPjQ6IGJ69fYNeAx8Nr524hzt1DnHuEOPcMce4V4tw7xLlPiHPfLUUNnlDflCfWnlR7cu0ptafWnlZ7eu0ZRg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4DjLMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxnmAcRFgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wGGFcBxrSowRMCHhY/McD4pADjkwOMTwkwPjXA+LQA49MDjM8IiRqcon6B/QIeD6+d+4c4DwhxHhjiPCjEeXCI85AQ56EhzsO2FDV4Zn1TnlV7du05tefWnld7fu0FtRcaNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGzwx4WPysAOOzA4zPCTA+N8D4vADj8wOMLwgwvjAkanDK+gUOD3g8vHYeEeI8MsR5VIjz6BDnMSHOY0Ocx4U4j99S1OBF9U15ce0ltZfWXlZ7ee0VtVfWXmXUYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjNMA4CzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBxgXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGZYBxFWBMixq8KOBh8YsDjC8JML40wPiyAOPLA4yvCDC+MsD4qpCowanqFzgh4PHw2nliiHNy9gznSUKcJw1xnizEefIQ5ylCnKcc6Pyf//a/ur4pr6m9tva62utrb6i9sfam2puNGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDVwc8LH5NgPG1AcbXBRhfH2B8Q4DxjQHGNwUY3xwSNTh1/QKnCng8vHaeOsR5mhDnaUOcpwtxnj7EeYYQ5xlDnGfaUtTgLfVNeWvtbbW3195Re2ftXbV3195j1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4zTAOAswGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAcYFwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxmWAcRVgTIsavCXgYfFbA4xvCzC+PcD4jgDjOwOM7wowvjvA+J6QqMFp6hfYJeDx8Np55hDnWUKcZw1xni3EefYQ5zlCnOcMcZ5rS1GD99Y35X2199c+UPtg7UO1D9c+UvuoUYPNXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjNMA4yzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0ajB/7/Wd0YNIKNRA8Zo1IAxzgOMiwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zLAuAowpkUN3hvwsPh9Acb3Bxg/EGD8YIDxQwHGDwcYPxJg/GhI1OC09QucO+Dx8Np5nhDneUOc5wtxnj/EeYEQ5wVDnBcKcU63FDX4WH1TPl77RO2TtU/VPl37TO2ztc8ZNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGHwt4WPzxAOMnAoyfDDB+KsD46QDjZwKMnw0wfi4kanC6+gVmAY+H184LhzgvEuK8aIjzYiHOi4c4LxHivGSI81Jbihp8vr4pX6h9sfal2pdrX6l9tfa12teNGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDzwc8LP5CgPGLAcYvBRi/HGD8SoDxqwHGrwUYvx4SNTh9/QKXDng8vHZeJsR52RDn5UKcOyHOFuK8fIjzCiHOK24pavCN+qZ8s/at2rdr36l9t/a92vdrPzBqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxGmCcBRiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOA4yLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjMsC4CjCmRQ2+EfCw+JsBxm8FGL8dYPxOgPG7AcbvBRi/H2D8QUjU4Az1C1wp4PHw2nnlEOdVQpxXDXFeLcR59RDnNUKc1wxxXmtLUYMf1jflR7Uf135S+2ntZ7Wf135R+6VRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCM0wDjLMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxHmBcBBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYlwHGVYAxLWrww4CHxT8KMP44wPiTAONPA4w/CzD+PMD4iwDjL0OiBmesX+DaAY+H187rhDivG+K8XohzHuJchDivH+K8QYjzhluKGvyqvim/rv2m9tva72q/r/2h9sfan4wabPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBhhnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzzAOMiwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DDCuAoxpUYNfBTws/nWA8TcBxt8GGH8XYPx9gPEPAcY/Bhj/FBI1OFP9AjcKeDy8dt44xHmTEOdNQ5w3C3HePMR5ixDnLUOct9pS1ODP9U35S+2vtb/V/l77R+2ftX/V/m3UYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjNMA4CzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBxgXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGZYBxFWBMixr8OeBh8V8CjH8NMP4twPj3AOM/Aoz/DDD+K8D475CowS71C9w64PHw2nmbEOdtQ5y3C3HePsR5hxDnHUOcdwpx3nlLUYP/1Ddl19putd1re9T2rO1V27u2j1GDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIzTAOMswGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEeYFwEGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiXAcZVgDEtavCfgIfFuwYYdwsw7h5g3CPAuGeAca8A494Bxn1CogZnrl/gLgGPh9fOu4Y47xbivHuI8x4hznuGOO8V4rx3iPM+W4oa7FvflP1q+9cOqB1YO6h2cO2Q2qFGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBvgEPi/cLMO4fYDwgwHhggPGgAOPBAcZDAoyHhkQNzlK/wDLg8fDauQpx3jfEeb8Q5/1DnA8IcT4wxPmgEOeDtxQ1OKy+KYfXjqgdWTuqdnTtmNqxteOMGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDwwIeFh8eYDwiwHhkgPGoAOPRAcZjAozHBhiPC4kanLV+gYcEPB5eOx8a4nxYiPPhIc5HhDgfGeJ8VIjz0SHOx2wpanB8fVNOqJ24/mNn/THxJLWT1k5WO3ntFOs/MBo1+N+9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTg+ICHxScEGE8MMK4f0P1fN54kwHjSAOPJAownDzCe4mZj/j3H31DWL/DYgMfDa+fjQpyPD3E+IcT5xBDnk0KcTw5xPiXE+dQtRQ1OWd+UU9VOXTtN7bS109VOXztD7YxGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgOMswCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGeYBxEWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAYYVwHGtKjBKQMeFp8qwHjqAONpAoynDTCeLsB4+gDjGQKMZwyJGpy9foGnBTweXjufHuJ8RojzmSHOZ4U4nx3ifE6I87khzudtKWpwpvqm7FI7c+0stbPWzlY7e+0ctXMaNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGZwp4WLxLgPHMAcazBBjPGmA8W4Dx7AHGcwQYzxkSNThH/QLPD3g8vHa+IMT5whDni0KcLw5xviTE+dIQ58tCnC/fUtTgXPVNOXftPLXz1s5XO3/tArUL1i5k1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4zTAOAswGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAcYFwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxmWAcRVgTIsanCvgYfG5A4znCTCeN8B4vgDj+QOMFwgwXjDAeKGQqME56xd4RcDj4bXzlSHOV4U4Xx3ifE2I87UhzteFOF8f4nzDlqIG0/qmzGoXrl2kdtHaxWoXr12idkmjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtRgGvCweBZgvHCA8SIBxosGGC8WYLx4gPESAcZLhkQNzlW/wBsDHg+vnW8Kcb45xPmWEOdbQ5xvC3G+PcT5jhDnO7cUNbhUfVMuXbtM7bK1y9V2aq22/uPiFYwabPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBhhnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIzzAOMiwGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4DDCuAoxpUYNLBTwsvnSA8TIBxssGGC8XYNwJMLYA4+UDjFcIiRqcu36BdwU8Hl473x3ifE+I870hzveFON8f4vxAiPODIc4PbSlqcMX6plypduXaVWpXrV2tdvXaNWrXNGqw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEaYJwFGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4DjIsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMywLgKMKZFDa4Y8LD4SgHGKwcYrxJgvGqA8WoBxqsHGK8RYLxmSNTgPPULfDjg8fDa+ZEQ50dDnB8LcX48xPmJEOcnQ5yfCnF+ektRg2vVN+XatevUrrv+vtTmtUXt+rUbGDXY7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgNMM4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGOcBxkWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEZYFwFGNOiBtcKeFh87QDjdQKM1w0wXi/AOA8wLgKM1w8w3iAkanDe+gU+E/B4eO38bIjzcyHOz4c4vxDi/GKI80shzi+HOL+ypajBDeubcqPajWs3qd20drPazWu3qN3SqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxmmAcRZgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOA8wLgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjMsA4yrAmBY1uGHAw+IbBRhvHGC8SYDxpgHGmwUYbx5gvEWA8ZYhUYPz1S/w1YDHw2vn10KcXw9xfiPE+c0Q57dCnN8OcX4nxPndLUUNblXflFvXblO7be12tdvX7lC7Y+1ORg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4DjLMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxnmAcRFgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wGGFcBxrSowa0CHhbfOsB4mwDjbQOMtwsw3j7AeIcA4x0DjHcKiRqcv36B7wU8Hl47vx/i/EGI84chzh+FOH8c4vxJiPOnIc6fbSlqcOf6ptyldtfa3Wp3r92jds/avWr3Nmqw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEaYJwFGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4DjIsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMywLgKMKZFDe4c8LD4LgHGuwYY7xZgvHuA8R4BxnsGGO8VYLx3SNTgAvUL/Dzg8fDa+YsQ5y9DnL8Kcf46xPmbEOdvQ5y/C3H+fktRg/vUN2VZW9XuW7tf7f61B9QeWHuQUYPNXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjNMA4yzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcR5gXAQYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGJcBxlWAMS1qcJ+Ah8XLAOMqwHjfAOP9Aoz3DzA+IMD4wADjg0KiBhesX+APAY+H184/hjj/FOL8c4jzLyHOv4Y4/xbi/HuI8x9biho8uL4pD6k9tPaw2sNrj6g9svao2qONGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDBwc8LH5IgPGhAcaHBRgfHmB8RIDxkQHGRwUYHx0SNbhQ/QL/DHg8vHb+K8T57xDnf0Kcu4Y4dwtx7h7i3CPEueeWogaPqW/KY2uPqz2+9oTaE2tPqj259hSjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYpwHGWYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjPMC4CDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgOMqwBjWtTgMQEPix8bYHxcgPHxAcYnBBifGGB8UoDxyQHGp4REDab1C+wV8Hh47dw7xLlPiHPfEOd+Ic79Q5wHhDgPDHEetKWowVPrm/K02tNrz6g9s/as2rNrz6k916jBZq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZpgHEWYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgPMC4CjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIzLAOMqwJgWNXhqwMPipwUYnx5gfEaA8ZkBxmcFGJ8dYHxOgPG5IVGDWf0CBwc8Hl47DwlxHhriPCzEeXiI84gQ55EhzqNCnEdvKWrwvPqmPL/2gtoLay+qvbj2ktpLay8zarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRpgnAUYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgOMiwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zLAuAowpkUNnhfwsPj5AcYXBBhfGGB8UYDxxQHGlwQYXxpgfFlI1ODC9QscE/B4eO08NsR5XIjz+BDnCSHOE0Ock3NkOE8S4jzpQOf//Lf/5fVNeUXtlbVX1V5de03ttbXX1V5v1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4zTAOAswGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAcYFwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxmWAcRVgTIsavDzgYfErAoyvDDC+KsD46gDjawKMrw0wvi7A+PqQqMFF6hc4WcDj4bXz5CHOU4Q4TxniPFWI89QhztOEOE8b4jzdlqIGb6hvyhtrb6q9ufaW2ltrb6u9vfYOowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGKcBxlmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zzAuAgwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4DjKsAY1rU4A0BD4vfGGB8U4DxzQHGtwQY3xpgfFuA8e0BxneERA0uWr/A6QMeD6+dZwhxnjHEeaYQ5y4hzjOHOM8S4jxriPNsW4oavLO+Ke+qvbv2ntp7a++rvb/2gdoHjRps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wGGGcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjPMA4yLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgMMK4CjGlRg3cGPCx+V4Dx3QHG9wQY3xtgfF+A8f0Bxg8EGD8YEjW4WP0CZw94PLx2niPEec4Q57lCnOcOcZ4nxHneEOf5Qpzn31LU4EP1Tflw7SO1j9Y+Vvt47RO1T9Y+ZdRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOM0wDgLMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wHGBcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZlgHEVYEyLGnwo4GHxhwOMHwkwfjTA+LEA48cDjJ8IMH4ywPipkKjBxesXuEDA4+G184IhzguFOKchzlmI88IhzouEOC8a4rzYlqIGn65vymdqn619rvb52hdqX6x9qfZlowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGKcBxlmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zzAuAgwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4DjKsAY1rU4NMBD4s/E2D8bIDxcwHGzwcYvxBg/GKA8UsBxi+HRA0uUb/AxQMeD6+dlwhxXjLEeakQ56VDnJcJcV42xHm5EOfOlqIGX6lvyldrX6t9vfaN2jdr36p9u/YdowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGKcBxlmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zzAuAgwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4DjKsAY1rU4CsBD4u/GmD8WoDx6wHGbwQYvxlg/FaA8dsBxu+ERA0uWb9AC3g8vHZePsR5hRDnFUOcVwpxXjnEeZUQ51VDnFfbUtTgu/VN+V7t+7Uf1H5Y+1Htx7Wf1H5q1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4zTAOAswGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAcYFwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxmWAcRVgTIsafDfgYfH3AozfDzD+IMD4wwDjjwKMPw4w/iTA+NOQqMGl6he4esDj4bXzGiHOa4Y4rxXivHaI8zohzuuGOK8X4pxvKWrws/qm/Lz2i9ova7+q/br2m9pva78zarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRpgnAUYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgOMiwCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4zLAuAowpkUNfhbwsPjnAcZfBBh/GWD8VYDx1wHG3wQYfxtg/F1I1ODS9QssAh4Pr53XD3HeIMR5wxDnjUKcNw5x3iTEedMQ5822FDX4fX1T/lD7Y+1PtT/X/lL7a+1vtb8bNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOA0wzgKMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAY5wHGRYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRlgXAUY06IGvw94WPyHAOMfA4x/CjD+OcD4lwDjXwOMfwsw/j0kanCZ+gVuHvB4eO28RYjzliHOW4U4bx3ivE2I87YhztuFOG+/pajBP+qb8s/av2r/rv2ntmttt9rutT2MGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAYYZwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCM8wDjIsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAwwrgKMaVGDfwQ8LP5ngPFfAcZ/Bxj/E2DcNcC4W4Bx9wDjHiFRg8vWL3CHgMfDa+cdQ5x3CnHeOcR5lxDnXUOcdwtx3j3EeY8tRQ32rG/KXrW9a/vU9q3tV9u/dkDtQKMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBinAcZZgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOM8wLgIMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuA4yrAGNa1GDPgIfFewUY9w4w7hNg3DfAuF+Acf8A4wEBxgNDogaXq1/gngGPh9fOe4U47x3ivE+IcxniXIU47xvivF+I8/5bihocVN+Ug2uH1A6tHVY7vHZE7cjaUUYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOA4yzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZ5gHERYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBhhXAca0qMFBAQ+LDw4wHhJgPDTAeFiA8fAA4xEBxiMDjEeFRA126hd4QMDj4bXzgSHOB4U4HxzifEiI86EhzoeFOB8e4nzElqIGR9c35ZjasbXjasfXTqiduP7DYv3h7iTrP94ZNfjfvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGKcBxlmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4zzAuAgwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4DjKsAY1rU4OiAh8XHBBiPDTAeF2A8PsB4QoDxxADj+gHn/3XjSW4+5t9z/P+dq1/gkQGPh9fOR4U4Hx3ifEyI87EhzseFOB8f4nxCiPOJW4oanLS+KSernbx2itopa6eqnbp2mtppjRps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wGGGcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjPMA4yLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDG/8fOPQXNn53t239i20537BUb3XEymZnY6I5t27adsW3b9sS27eS9+t3417Mz9846VtdzVh1X1bn/qd74favmnnUYNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsaXDjgYfFFAowXDTBeLMB48QDjJQKMlwwwXirAeOmQqMHqf557XcDj4ZXz9SHON4Q43xjifFOI880hzreEON8a4nzbmqIGl6lvymVrl6tdvnaF2hVrV6pduXYVowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowWUCHhZfNsB4uQDj5QOMVwgwXjHAeKUA45UDjFcJiRrcoX6Btwc8Hl453xHifGeI810hzneHON8T4nxviPN9Ic73rylqcNX6plytdvXaNWrXrF2rdu3adWrXNWqwsdeoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMkwDgNMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZFgHEZYEyLGlw14GHx1QKMVw8wXiPAeM0A47UCjNcOMF4nwHjdkKjBHesX+EDA4+GV84Mhzg+FOD8c4vxIiPOjIc6PhTg/HuL8xJqiBterb8r1azeo3bA2qU1rN6rduHYTowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowfUCHhZfP8B4gwDjDQOMkwDjNMB4owDjjQOMNwmJGtypfoFPBjweXjk/FeL8dIjzMyHOz4Y4Pxfi/HyI8wshzi+uKWpw0/qm3Kx289otares3ap269ptarc1arCx16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsa3DTgYfHNAow3DzDeIsB4ywDjrQKMtw4w3ibAeNuQqMGd6xf4UsDj4ZXzyyHOr4Q4vxri/FqIc4sQ55Yhzq1CnFuvKWpwu/qmtNrqj3R3qN2xdqfanWt3qd3VqMHGXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjJMA4zTAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGBcBxmWAMS1qcLuAh8UtwHj7AOMdAox3DDDeKcB45wDjXQKMdw2JGtylfoFtAh4Pr5zbhji3C3FuH+LcIcS5Y4hzpxDnziHOXdYUNbhbfVPuXrtH7Z61e9XuXbtP7b6r741Rg429Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtTgbgEPi+8eYLxHgPGeAcZ7BRjvHWC8T4DxvgHG+4VEDe5av8CuAY+HV87dQpy7hzj3CHHuGeLcK8S5d4hznxDnvmuKGszqmzKv3b/2gNoDaw+qPbj2kNpDjRps7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgJME4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHERYFwGGNOiBrOAh8XzAOP9A4wPCDA+MMD4oADjgwOMDwkwPjQkanC3+gX2C3g8vHLuH+I8IMR5YIjzoBDnwSHOQ0Kch4Y4D1tT1OBh9U15eG2T2iNqm9Y2q21ee2TtUUYNNvYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBBinAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CDAuA4xpUYOHBTwsfniAcZMA4yMCjJsGGDcLMG4eYHxkgPFRIVGDu9cvcHjA4+GV84gQ55EhzqNCnEeHOI8JcR4b4jwuxHn8mqIGj65vymNqj609rvb42hNqT6w9qfZkowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowaMDHhY/JsD42ADj4wKMjw8wPiHA+MQA45MCjE8OiRrco36BEwIeD6+cJ4Y4TwpxnhziPCXEeWqI87QQ5+khzjPWFDV4Sn1Tnlp7Wu3ptWfUFrVl7Zm1Zxk12Nhr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxEmCcBhiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjIsC4DDCmRQ2eEvCw+KkBxqcFGJ8eYHxGgHERYFwGGJ8ZYHxWSNTgnvULnBnweHjlPCvEeXaI85wQ57khzvNCnOeHOL8e4vzGmqIGz65vynNqz609r/b82gtqL6y9qPZiowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowbMDHhY/J8D43ADj8wKMzw8wviDA+MIA44sCjC8OiRrcq36BbwY8Hl45vxXi/HaI8zshzu+GOL8X4vx+iPMHIc4frilq8JL6pry09rLay2uvqL2y9qraq2uvMWqwsdeoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMkwDgNMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZFgHEZYEyLGrwk4GHxSwOMLwswvjzA+IoA4ysDjK8KML46wPiakKjBvesX+FHA4+GV88chzp+EOH8a4vxZiPPnIc5fhDh/GeL81ZqiBq+tb8rraq+vvaH2xtqbam+uvaX2VqMGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMFrAx4Wvy7A+PoA4xsCjG8MML4pwPjmAONbAoxvDYka3Kd+gV8HPB5eOX8T4vxtiPN3Ic7fhzj/EOL8Y4jzTyHOP68pavC2+qa8vfaO2jtr76q9u/ae2ntr7zNqsLHXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjJMA4DTAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGRYBxGWBMixq8LeBh8dsDjO8IML4zwPiuAOO7A4zvCTC+N8D4vpCowX3rF/hLwOPhlfOvIc6/hTj/HuL8R4jznyHOf4U4/x3i/M+aogbvr2/KB2ofrH2o9uHaR2ofrX2s9nGjBht7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjB+wMeFn8gwPjBAOOHAowfDjB+JMD40QDjxwKMHw+JGtyvfoH/BjweXjn/5xoZzguFOC8c4rxIiPOiIc6LhTgvHuK8xEDn//63/xP1Tflk7VO1T9c+U/ts7XO1z9e+YNRgY69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZJgHEaYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyLAOMywJgWNfhEwMPiTwYYPxVg/HSA8TMBxs8GGD8XYPx8gPELIVGDWf0Clwx4PLxyXirEeekQ52VCnJcNcV4uxHn5EOcVQpxXXFPU4Iv1TflS7cu1r9S+WvtabYvalrWtjBps7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgJME4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHERYFwGGNOiBl8MeFj8pQDjlwOMXwkwfjXA+LUA4xYBxi0DjFuFRA3m9QtcKeDx8Mp55RDnVUKcVw1xXi3EefUQ5zVCnNcMcV5rTVGDreubsk1t29p2te1rO9R2rO1U29mowcZeowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMkwDjNMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYFwHGZYAxLWqwdcDD4m0CjNsGGLcLMG4fYNwhwLhjgHGnAOPOIVGD+9cvcO2Ax8Mr53VCnNcNcV4vxHn9EOcNQpw3DHFOQpzTNUUNdqlvyq613Wq71/ao7Vnbq7Z3bR+jBht7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjBLgEPi3cNMO4WYNw9wLhHgHHPAONeAca9A4z7hEQNHlC/wI0CHg+vnDcOcd4kxHnTEOfNQpw3D3HeIsR5yxDnrdYUNdi3vin71favHVA7sHZQ7eDaIbVDjRps7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgJME4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHERYFwGGNOiBvsGPCzeL8C4f4DxgADjgQHGgwKMBwcYDwkwHhoSNXhg/QK3Dng8vHLeJsR52xDn7UKcLcR5+xDnHUKcdwxx3mlNUYPD6ptyeO2I2pG1o2pH146pHVs7zqjBxl6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyTAOM0wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBgXAcZlgDEtanBYwMPiwwOMRwQYjwwwHhVgPDrAeEyA8dgA43EhUYMH1S9w54DHwyvnXUKcdw1x3i3EefcQ5z1CnPcMcd4rxHnvNUUNjq9vygm1E2sn1U6unVI7tXZa7XSjBht7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjB8QEPi08IMJ4YYDwpwHhygPGUAOOpAcbTAoynh0QNHly/wH0CHg+vnPcNcd4vxDkLcc5DnPcPcT4gxPnAEOeD1hQ1OKO+KWfWzqqdXTundm7tvNr5ta8bNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUNzgh4WHxmgPGsAOPZAcZzAoznBhjPCzCeH2D8ekjU4CH1Czw44PHwyvmQEOdDQ5wPC3E+PMS5SYjzESHOTUOcm60pavCN+qZ8s/at2rdr36l9t/a92vdrPzBqsLHXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjJMA4DTAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGRYBxGWBMixp8I+Bh8TcDjN8KMH47wPidAON3A4zfCzB+P8D4g5CowUPrF9g84PHwyvnIEOejQpyPDnE+JsT52BDn40Kcjw9xPmFNUYMf1jflR7Uf135S+2ntZ7Wf135R+6VRg429Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtTghwEPi38UYPxxgPEnAcafBhh/FmD8eYDxFwHGX4ZEDR5Wv8ATAx4Pr5xPCnE+OcT5lBDnU0OcTwtxPj3E+YwQ52JNUYNf1Tfl17Xf1H5b+13t97U/1P5Y+5NRg429Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtTgVwEPi38dYPxNgPG3AcbfBRh/H2D8Q4DxjwHGP4VEDR5ev8Ay4PHwyvnMEOezQpzPDnE+J8T53BDn80Kczw9xvmBNUYM/1zflL7W/1v5W+3vtH7V/1v5V+7dRg429Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtTgzwEPi/8SYPxrgPFvAca/Bxj/EWD8Z4DxXwHGf4dEDTapX+CFAY+HV84XhThfHOJ8SYjzpSHOl4U4Xx7ifEWI85Vrihr8p74p/139ga7+AHah2oVrF6ldtHax2sVXfxgzanDBXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjJMA4zTAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGBcBxmWAMS1q8J+Ah8X/DTCuHqj9XzdeKMB44QDjRQKMFw0wXizAePFNxvx7jv93yvoFXhXweHjlfHWI8zUhzteGOF8X4nx9iPMNIc43hjjftKaowSXqm3LJ2qVql65dpnbZ2uVql69dwajBxl6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyTAOM0wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBgXAcZlgDEtanCJgIfFlwwwXirAeOkA42UCjJcNMF4uwHj5AOMVQqIGm9Yv8OaAx8Mr51tCnG8Ncb4txPn2EOc7QpzvDHG+K8T57jVFDa5Y35Qr1a5cu0rtqrWr1a5eu0btmkYNNvYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBBinAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CDAuA4xpUYMrBjwsvlKA8coBxqsEGK8aYLxagPHqAcZrBBivGRI12Kx+gfcEPB5eOd8b4nxfiPP9Ic4PhDg/GOL8UIjzwyHOj6wpanCt+qZcu3ad2nVr16tdv3aD2g1rE6MGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMG1Ah4WXzvAeJ0A43UDjNcLMF4/wHiDAOMNA4yTkKjB5vULfDTg8fDK+bEQ58dDnJ8IcX4yxPmpEOenQ5yfCXF+dk1Rg2l9U25Uu3HtJrWb1m5Wu3ntFrVbGjXY2GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHESYJwGGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMiwLgMMKZFDaYBD4tvFGC8cYDxJgHGmwYYbxZgvHmA8RYBxluGRA0eWb/A5wIeD6+cnw9xfiHE+cUQ55dCnF8OcX4lxPnVEOfX1hQ1uFV9U25du03ttrXb1Vpt9QexO9TuaNRgY69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZJgHEaYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyLAOMywJgWNbhVwMPiWwcYbxNgvG2A8XYBxhZgvH2A8Q4BxjuGRA0eVb/AFgGPh1fOLUOcW4U4tw5xbhPi3DbEuV2Ic/sQ5w5rihrcqb4pd67dpXbX2t1qd6/do3bP2r2MGmzsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IGdwp4WHznAONdAox3DTDeLcB49wDjPQKM9www3iskavDo+gV2DHg8vHLuFOLcOcS5S4hz1xDnbiHO3UOce4Q491xT1ODe9U25T+2+q29LbVab1+5fe0DtgUYNNvYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBBinAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CDAuA4xpUYN7Bzwsvk+A8b4BxvsFGGcBxnmA8f4BxgcEGB8YEjV4TP0CewU8Hl459w5x7hPi3DfEuV+Ic/8Q5wEhzgNDnAetKWrwoPqmPLj2kNpDaw+rPby2Se0RtU2NGmzsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IGDwp4WPzgAONDAowPDTA+LMD48ADjJgHGRwQYNw2JGjy2foGDAx4Pr5yHhDgPDXEeFuI8PMR5RIjzyBDnUSHOo9cUNdisvimb1x5Ze1Tt0bXH1B5be1zt8UYNNvYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBBinAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CDAuA4xpUYPNAh4Wbx5gfGSA8VEBxkcHGB8TYHxsgPFxAcbHh0QNHle/wDEBj4dXzmNDnMeFOI8PcZ4Q4jwxxHlSiPPkEOcpa4oaPKG+KU+sPan25NpTak+tPa329NozjBps7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgJME4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHERYFwGGNOiBk8IeFj8xADjkwKMTw4wPiXA+NQA49MCjE8PMD4jJGrw+PoFTg14PLxynhbiPD3EeUaI88wQ51khzrNDnOeEOM9dU9RgUd+UZe2ZtWfVnl17Tu25tefVnm/UYGOvUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGSYBxGmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMiwDjMsCYFjVYBDwsXgYYnxlgfFaA8dkBxucEGJ8bYHxegPH5IVGDJ9QvcF7A4+GV8/wQ59dDnN8IcX4zxPmtEOe3Q5zfCXF+d01RgxfUN+WFtRfVXlx7Se2ltZfVXl57hVGDjb1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBgnAcZpgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuAozLAGNa1OAFAQ+LXxhgfFGA8cUBxpcEGF8aYHxZgPHlAcZXhEQNnli/wPcCHg+vnN8Pcf4gxPnDEOePQpw/DnH+JMT50xDnz9YUNXhlfVNeVXt17TW119ZeV3t97Q21Nxo12Nhr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxEmCcBhiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjIsC4DDCmRQ1eGfCw+FUBxlcHGF8TYHxtgPF1AcbXBxjfEGB8Y0jU4En1C/w84PHwyvmLEOcvQ5y/CnH+OsT5mxDnb0Ocvwtx/n5NUYM31TflzbW31N5ae1vt7bV31N5Ze5dRg429Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtTgTQEPi98cYHxLgPGtAca3BRjfHmB8R4DxnQHGd4VEDZ5cv8AfAh4Pr5x/DHH+KcT55xDnX0Kcfw1x/i3E+fcQ5z/WFDV4d31T3lN7b+19tffXPlD7YO1DtQ8bNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUN3h3wsPg9Acb3BhjfF2B8f4DxAwHGDwYYPxRg/HBI1OAp9Qv8M+Dx8Mr5rxDnv0Oc/wlx/jfE+T/XzHBeKMR54RDnRQY6//e//R+pb8pHax+rfbz2idona5+qfbr2GaMGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMFHAh4WfzTA+LEA48cDjJ8IMH4ywPipAOOnA4yfCYkaPLV+gYsGPB5eOS8W4rx4iPMSIc5LhjgvFeK8dIjzMiHOy64pavDZ+qZ8rvb52hdqX6x9qfbl2ldqXzVqsLHXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjJMA4DTAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGRYBxGWBMixp8NuBh8ecCjJ8PMH4hwPjFAOOXAoxfDjB+JcD41ZCowdPqF7hcwOPhlfPyIc4rhDivGOK8UojzyiHOq4Q4rxrivNqaogZfq2/KFrUta1vVtq5tU9u2tl1te6MGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMHXAh4WbxFg3DLAuFWAcesA4zYBxm0DjNsFGLcPiRo8vX6Bqwc8Hl45rxHivGaI81ohzmuHOK8T4rxuiPN6Ic7rrylqsEN9U3as7VTbubZLbdfabrXda3sYNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUNdgh4WLxjgHGnAOPOAcZdAoy7Bhh3CzDuHmDcIyRq8Iz6BW4Q8Hh45bxhiHMS4pyGOG8U4rxxiPMmIc6bhjhvtqaowZ71Tdmrtndtn9q+tf1q+9cOqB1o1GBjr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxkmAcRpgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjIsA4zLAmBY12DPgYfFeAca9A4z7BBj3DTDuF2DcP8B4QIDxwJCowaJ+gZsHPB5eOW8R4rxliPNWIc5bhzhvE+K8bYjzdiHOtqaowUH1TTm4dkjt0NphtcNrR9SOrB1l1GBjr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxkmAcRpgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjIsA4zLAmBY1OCjgYfHBAcZDAoyHBhgPCzAeHmA8IsB4ZIDxqJCowbJ+gdsHPB5eOe8Q4rxjiPNOIc47hzjvEuK8a4jzbiHOu68panB0fVOOqR1bO652fO2E2om1k2onGzXY2GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHESYJwGGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMiwLgMMKZFDY4OeFh8TIDx2ADjcQHG4wOMJwQYTwwwnhRgPDkkavDM+gXuEfB4eOW8Z4jzXiHOe4c47xPivG+I834hzlmIc76mqMEp9U05tXZa7fTaGbUza2fVzq6dY9RgY69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZJgHEaYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyLAOMywJgWNTgl4GHxqQHG0wKMpwcYzwgwnhlgPCvAeHaA8ZyQqMGz6he4f8Dj4ZXzASHOB4Y4HxTifHCI8yEhzoeGOB8W4nz4mqIG59Y35bza+bWv175R+2btW7Vv175j1GBjr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxkmAcRpgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjIsA4zLAmBY1ODfgYfF5AcbzA4xfDzB+I8D4zQDjtwKM3w4wfickavDs+gU2CXg8vHI+IsS5aYhzsxDn5iHOR4Y4HxXifHSI8zFrihp8t74p36t9v/aD2g9rP6r9uPaT2k+NGmzsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IG3w14WPy9AOP3A4w/CDD+MMD4owDjjwOMPwkw/jQkavCc+gUeG/B4eOV8XIjz8SHOJ4Q4nxjifFKI88khzqeEOJ+6pqjBz+qb8vPaL2q/rP2q9uvab2q/rf3OqMHGXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjJMA4zTAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGBcBxmWAMS1q8LOAh8U/DzD+IsD4ywDjrwKMvw4w/ibA+NsA4+9CogbPrV/gaQGPh1fOp4c4nxHiXIQ4lyHOZ4Y4nxXifHaI8zlrihr8vr4pf6j9sfan2p9rf6n9tfa32t+NGmzsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IGvw94WPyHAOMfA4x/CjD+OcD4lwDjXwOMfwsw/j0kavC8+gWeG/B4eOV8Xojz+SHOF4Q4XxjifFGI88UhzpeEOF+6pqjBP+qb8s/av2r/rv2n9t/VH8Pqj00Xql149UcnowYX7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgJME4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHERYFwGGNOiBv8IeFj8zwDjvwKM/w4w/ifA+N8A4+qB5P9144UCjBd+xJh/z2nn8+sXeFnA4+GV8+UhzleEOF8Z4nxViPPVIc7XhDhfG+J83ZqiBhepb8pFaxerXbx2idola5eqXbp2GaMGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMFFAh4WXzTAeLEA48UDjJcIMF4ywHipAOOlA4yXCYkavKB+gdcHPB5eOd8Q4nxjiPNNIc43hzjfEuJ8a4jzbSHOt68panDZ+qZcrnb52hVqV6xdqXbl2lVqVzVqsLHXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjJMA4DTAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGRYBxGWBMixpcNuBh8eUCjJcPMF4hwHjFAOOVAoxXDjBeJcB41ZCowQvrF3hHwOPhlfOdIc53hTjfHeJ8T4jzvSHO94U43x/i/MCaogZXq2/K1WvXqF2zdq3atWvXqV23dj2jBht7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjB1QIeFl89wHiNAOM1A4zXCjBeO8B4nQDjdQOM1wuJGryofoEPBjweXjk/FOL8cIjzIyHOj4Y4Pxbi/HiI8xMhzk+uKWpw/fqm3KB2w9qkNq3dqHbj2k1qNzVqsLHXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjJMA4DTAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGRYBxGWBMixpcP+Bh8Q0CjDcMME4CjNMA440CjDcOMN4kwHjTkKjBi+sX+FTA4+GV89Mhzs+EOD8b4vxciPPzIc4vhDi/GOL80pqiBjerb8rNa7eo3bJ2q9qta7ep3bZ2O6MGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMHNAh4W3zzAeIsA4y0DjLcKMN46wHibAONtA4y3C4kavKR+gS8HPB5eOb8S4vxqiPNrIc4tQpxbhji3CnFuHeLcZk1Rg1bflNUflu5Qu2PtTrU71+5Su2vtbkYNNvYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBBinAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CDAuA4xpUYMW8LD49gHGOwQY7xhgvFOA8c4BxrsEGO8aYLxbSNTgpfULbBvweHjl3C7EuX2Ic4cQ544hzp1CnDuHOHcJce66pqjB3eubco/aPWv3qt27dp/afVffmtrMqMHGXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjJMA4zTAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGBcBxmWAMS1qcPeAh8X3CDDeM8B4rwDjvQOM9wkw3jfAeL8A4ywkavCy+gV2C3g8vHLuHuLcI8S5Z4hzrxDn3iHOfUKc+4Y491tT1GBe35T71x5Qe2DtQbUH1x5Se2jtYUYNNvYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBBinAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CDAuA4xpUYN5wMPi+wcYHxBgfGCA8UEBxgcHGB8SYHxogPFhIVGDl9cvsH/A4+GV84AQ54EhzoNCnAeHOA8JcR4a4jwsxHn4mqIGD69vyia1R9Q2rW1W27z2yNqjao82arCx16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsaPDzgYfEmAcZHBBg3DTBuFmDcPMD4yADjowKMjw6JGryifoEjAh4Pr5xHhjiPCnEeHeI8JsR5bIjzuBDn8SHOE9YUNXhMfVMeW3tc7fG1J9SeWHtS7cm1pxg12Nhr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxEmCcBhiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjIsC4DDCmRQ0eE/Cw+LEBxscFGB8fYHxCgPGJAcYnBRifHGB8SkjU4JX1C5wY8Hh45TwpxHlyiPOUEOepIc7TQpynhzjPCHGeuaaowVPrm/K02tNrz6gtasvaM2vPqj3bqMHGXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjJMA4zTAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGBcBxmWAMS1q8NSAh8VPCzA+PcD4jADjIsC4DDA+M8D4rADjs0OiBq+qX+CsgMfDK+fZIc5zQpznhjjPC3GeH+L8eojzGyHOb64pavCc+qY8t/a82vNrL6i9sPai2otrLzFqsLHXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjJMA4DTAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGRYBxGWBMixo8J+Bh8XMDjM8LMD4/wPiCAOMLA4wvCjC+OMD4kpCowavrF/hWwOPhlfPbIc7vhDi/G+L8Xojz+yHOH4Q4fxji/NGaogYvrW/Ky2ovr72i9sraq2qvrr2m9lqjBht7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjBSwMeFr8swPjyAOMrAoyvDDC+KsD46gDjawKMrw2JGrymfoEfBzweXjl/EuL8aYjzZyHOn4c4fxHi/GWI81chzl+vKWrwuvqmvL72htoba2+qvbn2ltpba28zarCx16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsavC7gYfHrA4xvCDC+McD4pgDjmwOMbwkwvjXA+LaQqMFr6xf4TcDj4ZXztyHO34U4fx/i/EOI848hzj+FOP8c4vzLmqIGb69vyjtq76y9q/bu2ntq7629r/Z+owYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowdsDHha/I8D4zgDjuwKM7w4wvifA+N4A4/sCjO8PiRq8rn6BvwY8Hl45/xbi/HuI8x8hzn+GOP8V4vx3iPM/Ic7/rilq8IH6pnyw9qHah2sfqX209rHax2ufMGqwsdeoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMkwDgNMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZFgHEZYEyLGnwg4GHxBwOMHwowfjjA+JEA40cDjB8LMH48wPiJkKjB61e/wLX+5/8daaadFwpxXjjEeZEQ50VDnBcLcV48xHmJEOclBzr/97/9n6xvyqdqn659pvbZ2udqn699ofZFowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowScDHhZ/KsD46QDjZwKMnw0wfi7A+PkA4xcCjF8MiRq8oX6BSwU8Hl45Lx3ivEyI87IhzsuFOC8f4rxCiPOKIc4rrSlq8KX6pny59pXaV2tfq21R27K2VW1rowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowZcCHhZ/OcD4lQDjVwOMXwswbhFg3DLAuFWAceuQqMEb6xe4csDj4ZXzKiHOq4Y4rxbivHqI8xohzmuGOK8V4rz2mqIG29Q3ZdvadrXtazvUdqztVNu5totRg429Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtRgm4CHxdsGGLcLMG4fYNwhwLhjgHGnAOPOAcZdQqIGb6pf4DoBj4dXzuuGOK8X4rx+iPMGIc4bhjgnIc5piPNGa4oa7FrflN1qu9f2qO1Z26u2d22f2r5GDTb2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAQYpwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAgwLgOMaVGDXQMeFu8WYNw9wLhHgHHPAONeAca9A4z7BBj3DYkavLl+gRsHPB5eOW8S4rxpiPNmIc6bhzhvEeK8ZYjzViHOW68parBffVP2rx1QO7B2UO3g2iG1Q2uHGTXY2GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHESYJwGGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMiwLgMMKZFDfYLeFi8f4DxgADjgQHGgwKMBwcYDwkwHhpgPCwkavCW+gVuE/B4eOW8bYjzdiHOFuK8fYjzDiHOO4Y47xTivPOaogaH1zfliNqRtaNqR9eOqR1bO652vFGDjb1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBgnAcZpgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuAozLAGNa1ODwgIfFRwQYjwwwHhVgPDrAeEyA8dgA43EBxuNDogZvrV/gLgGPh1fOu4Y47xbivHuI8x4hznuGOO8V4rx3iPM+a4oanFDflBNrJ9VOrp1SO7V2Wu302hlGDTb2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAQYpwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAgwLgOMaVGDEwIeFp8YYDwpwHhygPGUAOOpAcbTAoynBxjPCIkavK1+gfsGPB5eOe8X4pyFOOchzvuHOB8Q4nxgiPNBIc4HrylqcGZ9U86qnV07p3Zu7bza+bWv175h1GBjr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxkmAcRpgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjIsA4zLAmBY1ODPgYfFZAcazA4znBBjPDTCeF2A8P8D49QDjN0KiBm+vX+AhAY+HV86HhjgfFuJ8eIhzkxDnI0Kcm4Y4Nwtxbr6mqME365vyrdq3a9+pfbf2vdr3az+o/dCowcZeowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMkwDjNMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYFwHGZYAxLWrwzYCHxd8KMH47wPidAON3A4zfCzB+P8D4gwDjD0OiBu+oX+CRAY+HV85HhTgfHeJ8TIjzsSHOx4U4Hx/ifEKI84lrihr8qL4pP679pPbT2s9qP6/9ovbL2q+MGmzsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IGPwp4WPzjAONPAow/DTD+LMD48wDjLwKMvwww/iokavDO+gWeFPB4eOV8cojzKSHOp4Y4nxbifHqI8xkhzkWIc7mmqMGv65vym9pva7+r/b72h9ofa3+q/dmowcZeowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMkwDjNMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYFwHGZYAxLWrw64CHxb8JMP42wPi7AOPvA4x/CDD+McD4pwDjn0OiBu+qX+CZAY+HV85nhTifHeJ8TojzuSHO54U4nx/ifEGI84Vrihr8pb4pf639rfb32j9q/6z9q/bv2n+MGmzsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IGfwl4WPzXAOPfAox/DzD+I8D4zwDjvwKM/w4w/ickavDu+gVeFPB4eOV8cYjzJSHOl4Y4XxbifHmI8xUhzleGOF+1pqjBf1d/VKo/2lyoduHaRWoXrV2sdvHaJVZ/0DFqcMFeowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMkwDjNMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYFwHGZYAxLWrw34CHxasHYP/XjRcKMF44wHiRAONFA4wXCzBePMB4iU3H/HtOO99Tv8CrAx4Pr5yvCXG+NsT5uhDn60OcbwhxvjHE+aYQ55vXFDW4ZH1TLlW7dO0ytcvWLle7fO0KtSsaNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUNLhnwsPhSAcZLBxgvE2C8bIDxcgHGywcYrxBgvGJI1OC99Qu8JeDx8Mr51hDn20Kcbw9xviPE+c4Q57tCnO8Ocb5nTVGDK9U35cq1q9SuWrta7eq1a9SuWbuWUYONvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGCcBxmmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4CjMsAY1rU4EoBD4uvHGC8SoDxqgHGqwUYrx5gvEaA8ZoBxmuFRA3eV7/AewMeD6+c7wtxvj/E+YEQ5wdDnB8KcX44xPmREOdH1xQ1uHZ9U65Tu27terXr125Qu2FtUpsaNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUNrh3wsPg6AcbrBhivF2C8foDxBgHGGwYYJwHGaUjU4P31C3ws4PHwyvnxEOcnQpyfDHF+KsT56RDnZ0Kcnw1xfm5NUYMb1TflxrWb1G5au1nt5rVb1G5Zu5VRg429Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtTgRgEPi28cYLxJgPGmAcabBRhvHmC8RYDxlgHGW4VEDT5Qv8DnAx4Pr5xfCHF+McT5pRDnl0OcXwlxfjXE+bUQ5xZrihrcur4pt6ndtna7Wqut/ohzh9oda3cyarCx16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsa3DrgYfFtAoy3DTDeLsDYAoy3DzDeIcB4xwDjnUKiBh+sX2DLgMfDK+dWIc6tQ5zbhDi3DXFuF+LcPsS5Q4hzxzVFDe5c35S71O5au1vt7rV71O5Zu1ft3kYNNvYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBBinAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CDAuA4xpUYM7BzwsvkuA8a4BxrsFGO8eYLxHgPGeAcZ7BRjvHRI1+FD9AjsFPB5eOXcOce4S4tw1xLlbiHP3EOceIc49Q5x7rSlqcJ/6ptx39V2pzWrz2v1rD6g9sPYgowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowX0CHhbfN8B4vwDjLMA4DzDeP8D4gADjAwOMDwqJGny4foG9Ax4Pr5z7hDj3DXHuF+LcP8R5QIjzwBDnQSHOg9cUNXhwfVMeUnto7WG1h9c2qT2itmltM6MGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMGDAx4WPyTA+NAA48MCjA8PMG4SYHxEgHHTAONmIVGDj9QvcEjA4+GV89AQ52EhzsNDnEeEOI8McR4V4jw6xHnMmqIGm9c35ZG1R9UeXXtM7bG1x9UeX3uCUYONvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGCcBxmmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4CjMsAY1rUYPOAh8WPDDA+KsD46ADjYwKMjw0wPi7A+PgA4xNCogYfrV/g2IDHwyvncSHO40OcJ4Q4TwxxnhTiPDnEeUqI89Q1RQ2eWN+UJ9WeXHtK7am1p9WeXntGbWHUYGOvUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGSYBxGmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMiwDjMsCYFjV4YsDD4icFGJ8cYHxKgPGpAcanBRifHmB8RoBxERI1+Fj9AqcFPB5eOU8PcZ4R4jwzxHlWiPPsEOc5Ic5zQ5znrSlqsKxvyjNrz6o9u/ac2nNrz6s9v/YCowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowTLgYfEzA4zPCjA+O8D4nADjcwOMzwswPj/A+IKQqMHH6xc4P+Dx8Mr59RDnN0Kc3wxxfivE+e0Q53dCnN8NcX5vTVGDF9Y35UW1F9deUntp7WW1l9deUXulUYONvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGCcBxmmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4CjMsAY1rU4IUBD4tfFGB8cYDxJQHGlwYYXxZgfHmA8RUBxleGRA0+Ub/A9wMeD6+cPwhx/jDE+aMQ549DnD8Jcf40xPmzEOfP1xQ1eFV9U15de03ttbXX1V5fe0PtjbU3GTXY2GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHESYJwGGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMiwLgMMKZFDV4V8LD41QHG1wQYXxtgfF2A8fUBxjcEGN8YYHxTSNTgk/UL/CLg8fDK+csQ569CnL8Ocf4mxPnbEOfvQpy/D3H+YU1RgzfXN+UttbfW3lZ7e+0dtXfW3lV7t1GDjb1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBgnAcZpgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuAozLAGNa1ODNAQ+L3xJgfGuA8W0BxrcHGN8RYHxngPFdAcZ3h0QNPlW/wB8DHg+vnH8Kcf45xPmXEOdfQ5x/C3H+PcT5jxDnP9cUNXhPfVPeW3tf7f21D9Q+WPtQ7cO1jxg12Nhr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxEmCcBhiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjIsC4DDCmRQ3eE/Cw+L0BxvcFGN8fYPxAgPGDAcYPBRg/HGD8SEjU4NP1C/wr4PHwyvnvEOd/Qpz/DXH+z7UznBcKcV44xHmREOdFBzr/97/9H61vysdqH699ovbJ2qdqn659pvZZowYbe40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMU4CjNMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wEGJcBxrSowUcDHhZ/LMD48QDjJwKMnwwwfirA+OkA42cCjJ8NiRp8pn6BiwU8Hl45Lx7ivESI85IhzkuFOC8d4rxMiPOyIc7LrSlq8Ln6pny+9oXaF2tfqn259pXaV2tfM2qwsdeoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMkwDgNMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZFgHEZYEyLGnwu4GHx5wOMXwgwfjHA+KUA45cDjF8JMH41wPi1kKjBZ+sXuHzA4+GV8wohziuGOK8U4rxyiPMqIc6rhjivFuK8+pqiBlvUN2XL2la1rWvb1LatbVfbvraDUYONvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGCcBxmmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4CjMsAY1rUYIuAh8VbBhi3CjBuHWDcJsC4bYBxuwDj9gHGHUKiBp+rX+AaAY+HV85rhjivFeK8dojzOiHO64Y4rxfivH6I8wZrihrsWN+UnWo713ap7VrbrbZ7bY/ankYNNvYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBBinAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CDAuA4xpUYMdAx4W7xRg3DnAuEuAcdcA424Bxt0DjHsEGPcMiRp8vn6BGwY8Hl45JyHOaYjzRiHOG4c4bxLivGmI82YhzpuvKWqwV31T9q7tU9u3tl9t/9oBtQNrBxk12Nhr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxEmCcBhiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjIsC4DDCmRQ32CnhYvHeAcZ8A474Bxv0CjPsHGA8IMB4YYDwoJGrwhfoFbhHweHjlvGWI81YhzluHOG8T4rxtiPN2Ic4W4rz9mqIGB9c35ZDaobXDaofXjqgdWTuqdrRRg429Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtTg4ICHxYcEGA8NMB4WYDw8wHhEgPHIAONRAcajQ6IGX6xf4A4Bj4dXzjuGOO8U4rxziPMuIc67hjjvFuK8e4jzHmuKGhxT35Rja8fVjq+dUDuxdlLt5NopRg029ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wEGKcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgIMC4DjGlRg2MCHhYfG2A8LsB4fIDxhADjiQHGkwKMJwcYTwmJGnypfoF7BjweXjnvFeK8d4jzPiHO+4Y47xfinIU45yHO+68panBqfVNOq51eO6N2Zu2s2tm1c2rnGjXY2GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHESYJwGGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMiwLgMMKZFDU4NeFh8WoDx9ADjGQHGMwOMZwUYzw4wnhNgPDckavDl+gUeEPB4eOV8YIjzQSHOB4c4HxLifGiI82EhzoeHODdZU9TgvPqmnF/7eu0btW/WvlX7du07te8aNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUNzgt4WHx+gPHrAcZvBBi/GWD8VoDx2wHG7wQYvxsSNfhK/QKPCHg8vHJuGuLcLMS5eYjzkSHOR4U4Hx3ifEyI87Frihp8r74p36/9oPbD2o9qP679pPbT2s+MGmzsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IG3wt4WPz9AOMPAow/DDD+KMD44wDjTwKMPw0w/iwkavDV+gUeF/B4eOV8fIjzCSHOJ4Y4nxTifHKI8ykhzqeGOJ+2pqjBz+ub8ovaL2u/qv269pvab2u/q/3eqMHGXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjJMA4zTAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGBcBxmWAMS1q8POAh8W/CDD+MsD4qwDjrwOMvwkw/jbA+LsA4+9DogZfq1/g6QGPh1fOZ4Q4FyHOZYjzmSHOZ4U4nx3ifE6I87lrihr8ob4pf6z9qfbn2l9qf639rfb32j+MGmzsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IGfwh4WPzHAOOfAox/DjD+JcD41wDj3wKMfw8w/iMkarBF/QLPC3g8vHI+P8T5ghDnC0OcLwpxvjjE+ZIQ50tDnC9bU9Tgn/VN+Vft37X/1P67+gNO/YHkQrUL1y6y+mOJUYML9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wEGKcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgIMC4DjGlRg38GPCz+V4Dx3wHG/wQY/xtgXD1A/L9uvFCA8cIBxotsNubfc9q5Zf0CLw94PLxyviLE+coQ56tCnK8Ocb4mxPnaEOfrQpyvX1PU4KL1TblY7eK1S9QuWbtU7dK1y9Qua9RgY69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZJgHEaYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyLAOMywJgWNbhowMPiiwUYLx5gvESA8ZIBxksFGC8dYLxMgPGyIVGDreoXeEPA4+GV840hzjeFON8c4nxLiPOtIc63hTjfHuJ8x5qiBperb8rla1eoXbF2pdqVa1epXbV2NaMGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMHlAh4WXz7AeIUA4xUDjFcKMF45wHiVAONVA4xXC4kabF2/wDsDHg+vnO8Kcb47xPmeEOd7Q5zvC3G+P8T5gRDnB9cUNbh6fVOuUbtm7Vq1a9euU7tu7Xq16xs12Nhr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxEmCcBhiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjIsC4DDCmRQ2uHvCw+BoBxmsGGK8VYLx2gPE6AcbrBhivF2C8fkjUYJv6BT4U8Hh45fxwiPMjIc6Phjg/FuL8eIjzEyHOT4Y4P7WmqMEN6ptyw9qkNq3dqHbj2k1qN63dzKjBxl6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyTAOM0wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBgXAcZlgDEtanCDgIfFNwwwTgKM0wDjjQKMNw4w3iTAeNMA481Cogbb1i/w6YDHwyvnZ0Kcnw1xfi7E+fkQ5xdCnF8McX4pxPnlNUUNbl7flFvUblm7Ve3WtdvUblu7Xa0ZNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUNbh7wsPgWAcZbBhhvFWC8dYDxNgHG2wYYbxdgbCFRg+3qF/hKwOPhlfOrIc6vhTi3CHFuGeLcKsS5dYhzmxDntmuKGqz+GHKH2h1rd6rduXaX2l1rd6vd3ajBxl6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyTAOM0wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBgXAcZlgDEtanD7gIfFdwgw3jHAeKcA450DjHcJMN41wHi3AOPdQ6IG29cvsF3A4+GVc/sQ5w4hzh1DnDuFOHcOce4S4tw1xLnbmqIG96hvyj1r96rdu3af2n1X35narDY3arCx16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsa3CPgYfE9A4z3CjDeO8B4nwDjfQOM9wswzgKM85CowQ71C+we8Hh45dwjxLlniHOvEOfeIc59Qpz7hjj3C3Huv6aowf3rm/KA2gNrD6o9uPaQ2kNrD6s93KjBxl6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyTAOM0wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBgXAcZlgDEtanD/gIfFDwgwPjDA+KAA44MDjA8JMD40wPiwAOPDQ6IGO9YvcEDA4+GV88AQ50EhzoNDnIeEOA8NcR4W4jw8xHnEmqIGm9Q35RG1TWub1TavPbL2qNqja48xarCx16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsabBLwsPgRAcZNA4ybBRg3DzA+MsD4qADjowOMjwmJGuxUv8CRAY+HV86jQpxHhziPCXEeG+I8LsR5fIjzhBDniWuKGjy2vimPqz2+9oTaE2tPqj259pTaU40abOw1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CTBOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxEWBcBhjTogaPDXhY/LgA4+MDjE8IMD4xwPikAOOTA4xPCTA+NSRqsHP9AicFPB5eOU8OcZ4S4jw1xHlaiPP0EOcZIc4zQ5xnrSlq8LT6pjy99ozaorasPbP2rNqza88xarCx16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsaPC3gYfHTA4zPCDAuAozLAOMzA4zPCjA+O8D4nJCowS71C5wd8Hh45TwnxHluiPO8EOf5Ic6vhzi/EeL8ZojzW2uKGjy3vinPqz2/9oLaC2svqr249pLaS40abOw1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CTBOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxEWBcBhjTogbPDXhY/LwA4/MDjC8IML4wwPiiAOOLA4wvCTC+NCRqsGv9At8OeDy8cn4nxPndEOf3QpzfD3H+IMT5wxDnj0KcP15T1OBl9U15ee0VtVfWXlV7de01tdfWXmfUYGOvUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGSYBxGmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMiwDjMsCYFjV4WcDD4pcHGF8RYHxlgPFVAcZXBxhfE2B8bYDxdSFRg93qF/hJwOPhlfOnIc6fhTh/HuL8RYjzlyHOX4U4fx3i/M2aogavr2/KG2pvrL2p9ubaW2pvrb2t9najBht7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjB6wMeFr8hwPjGAOObAoxvDjC+JcD41gDj2wKMbw+JGuxev8BvAx4Pr5y/C3H+PsT5hxDnH0Ocfwpx/jnE+ZcQ51/XFDV4R31T3ll7V+3dtffU3lt7X+39tQ8YNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUN3hHwsPidAcZ3BRjfHWB8T4DxvQHG9wUY3x9g/EBI1GCP+gX+FvB4eOX8e4jzHyHOf4Y4/xXi/HeI8z8hzv+GOP/nOuOc//vf/g/WN+VDtQ/XPlL7aO1jtY/XPlH7pFGDjb1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBgnAcZpgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuAozLAGNa1OCDAQ+LPxRg/HCA8SMBxo8GGD8WYPx4gPETAcZPhkQN9qxf4EIDH+WSzguHOC8S4rxoiPNiIc6LhzgvEeK8ZIjzUmuKGnyqvimfrn2m9tna52qfr32h9sXal4wabOw1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CTBOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxEWBcBhjTogafCnhY/OkA42cCjJ8NMH4uwPj5AOMXAoxfDDB+KSRqsFf9ApcOeDy8cl4mxHnZEOflQpyXD3FeIcR5xRDnlUKcV15T1ODL9U35Su2rta/VtqhtWduqtnVtG6MGG3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMGXAx4WfyXA+NUA49cCjFsEGLcMMG4VYNw6wLhNSNRg7/oFrhLweHjlvGqI82ohzquHOK8R4rxmiPNaIc5rhzivs6aowbb1Tdmutn1th9qOtZ1qO9d2qe1q1GBjr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxkmAcRpgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjIsA4zLAmBY12DbgYfF2AcbtA4w7BBh3DDDuFGDcOcC4S4Bx15CowT71C1w34PHwynm9EOf1Q5w3CHHeMMQ5CXFOQ5w3CnHeeE1Rg93qm7J7bY/anrW9anvX9qntW9vPqMHGXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjJMA4zTAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGBcBxmWAMS1qsFvAw+LdA4x7BBj3DDDuFWDcO8C4T4Bx3wDjfiFRg33rF7hJwOPhlfOmIc6bhThvHuK8RYjzliHOW4U4bx3ivM2aogb71zflgNqBtYNqB9cOqR1aO6x2uFGDjb1GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBgnAcZpgNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEuAozLAGNa1GD/gIfFBwQYDwwwHhRgPDjAeEiA8dAA42EBxsNDogb71S9w24DHwyvn7UKcLcR5+xDnHUKcdwxx3inEeecQ513WFDU4or4pR9aOqh1dO6Z2bO242vG1E4wabOw1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CTBOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxEWBcBhjTogZHBDwsPjLAeFSA8egA4zEBxmMDjMcFGI8PMJ4QEjXYv36BuwY8Hl457xbivHuI8x4hznuGOO8V4rx3iPM+Ic77rilqcGJ9U06qnVw7pXZq7bTa6bUzamcaNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUNTgx4WHxSgPHkAOMpAcZTA4ynBRhPDzCeEWA8MyRqcED9AvcLeDy8cs5CnPMQ5/1DnA8IcT4wxPmgEOeDQ5wPWVPU4Kz6ppxdO6d2bu282vm1r9e+UfumUYONvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGCcBxmmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4CjMsAY1rU4KyAh8VnBxjPCTCeG2A8L8B4foDx6wHGbwQYvxkSNTiwfoGHBjweXjkfFuJ8eIhzkxDnI0Kcm4Y4Nwtxbh7ifOSaogbfqm/Kt2vfqX239r3a92s/qP2w9iOjBht7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjBtwIeFn87wPidAON3A4zfCzB+P8D4gwDjDwOMPwqJGhxUv8CjAh4Pr5yPDnE+JsT52BDn40Kcjw9xPiHE+cQQ55PWFDX4cX1TflL7ae1ntZ/XflH7Ze1XtV8bNdjYa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRJgnAYYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yLAuAwwpkUNfhzwsPgnAcafBhh/FmD8eYDxFwHGXwYYfxVg/HVI1ODg+gWeHPB4eOV8SojzqSHOp4U4nx7ifEaIcxHiXIY4n7mmqMFv6pvy29rvar+v/aH2x9qfan+u/cWowcZeowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMkwDjNMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYFwHGZYAxLWrwm4CHxb8NMP4uwPj7AOMfAox/DDD+KcD45wDjX0KiBofUL/CsgMfDK+ezQ5zPCXE+N8T5vBDn80OcLwhxvjDE+aI1RQ3+Wt+Uv9X+XvtH7Z+1f9X+XftP7b9GDTb2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAQYpwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAgwLgOMaVGDvwY8LP5bgPHvAcZ/BBj/GWD8V4Dx3wHG/wQY/xsSNTi0foEXBzweXjlfEuJ8aYjzZSHOl4c4XxHifGWI81UhzlevKWrwP/WHhgvVLly7SO2itYvVLl67RO2Sqz9EGDW4YK9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZJgHEaYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyLAOMywJgWNVg9sPq//pteKMB44QDjRQKMFw0wXizAePEA4yUCjJfcfMy/57TzsPoFXhPweHjlfG2I83UhzteHON8Q4nxjiPNNIc43hzjfsqaowaXqm3Lp2mVql61drnb52hVqV6xdafWHCKMGF+w1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CTBOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxEWBcBhjTogaXCnhYfOkA42UCjJcNMF4uwHj5AOMVAoxXDDBeKSRqcHj9Am8NeDy8cr4txPn2EOc7QpzvDHG+K8T57hDne0Kc711T1ODK9U25Su2qtavVrl67Ru2atWvVrr36Q4RRgwv2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAQYpwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAgwLgOMaVGDKwc8LL5KgPGqAcarBRivHmC8RoDxmgHGawUYrx0SNTiifoH3BTweXjnfH+L8QIjzgyHOD4U4Pxzi/EiI86Mhzo+tKWpwnfqmXLd2vdr1azeo3bA2qU1rN1r9IcKowQV7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjBdQIeFl83wHi9AOP1A4w3CDDeMMA4CTBOA4w3CokaHFm/wMcDHg+vnJ8IcX4yxPmpEOenQ5yfCXF+NsT5uRDn59cUNbhxfVNuUrtp7Wa1m9duUbtl7Va1W6/+EGHU4IK9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYJwHGaYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxLgKMywBjWtTgxgEPi28SYLxpgPFmAcabBxhvEWC8ZYDxVgHGW4dEDY6qX+ALAY+HV84vhji/FOL8cojzKyHOr4Y4vxbi3CLEueWaoga3qW/KbWu3q7Xa6g8Pd6jdsXan2p1Xf4gwanDBXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjJMA4zTAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGBcBxmWAMS1qcJuAh8W3DTDeLsDYAoy3DzDeIcB4xwDjnQKMdw6JGhxdv8BWAY+HV86tQ5zbhDi3DXFuF+LcPsS5Q4hzxxDnTmuKGtylvil3rd2tdvfaPWr3rN2rdu/afVZ/iDBqcMFeowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMkwDjNMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYFwHGZYAxLWpwl4CHxXcNMN4twHj3AOM9Aoz3DDDeK8B47wDjfUKiBsfUL7BzwOPhlXOXEOeuIc7dQpy7hzj3CHHuGeLcK8S595qiBvddfVNqs9q8dv/aA2oPrD2o9uDVHyKMGlyw16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsa/P8PrP6P/6b3CzDOAozzAOP9A4wPCDA+MMD4oADjg0OiBsfWL7BPwOPhlXPfEOd+Ic79Q5wHhDgPDHEeFOI8OMR5yJqiBg+pb8pDaw+rPby2Se0RtU1rm9U2X/0hwqjBBXuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMFDAh4WPzTA+LAA48MDjJsEGB8RYNw0wLhZgHHzkKjBcfULHBrweHjlPCzEeXiI84gQ55EhzqNCnEeHOI8JcR67pqjBI+ub8qjao2uPqT229rja42tPqD1x9YcIowYX7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgJME4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHERYFwGGNOiBo8MeFj8qADjowOMjwkwPjbA+LgA4+MDjE8IMD4xJGpwfP0CxwU8Hl45jw9xnhDiPDHEeVKI8+QQ5ykhzlNDnKetKWrwpPqmPLn2lNpTa0+rPb32jNqitlz9IcKowQV7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjBkwIeFj85wPiUAONTA4xPCzA+PcD4jADjIsC4DIkanFC/wOkBj4dXzjNCnGeGOM8KcZ4d4jwnxHluiPO8EOf5a4oaPLO+Kc+qPbv2nNpza8+rPb/2gtoLV3+IMGpwwV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyTAOM0wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBgXAcZlgDEtavDMgIfFzwowPjvA+JwA43MDjM8LMD4/wPiCAOMLQ6IGJ9Yv8PWAx8Mr5zdCnN8McX4rxPntEOd3QpzfDXF+L8T5/TVFDV5U35QX115Se2ntZbWX115Re2XtVas/RBg1uGCvUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGSYBxGmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMiwDjMsCYFjV4UcDD4hcHGF8SYHxpgPFlAcaXBxhfEWB8ZYDxVSFRg5PqF/hBwOPhlfOHIc4fhTh/HOL8SYjzpyHOn4U4fx7i/MWaogavrm/Ka2qvrb2u9vraG2pvrL2p9ubVHyKMGlyw16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsavDrgYfFrAoyvDTC+LsD4+gDjGwKMbwwwvinA+OaQqMHJ9Qv8MuDx8Mr5qxDnr0Ocvwlx/jbE+bsQ5+9DnH8Icf5xTVGDt9Q35a21t9XeXntH7Z21d9XeXXvP6g8RRg0u2GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHESYJwGGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMiwLgMMKZFDd4S8LD4rQHGtwUY3x5gfEeA8Z0BxncFGN8dYHxPSNTglPoF/hTweHjl/HOI8y8hzr+GOP8W4vx7iPMfIc5/hjj/taaowXvrm/K+2vtrH6h9sPah2odrH6l9dPWHCKMGF+w1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CTBOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxEWBcBhjTogbvDXhY/L4A4/sDjB8IMH4wwPihAOOHA4wfCTB+NCRqcGr9Av8OeDy8cv4nxPnfEOf/XDfDeaEQ54VDnBcJcV40xHmxgc7//W//x+qb8vHaJ2qfrH2q9unaZ2qfrX1u9YcIowYX7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgJME4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHERYFwGGNOiBh8LeFj88QDjJwKMnwwwfirA+OkA42cCjJ8NMH4uJGpwWv0CFw94PLxyXiLEeckQ56VCnJcOcV4mxHnZEOflQpyXX1PU4PP1TflC7Yu1L9W+XPtK7au1r9W2WP0hwqjBBXuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDFOAozTAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBBiXAca0qMHnAx4WfyHA+MUA45cCjF8OMH4lwPjVAOPXAoxbhEQNTq9f4AoBj4dXziuGOK8U4rxyiPMqIc6rhjivFuK8eojzGmuKGmxZ35StalvXtqltW9uutn1th9qOqz9EGDW4YK9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZJgHEaYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyLAOMywJgWNdgy4GHxVgHGrQOM2wQYtw0wbhdg3D7AuEOAcceQqMEZ9QtcM+Dx8Mp5rRDntUOc1wlxXjfEeb0Q5/VDnDcIcd5wTVGDneqbsnNtl9qutd1qu9f2qO1Z22v1hwijBhfsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAkwTgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRFgXAYY06IGOwU8LN45wLhLgHHXAONuAcbdA4x7BBj3DDDuFRI1OLN+gUnA4+GVcxrivFGI88YhzpuEOG8a4rxZiPPmIc5brClqsHd9U/ap7Vvbr7Z/7YDagbWDagev/hBh1OCCvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGCcBxmmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMS4CjMv/+b9vTIsa7B3wsHifAOO+Acb9Aoz7BxgPCDAeGGA8KMB4cEjU4Kz6BW4Z8Hh45bxViPPWIc7bhDhvG+K8XYizhThvH+K8w5qiBofUN+XQ2mG1w2tH1I6sHVU7unbM6g8RRg0u2GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHESYJwGGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMiwLgMMKZFDQ4JeFh8aIDxsADj4QHGIwKMRwYYjwowHh1gPCYkanB2/QJ3DHg8vHLeKcR55xDnXUKcdw1x3i3EefcQ5z1CnPdcU9Tg2PqmHFc7vnZC7cTaSbWTa6fUTl39IcKowQV7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxTgKM0wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAQYlwHGtKjBsQEPi48LMB4fYDwhwHhigPGkAOPJAcZTAoynhkQNzqlf4F4Bj4dXznuHOO8T4rxviPN+Ic5ZiHMe4rx/iPMBa4oanFbflNNrZ9TOrJ1VO7t2Tu3c2nmrP0QYNbhgr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxkmAcRpgNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjIsA4zLAmBY1OC3gYfHpAcYzAoxnBhjPCjCeHWA8J8B4boDxvJCowbn1Czww4PHwyvmgEOeDQ5wPCXE+NMT5sBDnw0Ocm4Q4H7GmqMH59U35eu0btW/WvlX7du07te/Wvrf6Q4RRgwv2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAQYpwFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAgwLgOMaVGD8wMeFn89wPiNAOM3A4zfCjB+O8D4nQDjdwOM3wuJGpxXv8CmAY+HV87NQpybhzgfGeJ8VIjz0SHOx4Q4HxvifNyaogbfr2/KD2o/rP2o9uPaT2o/rf2s9vPVHyKMGlyw16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yTAOA0wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxkWAcRlgTIsafD/gYfEPAow/DDD+KMD44wDjTwKMPw0w/izA+POQqMH59Qs8PuDx8Mr5hBDnE0OcTwpxPjnE+ZQQ51NDnE8LcT59TVGDX9Q35Ze1X9V+XftN7be139V+X/vD6g8RRg0u2GvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHESYJwGGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMc4CjP8fO/cULGuWvtH+a9tGVe3MtudquzuzbZuZbduFtm3btm3btl32edc5J3bsm3/ezDFX9BMx3ojntuMX6yK/iN01xzLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg78GPCz+W4Dx7wHGfwQY/xlg/FeA8d8Bxv8EGP8bEjX4Sf0F7hjweHjbuQpxrkOcdwpx3jnEeZcQ511DnHcLcd59h6IGB9Y35aDawbVDaofWDqsdXjuiduT2/xFh1OD/9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRgwMDHhYfFGA8OMB4SIDx0ADjYQHGwwOMRwQYjwyJGvy0/gL3CHg8vO28Z4jzXiHOe4c47xPivG+I834hzvuHOB+wQ1GDo+qbcnTtmNqx2/+nQ/2j/nFqx60dr3b87X/kN2rwf3uNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMFRAQ+Ljw4wHhNgPDbAuP3A73/deJwA43EDjMcLMB7/RmN+z2nnz+ov8MCAx8PbzgeFOB8c4nxIiPOhIc6HhTgfHuJ8RIjzkTsUNThBfVNOWDtR7cS1k9ROWjtZ7eS1Uxg12Ow1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogYnCHhYfMIA44kCjCcOMJ4kwHjSAOPJAownDzCeIiRq8PP6Czwq4PHwtnPfEOd+Ic79Q5wHhDgfHeJ8TIjzsSHOx+1Q1OCU9U05Ve3UtdPUTls7Xe30tTPUzmjUYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixqcMuBh8akCjKcOMJ4mwHjaAOPpAoynDzCeIcB4xpCowS/qL/D4gMfD284nhDifGOJ8UojzySHOp4Q4nxrifFqI8+k7FDU4U31Tzlw7S+2stbPVzl7bq7Z3bR+jBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgTAEPi88cYDxLgPGsAcazBRjPHmDcK8C4d4Bxn5CowS/rL/CMgMfD285nhjifFeJ8dojzOSHO54Y4nxfifH6I8wU7FDXYVd+UWW1eO0ftnLVz1c5dO0/tvEYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMGugIfFswDjPMB4jgDjOQOM5wownjvAeJ4A43lDoga/qr/ACwMeD287XxTifHGI8yUhzpeGOF8W4nx5iPMVIc5X7lDU4Hz1TTl/7QK1C9YuVLtw7SK1VtsyarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNzhfwsPj8AcYLBBgvGGC8UIDxwgHGiwQYW4BxKyRq8Ov6C7wq4PHwtvPVIc7XhDhfG+J8XYjz9SHON4Q43xjifNMORQ0uWt+Ui9UuXrtE7ZK1S9UuXbtM7bJGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBRQMeFl8swHjxAOMlAoyXDDBeKsB46QDjZQKMlw2JGvym/gJvDng8vO18S4jzrSHOt4U43x7ifEeI850hzneFON+9Q1GDy9U35fK1K9SuWLvS9jemtqgta1cxarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNLhfwsPjyAcYrBBivGGC8UoDxygHGRYBxGWC8SkjU4Lf1F3hPwOPhbed7Q5zvC3G+P8T5gRDnB0OcHwpxfjjE+ZEdihpctb4pV6tdvXaN2jVr16pdu3ad2nWNGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDqwY8LL5agPHqAcZrBBivGWC8VoDx2gHG6wQYrxsSNfhd/QU+GvB4eNv5sRDnx0OcnwhxfjLE+akQ56dDnJ8JcX52h6IG16tvyvVrN6jdsHaj2o1rN6ndtHYzowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4HoBD4uvH2C8QYDxhgHGGwUYbxxgvEmA8aYBxpuFRA1+X3+BzwU8Ht52fj7E+YUQ5xdDnF8KcX45xPmVEOdXQ5xf26Gowc3rm3KL2i1rt6rdunab2m1rt6vd3qjBZq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNbh5wMPiWwQYbxlgvFWA8dYBxtsEGG8bYLxdgPH2IVGDP9Rf4OsBj4e3nd8IcX4zxPmtEOe3Q5zfCXF+N8T5vRDn93coanCH+qbcsbaqrWt3qt25dpfaXWt3M2qw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDe4Q8LD4jgHGVYBxHWC8U4DxzgHGuwQY7xpgvFtI1OCP9Rf4QcDj4W3nD0OcPwpx/jjE+ZMQ509DnD8Lcf48xPmLHYoa3L2+Kfeo3bN2r9q9a/ep3bd2v9r9jRps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg7sHPCy+R4DxngHGewUY7x1gvE+A8b4BxvsFGO8fEjX4U/0FfhnweHjb+asQ569DnL8Jcf42xPm7EOfvQ5x/CHH+cYeiBg+ob8oDaw+qPbj2kNpDaw+rPbz2CKMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OABAQ+LHxhgfFCA8cEBxocEGB8aYHxYgPHhAcZHhEQN/lx/gT8FPB7edv45xPmXEOdfQ5x/C3H+PcT5jxDnP0Oc/9qhqMEj65vyqNq+tf1q+9cOqD269pjaY40abPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNHBjwsflSAcd8A434Bxv0DjAcEGB8dYHxMgPGxIVGDv9Rf4N8Bj4e3nf8Jcf43xHlgiPOgEOfBIc5DQpyHhjgP26GowePqm/L42hNqT6w9qfbk2lNqT609zajBZq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNXhcwMPixwcYnxBgfGKA8UkBxicHGJ8SYHxqgPFpIVGDv9Zf4PCAx8PbziNCnEeGOI8KcR4d4jwmxHlsiHPaK8N5nIHOPX/7n17flGfUnll7Vu3ZtefUnlt7Xu35Rg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowdMDHhY/I8D4zADjswKMzw4wPifA+NwA4/MCjM8PiRr8rf4Cxw14PLztPF6I8/ghzhOEOE8Y4jxRiPPEIc6ThDhPukNRgxfUN+WFtRfVXlx7Se2ltZfVXl57hVGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavCCgIfFLwwwvijA+OIA40sCjC8NML4swPjyAOMrQqIGf6+/wMkCHg9vO08e4jxFiPOUIc5ThThPHeI8TYjztCHO0+1Q1OCV9U15Ve3VtdfUXlt7Xe31tTfU3mjUYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixq8MuBh8asCjK8OML4mwPjaAOPrAoyvDzC+IcD4xpCowT/qL3D6gMfD284zhDjPGOI8U4jzzCHOs4Q4zxriPFuI8+w7FDV4U31T3lx7S+2ttbfV3l57R+2dtXcZNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGbwp4WPzmAONbAoxvDTC+LcD49gDjOwKM7wwwviskavDP+gvsFfB4eNu5d4hznxDnrhDnLMQ5D3GeI8R5zhDnuXYoavDu+qa8p/be2vtq7699oPbB2odqHzZqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ3eHfCw+D0BxvcGGN8XYHx/gPEDAcYPBhg/FGD8cEjU4F/1Fzh3wOPhbed5QpznDXGeL8R5/hDnBUKcFwxxXijEeeEdihp8pL4pH619rPbx2idqn6x9qvbp2meMGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDjwQ8LP5ogPFjAcaPBxg/EWD8ZIDxUwHGTwcYPxMSNfh3/QUuEvB4eNvZQpxbIc6LhjgvFuK8eIjzEiHOS4Y4L7VDUYPP1jflc7XP175Q+2LtS7Uv175S+6pRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrw2YCHxZ8LMH4+wPiFAOMXA4xfCjB+OcD4lQDjV0OiBv+pv8ClAx4PbzsvE+K8bIjzciHOy4c4rxDivGKI80ohzivvUNTga/VN+XrtG7Vv1r5V+3btO7Xv1r5n1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsafC3gYfHXA4zfCDB+M8D4rQDjtwOM3wkwfjfA+L2QqMF/6y+wCHg8vO1chjivEuK8aojzaiHOq4c4rxHivGaI81o7FDX4fn1TflD7Ye1HtR/XflL7ae1ntZ8bNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IG3w94WPyDAOMPA4w/CjD+OMD4kwDjTwOMPwsw/jwkanBg/QWuHfB4eNt5nRDndUOc1wtxXj/EeYMQ5w1DnDcKcd54h6IGv6hvyi9rv6r9uvab2m9rv6v9vvYHowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4BcBD4t/GWD8VYDx1wHG3wQYfxtg/F2A8fcBxj+ERA0Oqr/ATQIeD287bxrivFmI8+YhzluEOG8Z4rxViPPWIc7b7FDU4I/1TflT7c+1v9T+Wvtb7e+1f9T+adRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGvwx4GHxnwKMfw4w/iXA+NcA498CjH8PMP4jwPjPkKjBwfUXuG3A4+Ft5+1CnLcPcd4hxHnHEOcqxLkOcd4pxHnnHYoa/Ku+Kf+u/af239qBtYNqB9cOqR1q1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsa/CvgYfG/A4z/CTD+N8B4YIDxoADjwQHGQwKMh4ZEDQ6pv8BdAh4PbzvvGuK8W4jz7iHOe4Q47xnivFeI894hzvvsUNTgsPqmHF47onZk7aja0bVjasdu/wP/9j+aGzX4v71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OCwgIfFhwcYjwgwHhlgPCrAeHSA8ZgA47EBxu0HppRxZNTg0PoL3Dfg8fC2834hzvuHOB8Q4nxgiPNBIc4HhzgfEuJ86A5FDY5T35Tj1o5XO37tBLUT1k5UO3HtJEYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMFxbvy//zc9boDxeAHG4wcYTxBgPGGA8UQBxhMHGE8SEjU4rP4CDwt4PLztfHiI8xEhzkeGOB8V4tw3xLlfiHP/EOcBOxQ1OGl9U05WO3ntFLVT1k5VO3XtNLXTGjXY7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBicNeFh8sgDjyQOMpwgwnjLAeKoA46kDjKcJMJ42JGpweP0FHh3weHjb+ZgQ52NDnI8LcT4+xPmEEOcTQ5xPCnE+eYeiBqerb8rpa2eonbF2ptqZa2epnbV2NqMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OB0AQ+LTx9gPEOA8YwBxjMFGM8cYDxLgPGsAcazhUQNjqi/wFMCHg9vO58a4nxaiPPpIc5nhDifGeJ8Vojz2SHO5+xQ1ODs9U3Zq7Z3bZ/artqsNq+do3ZOowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4OwBD4v3CjDuHWDcJ8C4K8A4CzDOA4znCDCeMyRqcGT9BZ4b8Hh42/m8EOfzQ5wvCHG+MMT5ohDni0OcLwlxvnSHogbnqm/KuWvnqZ23dr7a+WsXqF2wdiGjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgXAEPi88dYDxPgPG8AcbzBRjPH2C8QIDxggHGC4VEDY6qv8DLAh4PbztfHuJ8RYjzlSHOV4U4Xx3ifE2I87UhztftUNTgwvVNuUit1bb/gfyitYvVLl67RO2SRg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowYUDHhZfJMDYAoxbAcaLBhgvFmC8eIDxEgHGS4ZEDY6uv8DrAx4PbzvfEOJ8Y4jzTSHON4c43xLifGuI820hzrfvUNTgUvVNuXTtMrXL1i5Xu3ztCrUr1q5k1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaXCrgYfGlA4yXCTBeNsB4uQDj5QOMVwgwXjHAeKWQqMEx9Rd4R8Dj4W3nO0Oc7wpxvjvE+Z4Q53tDnO8Lcb4/xPmBHYoaXLm+KYvasnaV2lVrV6tdvXaN2jWNGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDKwc8LF4EGJcBxqsEGK8aYLxagPHqAcZrBBivGRI1OLb+Ah8MeDy87fxQiPPDIc6PhDg/GuL8WIjz4yHOT4Q4P7lDUYNr1Tfl2rXr1K5bu17t+rUb1G5Yu5FRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWpwrYCHxdcOMF4nwHjdAOP1AozXDzDeIMB4wwDjjUKiBtPWNH0q4PHwtvPTIc7PhDg/G+L8XIjz8yHOL4Q4vxji/NIORQ1uXN+Um9RuWrtZ7ea1W9RuWbtV7dZGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBjQMeFt8kwHjTAOPNAow3DzDeIsB4ywDjrQKMtw6JGhxna5q+HPB4eNv5lRDnV0OcXwtxfj3E+Y0Q5zdDnN8KcX57h6IGt6lvym1rt6vdvnaH2h1rq9q6diejBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgNgEPi28bYLxdgPH2AcY7BBjvGGBcBRjXAcY7hUQNjrs1Td8JeDy87fxuiPN7Ic7vhzh/EOL8YYjzRyHOH4c4f7JDUYM71zflLrW71u5Wu3vtHrV71u5Vu7dRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWpw54CHxXcJMN41wHi3AOPdA4z3CDDeM8B4rwDjvUOiBsfbmqafBjwe3nb+LMT58xDnL0Kcvwxx/irE+esQ529CnL/doajBfeqbct/a/Wr3rz2g9sDag2oPrj3EqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1uE/Aw+L7BhjvF2C8f4DxAQHGBwYYHxRgfHCA8SEhUYPjb03T7wIeD287fx/i/EOI848hzj+FOP8c4vxLiPOvIc6/7VDU4KH1TXlY7eG1R9QeWXtUbd/afrX9jRps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg4cGPCx+WIDx4QHGRwQYHxlgfFSAcd8A434Bxv1DogYn2Jqmvwc8Ht52/iPE+c8Q579CnP8Ocf4nxPnfEOeBIc6DdihqcEB9Ux5de0ztsbXH1R5fe0LtibUnGTXY7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBgcEPCx+dIDxMQHGxwYYHxdgfHyA8QkBxicGGJ8UEjU44dY0HRzweHjbeUiI89AQ52EhzsNDnEeEOI8McR4V4jx6h6IGT65vylNqT609rfb02jNqz6w9q/ZsowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4MkBD4ufEmB8aoDxaQHGpwcYnxFgfGaA8VkBxmeHRA1OtDVNxwQ8Ht52HhvinPbOcB4nxHncEOfxQpzHD3GeIMR5woHOPX/7n1PflOfWnld7fu0FtRfWXlR7ce0lRg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowXMCHhY/N8D4vADj8wOMLwgwvjDA+KIA44sDjC8JiRqceGuaThTweHjbeeIQ50lCnCcNcZ4sxHnyEOcpQpynDHGeaoeiBi+tb8rLai+vvaL2ytqraq+uvab2WqMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OClAQ+LXxZgfHmA8RUBxlcGGF8VYHx1gPE1AcbXhkQNTrI1TacOeDy87TxNiPO0Ic7ThThPH+I8Q4jzjCHOM4U4z7xDUYPX1Tfl9bU31N5Ye1PtzbW31N5ae5tRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrwuoCHxa8PML4hwPjGAOObAoxvDjC+JcD41gDj20KiBifdmqazBDwe3naeNcR5thDn2UOce4U49w5x7hPi3BXinO1Q1ODt9U15R+2dtXfV3l17T+29tffV3m/UYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixq8PeBh8TsCjO8MML4rwPjuAON7AozvDTC+L8D4/pCowcm2pmke8Hh423mOEOc5Q5znCnGeO8R5nhDneUOc5wtxnn+HogYfqG/KB2sfqn249pHaR2sfq3289gmjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgAwEPiz8YYPxQgPHDAcaPBBg/GmD8WIDx4wHGT4REDU6+NU0XCHg8vO28YIjzQiHOC4c4LxLibCHOrRDnRUOcF9uhqMEn65vyqdqna5+pfbb2udrna1+ofdGowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjX4ZMDD4k8FGD8dYPxMgPGzAcbPBRg/H2D8QoDxiyFRg1NsTdPFAx4PbzsvEeK8ZIjzUiHOS4c4LxPivGyI83IhzsvvUNTgS/VN+XLtK7Wv1r5W+3rtG7Vv1r5l1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsafCngYfGXA4xfCTB+NcD4tQDj1wOM3wgwfjPA+K2QqMEpt6bpCgGPh7edVwxxXinEeeUQ5yLEuQxxXiXEedUQ59V2KGrw7fqmfKf23dr3at+v/aD2w9qPaj82arDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNvh3wsPg7AcbvBhi/F2D8foDxBwHGHwYYfxRg/HFI1OBUW9N09YDHw9vOa4Q4rxnivFaI89ohzuuEOK8b4rxeiPP6OxQ1+El9U35a+1nt57Vf1H5Z+1Xt17XfGDXY7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBj8JeFj80wDjzwKMPw8w/iLA+MsA468CjL8OMP4mJGpw6q1pukHA4+Ft5w1DnDcKcd44xHmTEOdNQ5w3C3HePMR5ix2KGvy2vim/q/2+9ofaH2t/qv259pfaX40abPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYPfBjws/l2A8fcBxj8EGP8YYPxTgPHPAca/BBj/GhI1OM3WNN0y4PHwtvNWIc5bhzhvE+K8bYjzdiHO24c47xDivOMORQ3+Vt+Uv9f+Uftn7V+1f9f+U/tv7UCjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgbwEPi/8eYPxHgPGfAcZ/BRj/HWD8T4DxvwHGA0OiBqfdmqZVwOPhbec6xHmnEOedQ5x3CXHeNcR5txDn3UOc99ihqMFB9U05uHZI7dDaYbXDa0fUjqwdZdRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGhwU8LD44ADjIQHGQwOMhwUYDw8wHhFgPDLAeFRI1OB0W9N0z4DHw9vOe4U47x3ivE+I874hzvuFOO8f4nxAiPOBOxQ1OLq+KcfUjt3+x/H6x+fj1I5bO17t+LUTbP+DtFGD/9tr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ2ODnhYfEyA8dgA4/YDuv9143ECjMcNMB4vwHj8AOMJbjLm9xx/Q7k1TQ8KeDy87XxwiPMhIc6HhjgfFuJ8eIjzESHOR4Y4H7VDUYMT1jflRLUT105SO2ntZLWT105RO6VRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWpwwoCHxScKMJ44wHiSAONJA4wnCzCePMB4igDjKUOiBmfYmqZ9Ax4Pbzv3C3HuH+I8IMT56BDnY0Kcjw1xPi7E+fgdihqcqr4pp66dpnba2ulqp6+doXbG2pmMGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDUwU8LD51gPE0AcbTBhhPF2A8fYDxDAHGMwYYzxQSNTjj1jQ9IeDx8LbziSHOJ4U4nxzifEqI86khzqeFOJ8e4nzGDkUNzlzflLPUzlo7W+3stb1qe9f2qe0yarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNzhzwsPgsAcazBhjPFmA8e4BxrwDj3gHGfQKMu0KiBmfamqZnBjwe3nY+K8T57BDnc0Kczw1xPi/E+fwQ5wtCnC/coajBrL4p89o5auesnat27tp5auetnc+owWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjWYBTwsngcYzxFgPGeA8VwBxnMHGM8TYDxvgPF8IVGDM29N04sCHg9vO18c4nxJiPOlIc6XhThfHuJ8RYjzlSHOV+1Q1OD89U25QO2CtQvVLly7SK3Vtv8x+qJGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjB+QMeFl8gwHjBAOOFAowXDjBeJMDYAoxbAcaLhkQNzrI1Ta8OeDy87XxNiPO1Ic7XhThfH+J8Q4jzjSHON4U437xDUYOL1Tfl4rVL1C5Zu1Tt0rXL1C5bu5xRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWpwsYCHxRcPMF4iwHjJAOOlAoyXDjBeJsB42QDj5UKiBmfdmqa3BDwe3na+NcT5thDn20Oc7whxvjPE+a4Q57tDnO/ZoajB5eubcoXaFWtX2v6+1Ba1Ze0qtasaNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGlw94WHyFAOMVA4xXCjBeOcC4CDAuA4xXCTBeNSRqcLataXpvwOPhbef7QpzvD3F+IMT5wRDnh0KcHw5xfiTE+dEdihpcrb4pV69do3bN2rVq165dp3bd2vWMGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDqwU8LL56gPEaAcZrBhivFWC8doDxOgHG6wYYrxcSNTj71jR9LODx8Lbz4yHOT4Q4Pxni/FSI89Mhzs+EOD8b4vzcDkUNrl/flBvUbli7Ue3GtZvUblq7We3mRg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowfUDHhbfIMB4wwDjjQKMNw4w3iTAeNMA480CjDcPiRrstTVNnw94PLzt/EKI84shzi+FOL8c4vxKiPOrIc6vhTi/vkNRg1vUN+WWtVvVbl27Te22tdvVbl+7g1GDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtanCLgIfFtwww3irAeOsA420CjLcNMN4uwHj7AOMdQqIGe29N0zcCHg9vO78Z4vxWiPPbIc7vhDi/G+L8Xojz+yHOH+xQ1OCO9U1Z1da1O9XuXLtL7a61u9XubtRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGtwx4GHxKsC4DjDeKcB45wDjXQKMdw0w3i3AePeQqME+W9P0w4DHw9vOH4U4fxzi/EmI86chzp+FOH8e4vxFiPOXOxQ1uEd9U+5Zu1ft3rX71O5bu1/t/rUHGDXY7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBvcIeFh8zwDjvQKM9w4w3ifAeN8A4/0CjPcPMD4gJGqwa2uafhXweHjb+esQ529CnL8Ncf4uxPn7EOcfQpx/DHH+aYeiBg+sb8qDag+uPaT20NrDag+vPaL2SKMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OCBAQ+LHxRgfHCA8SEBxocGGB8WYHx4gPERAcZHhkQNZlvT9OeAx8Pbzr+EOP8a4vxbiPPvIc5/hDj/GeL8V4jz3zsUNXhUfVP2re1X2792QO3RtcfUHlt7nFGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavCogIfF+wYY9wsw7h9gPCDA+OgA42MCjI8NMD4uJGow35qm/wQ8Ht52/jfEeWCI86AQ58EhzkNCnIeGOA8LcR6+Q1GDx9c35Qm1J9aeVHty7Sm1p9aeVnu6UYPNXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8PiAh8VPCDA+McD4pADjkwOMTwkwPjXA+LQA49NDogbn2JqmIwIeD287jwxxHhXiPDrEeUyI89gQ57RPhvM4Ic7jDnTu+dv/jPqmPLP2rNqza8+pPbf2vNrzay8warDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNnhHwsPiZAcZnBRifHWB8ToDxuQHG5wUYnx9gfEFI1OCcW9N0vIDHw9vO44c4TxDiPGGI80QhzhOHOE8S4jxpiPNkOxQ1eGF9U15Ue3HtJbWX1l5We3ntFbVXGjXY7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBi8MeFj8ogDjiwOMLwkwvjTA+LIA48sDjK8IML4yJGpwrq1pOnnA4+Ft5ylCnKcMcZ4qxHnqEOdpQpynDXGeLsR5+h2KGryqvimvrr2m9tra62qvr72h9sbam4wabPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNXBTwsfnWA8TUBxtcGGF8XYHx9gPENAcY3BhjfFBI1OPfWNJ0h4PHwtvOMIc4zhTjPHOI8S4jzrCHOs4U4zx7i3GuHogZvrm/KW2pvrb2t9vbaO2rvrL2r9m6jBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgzQEPi98SYHxrgPFtAca3BxjfEWB8Z4DxXQHGd4dEDc6zNU17Bzwe3nbuE+LcFeKchTjnIc5zhDjPGeI8V4jz3DsUNXhPfVPeW3tf7f21D9Q+WPtQ7cO1jxg12Ow1asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogbvCXhY/N4A4/sCjO8PMH4gwPjBAOOHAowfDjB+JCRqcN6taTpPwOPhbed5Q5znC3GeP8R5gRDnBUOcFwpxXjjEeZEdihp8tL4pH6t9vPaJ2idrn6p9uvaZ2meNGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDjwY8LP5YgPHjAcZPBBg/GWD8VIDx0wHGzwQYPxsSNTjfVv1vBDwe3nZuhTgvGuK8WIjz4iHOS4Q4LxnivFSI89I7FDX4XH1TPl/7Qu2LtS/Vvlz7Su2rta8ZNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWudN//8ZNfjfNBo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixp8LuBh8ecDjF8IMH4xwPilAOOXA4xfCTB+NcD4tZCowfm3pukyAY+Ht52XDXFeLsR5+RDnFUKcVwxxXinEeeUQ52KHogZfr2/KN2rfrH2r9u3ad2rfrX2v9n2jBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTg6wEPi78RYPxmgPFbAcZvBxi/E2D8boDxewHG74dEDS6wNU3LgMfD286rhDivGuK8Wojz6iHOa4Q4rxnivFaI89o7FDX4QX1Tflj7Ue3HtZ/Uflr7We3ntV8YNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGPwh4WPzDAOOPAow/DjD+JMD40wDjzwKMPw8w/iIkanDBrWm6TsDj4W3ndUOc1wtxXj/EeYMQ5w1DnDcKcd44xHmTHYoa/LK+Kb+q/br2m9pva7+r/b72h9ofjRps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg18GPCz+VYDx1wHG3wQYfxtg/F2A8fcBxj8EGP8YEjW40NY03TTg8fC282YhzpuHOG8R4rxliPNWIc5bhzhvE+K87Q5FDf5U35Q/1/5S+2vtb7W/1/5R+2ftX0YNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMGfAh4W/znA+JcA418DjH8LMP49wPiPAOM/A4z/CokaXHhrmm4X8Hh423n7EOcdQpx3DHGuQpzrEOedQpx3DnHeZYeiBv+ub8p/av+tHVg7qHZw7ZDaobXDjBps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg38HPCz+T4DxvwHGAwOMBwUYDw4wHhJgPDTAeFhI1OAiW9N014DHw9vOu4U47x7ivEeI854hznuFOO8d4rxPiPO+OxQ1OLy+KUfUjqwdVTu6dkzt2O1/iK5/6D3O9j/2GjX4v71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1ODwgIfFRwQYjwwwHhVgPDrAeEyA8dgA4/YDzv9143FuOub3HP9v57am6X4Bj4e3nfcPcT4gxPnAEOeDQpwPDnE+JMT50BDnw3YoanDc+qYcr3b82glqJ6ydqHbi2klqJzVqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ2OG/Cw+HgBxuMHGE8QYDxhgPFEAcYTBxhPEmA8aUjUYPs/THt4wOPhbecjQpyPDHE+KsS5b4hzvxDn/iHOA0Kcj96hqMHJ6pty8topaqesnap26tppaqetnc6owWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjU4WcDD4pMHGE8RYDxlgPFUAcZTBxhPE2A8bYDxdCFRg4tuTdNjAh4PbzsfG+J8XIjz8SHOJ4Q4nxjifFKI88khzqfsUNTg9PVNOUPtjLUz1c5cO0vtrLWz1c5u1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsanD7gYfEZAoxnDDCeKcB45gDjWQKMZw0wni3AePaQqMHFtqbpqQGPh7edTwtxPj3E+YwQ5zNDnM8KcT47xPmcEOdzdyhqsFd9U/au7VPbVZvV5rVz1M5ZO5dRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWqwV8DD4r0DjPsEGHcFGGcBxnmA8RwBxnMGGM8VEjW4+NY0PS/g8fC28/khzheEOF8Y4nxRiPPFIc6XhDhfGuJ82Q5FDc5d35Tz1M5bO1/t/LUL1C5Yu1DtwkYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMG5Ax4WnyfAeN4A4/kCjOcPMF4gwHjBAOOFAowXDokaXGJrml4e8Hh42/mKEOcrQ5yvCnG+OsT5mhDna0Ocrwtxvn6HogYXqW9Kq23/o+5FaxerXbx2idola5cyarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUYP/71rfGTWAjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDiwQ8LG4Bxq0A40UDjBcLMF48wHiJAOMlA4yXCokaXHJrmt4Q8Hh42/nGEOebQpxvDnG+JcT51hDn20Kcbw9xvmOHogaXrm/KZWqXrV2udvnaFWpXrF1p+3tj1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaXDrgYfFlAoyXDTBeLsB4+QDjFQKMVwwwXinAeOWQqMGltqbpnQGPh7ed7wpxvjvE+Z4Q53tDnO8Lcb4/xPmBEOcHdyhqsKhvyrJ2ldpVa1erXb12jdo1a9cyarDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNFgEPi5cBxqsEGK8aYLxagPHqAcZrBBivGWC8VkjU4NJb0/ShgMfD284Phzg/EuL8aIjzYyHOj4c4PxHi/GSI81M7FDW4dn1TrlO7bu16tevXblC7Ye1GtRsbNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IG1w54WHydAON1A4zXCzBeP8B4gwDjDQOMNwow3jgkanCZrWn6dMDj4W3nZ0Kcnw1xfi7E+fkQ5xdCnF8McX4pxPnlHYoa3KS+KTet3ax289otares3ap269ptjBps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg5sEPCy+aYDxZgHGmwcYbxFgvGWA8VYBxlsHGG8TEjW47NY0fSXg8fC286shzq+FOL8e4vxGiPObIc5vhTi/HeL8zg5FDW5b35Tb1W5fu0PtjrVVbV27U+3ORg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowW0DHhbfLsB4+wDjHQKMdwwwrgKM6wDjnQKMdw6JGlxua5q+G/B4eNv5vRDn90OcPwhx/jDE+aMQ549DnD8Jcf50h6IGd6lvyl1rd6vdvXaP2j1r96rdu3YfowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4C4BD4vvGmC8W4Dx7gHGewQY7xlgvFeA8d4BxvuERA0uvzVNPwt4PLzt/HmI8xchzl+GOH8V4vx1iPM3Ic7fhjh/t0NRg/vWN+V+tfvXHlB7YO1BtQfXHlJ7qFGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtanDfgIfF9wsw3j/A+IAA4wMDjA8KMD44wPiQAONDQ6IGV9iapt8HPB7edv4hxPnHEOefQpx/DnH+JcT51xDn30Kcf9+hqMHD6pvy8Nojao+sPaq2b22/2v61A4wabPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYOHBTwsfniA8REBxkcGGB8VYNw3wLhfgHH/AOMBIVGDK25N0z8CHg9vO/8Z4vxXiPPfIc7/hDj/G+I8MMR5UIjz4B2KGjy6vimPqT229rja42tPqD2x9qTak40abPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNHBzwsfkyA8bEBxscFGB8fYHxCgPGJAcYnBRifHBI1uNLWNB0S8Hh423loiPOwEOfhIc4jQpxHhjiPCnEeHeI8ZoeiBk+pb8pTa0+rPb32jNoza8+qPbv2HKMGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OApAQ+LnxpgfFqA8ekBxmcEGJ8ZYHxWgPHZAcbnhEQNrrw1TccGPB7edk67MpzHCXEeN8R5vBDn8UOcJwhxnjDEeaKBzj1/+59b35Tn1Z5fe0HthbUX1V5ce0ntpUYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMFzAx4WPy/A+PwA4wsCjC8MML4owPjiAONLAowvDYkaLLam6cS7pt1HmmnnSUKcJw1xnizEefIQ5ylCnKcMcZ4qxHnqgc49f/tfVt+Ul9deUXtl7VW1V9deU3tt7XVGDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBywIeFr88wPiKAOMrA4yvCjC+OsD4mgDjawOMrwuJGiy3puk0u6bdR5pp52lDnKcLcZ4+xHmGEOcZQ5xnCnGeOcR5loHOPX/7X1/flDfU3lh7U+3NtbfU3lp7W+3tRg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowesDHha/IcD4xgDjmwKMbw4wviXA+NYA49sCjG8PiRpcZWuazrpr2n2kmXaeLcR59hDnXiHOvUOc+4Q4d4U4ZyHO+UDnnr/976hvyjtr76q9u/ae2ntr76u9v/YBowabvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4B0BD4vfGWB8V4Dx3QHG9wQY3xtgfF+A8f0Bxg+ERA2uujVN59g17T7STDvPGeI8V4jz3CHO84Q4zxviPF+I8/whzgsMdO752//B+qZ8qPbh2kdqH619rPbx2idqnzRqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ0+GPCw+EMBxg8HGD8SYPxogPFjAcaPBxg/EWD8ZEjU4Gpb03TBXdPuI82080IhzguHOC8S4mwhzq0Q50VDnBcLcV58oHPP3/5P1Tfl07XP1D5b+1zt87Uv1L5Y+5JRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrwqYCHxZ8OMH4mwPjZAOPnAoyfDzB+IcD4xQDjl0KiBlffmqZL7Jp2H2mmnZcMcV4qxHnpEOdlQpyXDXFeLsR5+RDnFQY69/zt/3J9U75S+2rta7Wv175R+2btW7VvGzXY7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBl8OeFj8lQDjVwOMXwswfj3A+I0A4zcDjN8KMH47JGpwja1puuKuafeRZtp5pRDnlUOcixDnMsR5lRDnVUOcVwtxXn2gc8/f/u/UN+W7te/Vvl/7Qe2HtR/Vflz7iVGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavCdgIfF3w0wfi/A+P0A4w8CjD8MMP4owPjjAONPQqIG19yapmvsmnYfaaad1wxxXivEee0Q53VCnNcNcV4vxHn9EOcNBjr3/O3/aX1Tflb7ee0XtV/WflX7de03td8aNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGPw14WPyzAOPPA4y/CDD+MsD4qwDjrwOMvwkw/jYkanCtrWm64a5p95Fm2nmjEOeNQ5w3CXHeNMR5sxDnzUOctwhx3nKgc8/f/t/VN+X3tT/U/lj7U+3Ptb/U/lr7m1GDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavC7gIfFvw8w/iHA+McA458CjH8OMP4lwPjXAOPfQqIG196aplvtmnYfaaadtw5x3ibEedsQ5+1CnLcPcd4hxHnHEOdqoHPP3/6/1zflH7V/1v5V+3ftP7X/1g6sHWTUYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixr8PeBh8T8CjP8MMP4rwPjvAON/Aoz/DTAeGGA8KCRqcJ2taVrvmnYfaaaddwpx3jnEeZcQ511DnHcLcd49xHmPEOc9Bzr3/O0/uL4ph9QOrR1WO7x2RO3I2lG1o40abPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYODAx4WHxJgPDTAeFiA8fAA4xEBxiMDjEcFGI8OiRpcd2ua7rVr2n2kmXbeO8R5nxDnfUOc9wtx3j/E+YAQ5wNDnA8a6Nzzt/+Y+qYcu/0PuvUPpsepHbd2vNrxayeonXD7H1KNGvzfXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcEzAw+JjA4zbD9T+143HCTAeN8B4vADj8QOMJwgwnvBmY37P8X+n3JqmB++adh9ppp0PCXE+NMT5sBDnw0OcjwhxPjLE+agQ574DnXv+9p+oviknrp2kdtLayWonr52idsraqYwabPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYMTBTwsPnGA8SQBxpMGGE8WYDx5gPEUAcZTBhhPFRI1uP7WNO23a9p9pJl27h/iPCDE+egQ52NCnI8NcT4uxPn4EOcTBjr3/O0/dX1TTlM7be10tdPXzlA7Y+1MtTMbNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGpw54WHyaAONpA4ynCzCePsB4hgDjGQOMZwownjkkanCDrWl64q5p95Fm2vmkEOeTQ5xPCXE+NcT5tBDn00OczwhxPnOgc8/f/rPUN+WstbPVzl7bq7Z3bZ/artrMqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1OEvAw+KzBhjPFmA8e4BxrwDj3gHGfQKMuwKMs5CowQ23pulZu6bdR5pp57NDnM8JcT43xPm8EOfzQ5wvCHG+MMT5ooHOPX/75/VNOUftnLVz1c5dO0/tvLXz1c5v1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsazAMeFp8jwHjOAOO5AoznDjCeJ8B43gDj+QKM5w+JGtxoa5pevGvafaSZdr4kxPnSEOfLQpwvD3G+IsT5yhDnq0Kcrx7o3PO3/wL1Tblg7UK1C9cuUmu17X9AvWjtYkYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMEFAh4WXzDAeKEA44UDjBcJMLYA41aA8aIBxouFRA1uvDVNr9k17T7STDtfG+J8XYjz9SHON4Q43xjifFOI880hzrcMdO7523/x+qZconbJ2qVql65dpnbZ2uVqlzdqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ0uHvCw+BIBxksGGC8VYLx0gPEyAcbLBhgvF2C8fEjU4CZb0/TWXdPuI820820hzreHON8R4nxniPNdIc53hzjfE+J870Dnnr/9V6hvyhVrV9r+ttQWtWXtKrWr1q5m1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaXCHgYfEVA4xXCjBeOcC4CDAuA4xXCTBeNcB4tZCowU23pul9u6bdR5pp5/tDnB8IcX4wxPmhEOeHQ5wfCXF+NMT5sYHOPX/7r17flGvUrlm7Vu3atevUrlu7Xu36Rg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowdUDHhZfI8B4zQDjtQKM1w4wXifAeN0A4/UCjNcPiRrcbGuaPr5r2n2kmXZ+IsT5yRDnp0Kcnw5xfibE+dkQ5+dCnJ8f6Nzzt/8G9U25Ye1GtRvXblK7ae1mtZvXbmHUYLPXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixrcIOBh8Q0DjDcKMN44wHiTAONNA4w3CzDePMB4i5Cowc23pukLu6bdR5pp5xdDnF8KcX45xPmVEOdXQ5xfC3F+PcT5jYHOPX/7b1nflFvVbl27Te22tdvVbl+7Q+2ORg02e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowS0DHhbfKsB46wDjbQKMtw0w3i7AePsA4x0CjHcMiRrcYmuavrlr2n2kmXZ+K8T57RDnd0Kc3w1xfi/E+f0Q5w9CnD8c6Nzzt39V35R17U61O9fuUrtr7W61u9fuYdRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGqwCHhavA4x3CjDeOcB4lwDjXQOMdwsw3j3AeI+QqMEtt6bpR7um3UeaaeePQ5w/CXH+NMT5sxDnz0Ocvwhx/jLE+auBzj1/++9Z35R71e5du0/tvrX71e5fe0DtgUYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qME9Ax4W3yvAeO8A430CjPcNMN4vwHj/AOMDAowPDIka3Gprmn69a9p9pJl2/ibE+dsQ5+9CnL8Pcf4hxPnHEOefQpx/Hujc87f/QfVNeXDtIbWH1h5We3jtEbVH1h5l1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaPCjgYfGDA4wPCTA+NMD4sADjwwOMjwgwPjLA+KiQqMGtt6bpL7um3UeaaedfQ5x/C3H+PcT5jxDnP0Oc/wpx/jvE+Z+Bzj1/+/etb8p+tf1rB9QeXXtM7bG1x9Ueb9Rgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGuwb8LB4vwDj/gHGAwKMjw4wPibA+NgA4+MCjI8PiRrcZmua/rtr2n2kmXYeGOI8KMR5cIjzkBDnoSHOw0Kch4c4jxjo3PO3/wn1TXli7Um1J9eeUntq7Wm1p9eeYdRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGjwh4GHxEwOMTwowPjnA+JQA41MDjE8LMD49wPiMkKjBbbem6chd0+4jzbTzqBDn0SHOY0Kcx4Y4p1mG8zghzuOGOI830Lnnb/8z65vyrNqza8+pPbf2vNrzay+ovdCowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjV4ZsDD4mcFGJ8dYHxOgPG5AcbnBRifH2B8QYDxhSFRg9ttTdPxZ9PuI8208wQhzhOGOE8U4jxxiPMkIc6ThjhPFuI8+Q5FDV5U35QX115Se2ntZbWX115Re2XtVUYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMGLAh4WvzjA+JIA40sDjC8LML48wPiKAOMrA4yvCoka3H5rmk4xm3YfaaadpwxxnirEeeoQ52lCnKcNcZ4uxHn6EOcZdihq8Or6prym9tra62qvr72h9sbam2pvNmqw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDV4d8LD4NQHG1wYYXxdgfH2A8Q0BxjcGGN8UYHxzSNTgDlvTdMbZtPtIM+08U4jzzCHOs4Q4zxriPFuI8+whzr1CnHvvUNTgLfVNeWvtbbW3195Re2ftXbV3195j1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsavCXgYfFbA4xvCzC+PcD4jgDjOwOM7wowvjvA+J6QqMEdt6Zpn9m0+0gz7dwV4pyFOOchznOEOM8Z4jxXiPPcIc7z7FDU4L31TXlf7f21D9Q+WPtQ7cO1j9Q+atRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGrw34GHx+wKM7w8wfiDA+MEA44cCjB8OMH4kwPjRkKjBamuazjubdh9ppp3nC3GeP8R5gRDnBUOcFwpxXjjEeZEQZ9uhqMHH6pvy8donap+sfar26dpnap+tfc6owWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjX4WMDD4o8HGD8RYPxkgPFTAcZPBxg/E2D8bIDxcyFRg/XWNP2/Dx3Y/902wnnREOfFQpwXD3FeIsR5yRDnpUKclw5xXmaHogafr2/KF2pfrH2p9uXaV2pfrX2t9nWjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTg8wEPi78QYPxigPFLAcYvBxi/EmD8aoDxawHGr4dEDe60NU2XnU27jzTTzsuFOC8f4rxCiPOKIc4rhTivHOJchDiXOxQ1+EZ9U75Z+1bt27Xv1L5b+17t+7UfGDXY7DVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBt8IeFj8zQDjtwKM3w4wfifA+N0A4/cCjN8PMP4gJGpw561pusps2n2kmXZeNcR5tRDn1UOc1whxXjPEea0Q57VDnNfZoajBD+ub8qPaj2s/qf209rPaz2u/qP3SqMFmr1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1+GHAw+IfBRh/HGD8SYDxpwHGnwUYfx5g/EWA8ZchUYO7bE3TdWfT7iPNtPN6Ic7rhzhvEOK8YYjzRiHOG4c4bxLivOkORQ1+Vd+UX9d+U/tt7Xe139f+UPtj7U9GDTZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBrwIeFv86wPibAONvA4y/CzD+PsD4hwDjHwOMfwqJGtx1a5puNpt2H2mmnTcPcd4ixHnLEOetQpy3DnHeJsR52xDn7XYoavDn+qb8pfbX2t9qf6/9o/bP2r9q/zZqsNlr1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ3+HPCw+C8Bxr8GGP8WYPx7gPEfAcZ/Bhj/FWD8d0jU4G5b03T72bT7SDPtvEOI844hzlWIcx3ivFOI884hzruEOO+6Q1GD/9Q35b+1A2sH1Q6uHVI7tHZY7XCjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgPwEPi/8bYDwwwHhQgPHgAOMhAcZDA4yHBRgPD4ka3H1rmu42m3Yfaaaddw9x3iPEec8Q571CnPcOcd4nxHnfEOf9dihqcER9U46sHVU7unZM7djtfzytf5w8Tu242/9IadTg//YaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYMjAh4WHxlgPCrAeHSA8ZgA47EBxu0Hkv/rxuMEGI978zG/57TzHlvTdP/ZtPtIM+18QIjzgSHOB4U4HxzifEiI86EhzoeFOB++Q1GD49U35fi1E9ROWDtR7cS1k9ROWjuZUYPNXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcLyAh8XHDzCeIMB4wgDjiQKMJw4wniTAeNIA48lCogb33JqmR8ym3UeaaecjQ5yPCnHuG+LcL8S5f4jzgBDno0Ocj9mhqMHJ65tyitopa6eqnbp2mtppa6ernd6owWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjU4ecDD4lMEGE8ZYDxVgPHUAcbTBBhPG2A8XYDx9CFRg3ttTdNjZ9PuI82083EhzseHOJ8Q4nxiiPNJIc4nhzifEuJ86g5FDc5Q35Qz1s5UO3PtLLWz1s5WO3ttL6MGm71GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OAMAQ+LzxhgPFOA8cwBxrMEGM8aYDxbgPHsAca9QqIG996apqfNpt1Hmmnn00OczwhxPjPE+awQ57NDnM8JcT43xPm8HYoa7F3flH1qu2qz2rx2jto5a+eqnduowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjXYO+Bh8T4Bxl0BxlmAcR5gPEeA8ZwBxnMFGM8dEjW4z9Y0PX827T7STDtfEOJ8YYjzRSHOF4c4XxLifGmI82UhzpfvUNTgPPVNOW/tfLXz1y5Qu2DtQrUL1y5i1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsanCfgYfF5A4znCzCeP8B4gQDjBQOMFwowXjjAeJGQqMF9t6bpFbNp95Fm2vnKEOerQpyvDnG+JsT52hDn60Kcrw9xvmGHogatvinb/xB50drFahevXaJ2ydqlapc2arDZa9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNWsDD4q0A40UDjBcLMF48wHiJAOMlA4yXCjBeOiRqcL+taXrjbNp9pJl2vinE+eYQ51tCnG8Ncb4txPn2EOc7Qpzv3KGowWXqm3LZ2uVql69doXbF2pW2vzW1hVGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtanCZgIfFlw0wXi7AePkA4xUCjFcMMF4pwHjlAOMiJGpw/61petds2n2kmXa+O8T5nhDne0Oc7wtxvj/E+YEQ5wdDnB/aoajBsr4pV6ldtXa12tVr16hds3at2rWNGmz2GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDZcDD4qsEGK8aYLxagPHqAcZrBBivGWC8VoDx2iFRgwdsTdOHZ9PuI8208yMhzo+GOD8W4vx4iPMTIc5Phjg/FeL89A5FDa5T35Tr1q5Xu37tBrUb1m5Uu3HtJkYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMF1Ah4WXzfAeL0A4/UDjDcIMN4wwHijAOONA4w3CYkaPHBrmj4zm3Yfaaadnw1xfi7E+fkQ5xdCnF8McX4pxPnlEOdXdihqcNP6ptysdvPaLWq3rN2qduvabWq3NWqw2WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDW4a8LD4ZgHGmwcYbxFgvGWA8VYBxlsHGG8TYLxtSNTgQVvT9NXZtPtIM+38Wojz6yHOb4Q4vxni/FaI89shzu+EOL+7Q1GD29U35fa1O9TuWFvV1rU71e5cu4tRg81eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWpwu4CHxbcPMN4hwHjHAOMqwLgOMN4pwHjnAONdQqIGD96apu/Npt1Hmmnn90OcPwhx/jDE+aMQ549DnD8Jcf40xPmzHYoa3LW+KXer3b12j9o9a/eq3bt2n9p9jRps9ho1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGvx/1/rOqAFkNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4K4BD4vvFmC8e4DxHgHGewYY7xVgvHeA8T4BxvuGRA0esjVNP59Nu480085fhDh/GeL8VYjz1yHO34Q4fxvi/F2I8/c7FDW4X31T7l97QO2BtQfVHlx7SO2htYcZNdjsNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IG9wt4WHz/AOMDAowPDDA+KMD44ADjQwKMDw0wPiwkavDQrWn6w2zafaSZdv4xxPmnEOefQ5x/CXH+NcT5txDn30Oc/9ihqMHD65vyiNoja4+q7Vvbr7Z/7YDao40abPYaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYOHBzwsfkSA8ZEBxkcFGPcNMO4XYNw/wHhAgPHRIVGDh21N0z9n0+4jzbTzXyHOf4c4/xPi/G+I88AQ50EhzoNDnIfsUNTgMfVNeWztcbXH155Qe2LtSbUn155i1GCz16gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaPCbgYfFjA4yPCzA+PsD4hADjEwOMTwowPjnA+JSQqMHDt6bp0Nm0+0gz7TwsxHl4iPOIEOeRIc6jQpxHhziPCXEeu0NRg6fWN+VptafXnlF7Zu1ZtWfXnlN7rlGDzV6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavDUgIfFTwswPj3A+IwA4zMDjM8KMD47wPicAONzQ6IGj9j+D9Pm0+4jzbTzOCHO44Y4jxfiPH6I8wQhzhOGOE8U4jzxQOeev/3Pq2/K82svqL2w9qLai2svqb209jKjBpu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgeQEPi58fYHxBgPGFAcYXBRhfHGB8SYDxpQHGl4VEDR65Vf/b82n3kWbaedIQ58lCnCcPcZ4ixHnKEOepQpynDnGeZqBzz9/+l9c35RW1V9ZeVXt17TW119ZeV3u9UYPNXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8PKAh8WvCDC+MsD4qgDjqwOMrwkwvjbA+LoA4+tDogaP2pqm086n3UeaaefpQpynD3GeIcR5xhDnmUKcZw5xniXEedaBzj1/+99Q35Q31t5Ue3PtLbW31t5We3vtHUYNNnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMEbAh4WvzHA+KYA45sDjG8JML41wPi2AOPbA4zvCIka7Ls1TWebT7uPNNPOs4c49wpx7h3i3CfEuSvEOQtxzkOc5xjo3PO3/531TXlX7d2199TeW3tf7f21D9Q+aNRgs9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGrwz4GHxuwKM7w4wvifA+N4A4/sCjO8PMH4gwPjBkKjBflvTdM75tPtIM+08V4jz3CHO84Q4zxviPF+I8/whzguEOC840Lnnb/+H6pvy4dpHah+tfaz28donap+sfcqowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjX4UMDD4g8HGD8SYPxogPFjAcaPBxg/EWD8ZIDxUyFRg/23pulC82n3kWbaeeEQ50VCnC3EuRXivGiI82IhzouHOC8x0Lnnb/+n65vymdpna5+rfb72hdoXa1+qfdmowWavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjX4dMDD4s8EGD8bYPxcgPHzAcYvBBi/GGD8UoDxyyFRgwO2pumS82n3kWbaeakQ56VDnJcJcV42xHm5EOflQ5xXCHFecaBzz9/+r9Q35au1r9W+XvtG7Zu1b9W+XfuOUYPNXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUYP/h517ipV2S9+2f7dt92pVtT3m03ZXtW2zqm3btm3btm3bdvey8V2VfFlZO2/tjGPM/M/kuJJz98kva6PuZGaNgzEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixp8I+Bh8TcDjN8KMH47wPidAON3A4zfCzB+P8D4g5CoweN3pulK8+noI82088ohzkWIcxnivEqI86ohzquFOK8e4rzGQOcxf/t/WN+UH9V+XPtJ7ae1n9V+XvtF7ZdGDbZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBDwMeFv8owPjjAONPAow/DTD+LMD48wDjLwKMvwyJGjxhZ5quOZ+OPtJMO68V4rx2iPM6Ic7rhjivF+K8fojzBiHOGw50HvO3/1f1Tfl17Te139Z+V/t97Q+1P9b+ZNRgu9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGvwq4GHxrwOMvwkw/jbA+LsA4+8DjH8IMP4xwPinkKjBE3em6Ubz6egjzbTzxiHOm4Q4bxrivFmI8+YhzluEOG8Z4rzVQOcxf/v/XN+Uv9T+Wvtb7e+1f9T+WftX7d9GDbZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBnwMeFv8lwPjXAOPfAox/DzD+I8D4zwDjvwKM/w6JGjxpZ5puPZ+OPtJMO28T4rxtiPN2Ic7bhzjvEOK8Y4hzFeJcD3Qe87f/P/VN+W/tf7W9a/vU9q3tV9u/doBRg+1eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrwn4CHxf8NMP4vwLh3gHGfAOO+Acb9Aoz7BxgPCIkaPHlnmu40n44+0kw77xzivEuI864hzruFOO8e4rxHiPOeIc57DXQe87f/wPqmHFQ7uHZI7dDaYbXDa0fUjjRqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ0ODHhYfFCA8eAA4yEBxkMDjIcFGA8PMB4RYDwyJGrwlJ1puvd8OvpIM+28T4jzviHO+4U47x/ifECI84EhzgeFOB880HnM3/6jNn+ErD/yHat27NpxasetHa92/NoJNn8ANGrw//YaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYOjAh4Wbx6A/V83HivAeOwA43ECjMcNMB4vwHj8AOMJbjHm95x2PnVnmh4yn44+0kw7HxrifFiI8+EhzkeEOB8Z4nxUiPPRIc7HDHQe87f/hPVNOVHtxLWT1E5aO1nt5LVT1E5p1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsanDDgYfGJAownDjCeJMB40gDjyQKMJw8wniLAeMqQqMHTdqbpsfPp6CPNtPNxIc7HhzifEOJ8YojzSSHOJ4c4nxLifOpA5zF/+09V35RT105TO23tdLXT185QO2PtTEYNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMGpAh4WnzrAeJoA42kDjKcLMJ4+wHiGAOMZA4xnCokaPH1nmp42n44+0kw7nx7ifEaI85khzmeFOJ8d4nxOiPO5Ic7nDXQe87f/zPVN2at2ltpZa2ernb12jtqsNjdqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ3OHPCweK8A41kCjGcNMJ4twHj2AOM5AoyzAOM8JGrwjJ1pev58OvpIM+18QYjzhSHOF4U4XxzifEmI86UhzpeFOF8+0HnM3/5z1jflXLVz185TO2/tfLXz1y5Qu6BRg+1eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWpwzoCHxecKMJ47wHieAON5A4znCzCeP8B4gQDjBUOiBs/cmaZXzKejjzTTzleGOF8V4nx1iPM1Ic7XhjhfF+J8fYjzDQOdx/ztv1B9Uy5cu0jtorVW2/zRb0/tYrWLGzXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBhcKeFh84QDjRQKMFw0wtgDjToBxT4DxYgHGi4dEDZ61M01vnE9HH2mmnW8Kcb45xPmWEOdbQ5xvC3G+PcT5jhDnOwc6j/nbf4n6plyydqnapWuXqV22drna5WtXMGqw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDS4R8LD4kgHGSwUYLx1gvEyA8bIBxssFGC8fYLxCSNTg2TvT9K75dPSRZtr57hDne0Kc7w1xvi/E+f4Q5wdCnB8McX5ooPOYv/1XrG/KlTbfldqitqxdpXbV2tVqVzdqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ2uGPCw+EoBxisHGBcBxmWA8SoBxqsGGK8WYLx6SNTgOTvT9OH5dPSRZtr5kRDnR0OcHwtxfjzE+YkQ5ydDnJ8KcX56oPOYv/3XqG/KNWvXql27dp3adWvXq12/dgOjBtu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgGgEPi68ZYLxWgPHaAcbrBBivG2C8XoDx+gHGG4REDZ67M02fmU9HH2mmnZ8NcX4uxPn5EOcXQpxfDHF+KcT55RDnVwY6j/nbf8P6ptyoduPaTWo3rd2sdvPaLWq3NGqw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDW4Y8LD4RgHGGwcYbxJgvGmA8WYBxpsHGG8RYLxlSNTgeTvT9NX5dPSRZtr5tRDn10Oc3whxfjPE+a0Q57dDnN8JcX53oPOYv/23qm/KrWu3qd22drva7Wt3qN2xtjJqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ1uFfCw+NYBxtsEGG8bYLxdgPH2AcY7BBjvGGBchUQNnr8zTd+bT0cfaaad3w9x/iDE+cMQ549CnD8Ocf4kxPnTEOfPBjqP+du/rm/KnWp3rt2ldtfa3Wp3r92jdk+jBtu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtRgHfCw+E4BxjsHGO8SYLxrgPFuAca7BxjvEWC8Z0jU4AU70/Tz+XT0kWba+YsQ5y9DnL8Kcf46xPmbEOdvQ5y/C3H+fqDzmL/996pvyr1r96ndt3a/2v1rD6g9sPYgowbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4F4BD4vvHWC8T4DxvgHG+wUY7x9gfECA8YEBxgeFRA1euDNNf5hPRx9ppp1/DHH+KcT55xDnX0Kcfw1x/i3E+fcQ5z8GOo/52//g+qY8pPbQ2sNqD689ovbI2qNqjzZqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ0eHPCw+CEBxocGGB8WYHx4gPERAcZHBhgfFWB8dEjU4EU70/TP+XT0kWba+a8Q579DnP8Jcf43xPm/EOfeIc59Qpz7DnQe87f/MfVNeWztcbXH155Qe2LtSbUn155i1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaPCbgYfFjA4yPCzA+PsD4hADjEwOMTwowPjnA+JSQqMGLd6Zpv/l09JFm2rl/iPOAEOeBIc6DQpwHhzgPCXEeGuI8bKDzmL/9T61vytNqT689o/bM2rNqz649p/ZcowbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4KkBD4ufFmB8eoDxGQHGZwYYnxVgfHaA8TkBxueGRA1esjNNh8+no480084jQpxHhjiPCnFO58xwHivEeewQ53FCnMcd6Dzmb//z6pvy/NoLai+svaj24tpLai+tvcyowXavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjV4XsDD4ucHGF8QYHxhgPFFAcYXBxhfEmB8aYDxZSFRg5fuTNPxAh4Pb5zHD3GeIMR5whDniUKcJw5xniTEedIQ58l2KWrw8vqmvKL2ytqraq+uvab22trraq83arDda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNXh7wsPgVAcZXBhhfFWB8dYDxNQHG1wYYXxdgfH1I1OBlO9N08oDHwxvnKUKcpwxxnirEeeoQ52lCnKcNcZ4uxHn6XYoavKG+KW+svan25tpbam+tva329to7jBps9xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRgzcEPCx+Y4DxTQHGNwcY3xJgfGuA8W0BxrcHGN8REjV4+c40nSHg8fDGecYQ55lCnGcOce4V4jxLiPOsIc6zhTjPvktRg3fWN+VdtXfX3lN7b+19tffXPlD7oFGD7V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtavDOgIfF7wowvjvA+J4A43sDjO8LML4/wPiBAOMHQ6IGr9iZpnMEPB7eOGchznmI85whznOFOM8d4jxPiPO8Ic7z7VLU4EP1Tflw7SO1j9Y+Vvt47RO1T9Y+ZdRgu9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGnwo4GHxhwOMHwkwfjTA+LEA48cDjJ8IMH4ywPipkKjBK3em6fwBj4c3zguEOC8Y4rxQiPPCIc6LhDgvGuJsIc6dXYoafLq+KZ+pfbb2udrna1+ofbH2pdqXjRps9xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg08HPCz+TIDxswHGzwUYPx9g/EKA8YsBxi8FGL8cEjV41c407Ql4PLxxXizEefEQ5yVCnJcMcV4qxHnpEOdlQpyX3aWowVfqm/LV2tdqX699o/bN2rdq3659x6jBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNfhKwMPirwYYvxZg/HqA8RsBxm8GGL8VYPx2gPE7IVGDV+9M0+UCHg9vnJcPcV4hxHnFEOeVQpxXDnEuQpzLEOdVdilq8N36pnyv9v3aD2o/rP2o9uPaT2o/NWqw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDb4b8LD4ewHG7wcYfxBg/GGA8UcBxh8HGH8SYPxpSNTgNTvTdNWAx8Mb59VCnFcPcV4jxHnNEOe1QpzXDnFeJ8R53V2KGvysvik/r/2i9svar2q/rv2m9tva74wabPcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYOfBTws/nmA8RcBxl8GGH8VYPx1gPE3AcbfBhh/FxI1eO3ONF0v4PHwxnn9EOcNQpw3DHHeKMR54xDnTUKcNw1x3myXoga/r2/KH2p/rP2p9ufaX2p/rf2t9nejBtu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTg9wEPi/8QYPxjgPFPAcY/Bxj/EmD8a4DxbwHGv4dEDV63M003D3g8vHHeIsR5yxDnrUKctw5x3ibEedsQ5+1CnLffpajBP+qb8s/av2r/rv2n9t/a/2p71/YxarDda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUN/hHwsPifAcZ/BRj/HWD8T4DxvwHG/wUY9w4w7hMSNXj9zjTdIeDx8MZ5xxDnKsS5DnHeKcR55xDnXUKcdw1x3m2Xogb71jdlv9r+tQNqB9YOqh1cO6R2qFGD7V6jBozRqAFjNGrAGI0aMEajBkYNWuf9//+MUYP/o8ZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNdg34GHxfgHG/QOMBwQYDwwwHhRgPDjAeEiA8dCQqMEbdqbp7gGPhzfOe4Q47xnivFeI894hzvuEOO8b4rxfiPP+uxQ1OKy+KYfXjqgdWTtq8we/+oPasWrHrh1n88c1owb/b69RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNTgs4GHx4QHGIwKMRwYYjwowbh4g/l83HivAeOwA43FuOeb3nHa+cWeaHhDweHjjfGCI80EhzgeHOB8S4nxoiPNhIc6HhzgfsUtRg+PWN+V4tePXTlA7Ye1EtRPXTlI7qVGD7V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtanDcgIfFxwswHj/AeIIA4wkDjCcKMJ44wHiSAONJQ6IGb9qZpkcGPB7eOB8V4nx0iPMxIc7HhjgfF+J8fIjzCSHOJ+5S1OBk9U05ee0UtVPWTlU7de00tdPWTmfUYLvXqAFjNGrAGI0aMEajBoxxr4n9PTdqYNSAMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtanCygIfFJw8wniLAeMoA46kCjKcOMJ4mwHjaAOPpQqIGb96ZpicFPB7eOJ8c4nxKiPOpIc6nhTifHuJ8RojzmSHOZ+1S1OD09U05Q+2MtTPVzlzbq3aW2llrZzNqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ1OH/Cw+AwBxjMGGM8UYDxzgHGvAONZAoxnDTCeLSRq8JadaXp2wOPhjfM5Ic7nhjifF+J8fojzBSHOF4Y4XxTifPEuRQ3OXt+Uc9RmtXntnLVz1c5dO0/tvEYNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHZAx4WnyPAOAswzgOM5wwwnivAeO4A43kCjOcNiRq8dWeaXhLweHjjfGmI82UhzpeHOF8R4nxliPNVIc5Xhzhfs0tRg/PVN+X8tQvULli7UO3CtYvULlprRg22e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowfkCHhafP8B4gQDjBQOMFwowXjjAeJEA40UDjC0kavC2nWl6bcDj4Y3zdSHO14c43xDifGOI800hzjeHON8S4nzrLkUNNn8821O7WO3itUvULlm7VO3StcsYNdjuNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGOwEPi/cEGC8WYLx4gPESAcZLBhgvFWC8dIDxMiFRg7fvTNPbAh4Pb5xvD3G+I8T5zhDnu0Kc7w5xvifE+d4Q5/t2KWpw2fqmXK52+doValesXWnznaktakujBtu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgsgEPiy8XYLx8gPEKAcYrBhivFGC8coBxEWBchkQN3rEzTe8PeDy8cX4gxPnBEOeHQpwfDnF+JMT50RDnx0KcH9+lqMFV6pty1drValevXaN2zdq1ateuXceowXavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjW4SsDD4qsGGK8WYLx6gPEaAcZrBhivFWC8doDxOiFRg3fuTNMnAh4Pb5yfDHF+KsT56RDnZ0Kcnw1xfi7E+fkQ5xd2KWpw3fqmXK92/doNajes3ah249pNajc1arDda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNrhvwsPh6AcbrBxhvEGC8YYDxRgHGGwcYbxJgvGlI1OBdO9P0xYDHwxvnl0KcXw5xfiXE+dUQ59dCnF8PcX4jxPnNXYoa3Ky+KTev3aJ2y9qtareu3aZ229rtjBps9xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg5sFPCy+eYDxFgHGWwYYbxVgvHWA8TYBxtsGGG8XEjV49840fSvg8fDG+e0Q53dCnN8NcX4vxPn9EOcPQpw/DHH+aJeiBrevb8odanesrWrr2p1qd67dpXZXowbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4PYBD4vvEGC8Y4BxFWBcBxjvFGC8c4DxLgHGu4ZEDd6zM00/Dng8vHH+JMT50xDnz0KcPw9x/iLE+csQ569CnL/epajB3eqbcvfaPWr3rN2rdu/afWr3rd3PqMF2r1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1uFvAw+K7BxjvEWC8Z4DxXgHGewcY7xNgvG+A8X4hUYP37kzTbwIeD2+cvw1x/i7E+fsQ5x9CnH8Mcf4pxPnnEOdfdilqcP/6pjyg9sDag2oPrj2k9tDaw2oPN2qw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDe4f8LD4AQHGBwYYHxRgfHCA8SEBxocGGB8WYHx4SNTgfTvT9NeAx8Mb599CnH8Pcf4jxPnPEOe/Qpz/DnH+J8T5312KGjyivimPrD2q9ujaY2qPrT2u9vjaE4wabPcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNHBDwsfmSA8VEBxkcHGB8TYHxsgPFxAcbHBxifEBI1eP/ONP0v4PHwxrl3iHOfEOe+Ic79Qpz7hzgPCHEeGOI8aJeiBk+sb8qTak+uPaX21NrTak+vPaP2TKMG271GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OCJAQ+LnxRgfHKA8SkBxqcGGJ8WYHx6gPEZAcZnhkQNPrAzTQcHPB7eOA8JcR4a4jwsxHl4iPOIEOeRIc6jQpzH/B/Faecxf/ufVd+UZ9eeU3tu7Xm159deUHth7UVGDbZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBswIeFj87wPicAONzA4zPCzA+P8D4ggDjCwOMLwqJGnxwp/7NgY9ySeexQ5zHCXEeN8R5vBDn8UOcJwhxnjDEeaJdihq8uL4pL6m9tPay2strr6i9svaq2quNGmz3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDFwc8LH5JgPGlAcaXBRhfHmB8RYDxlQHGVwUYXx0SNfjQzjSdOODx8MZ5khDnSUOcJwtxnjzEeYoQ5ylDnKcKcZ56l6IGr6lvymtrr6u9vvaG2htrb6q9ufYWowbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4DUBD4tfG2B8XYDx9QHGNwQY3xhgfFOA8c0BxreERA0+vDNNpwl4PLxxnjbEeboQ5+lDnGcIcZ4xxHmmEOeZQ5x77VLU4K31TXlb7e21d9TeWXtX7d2199Tea9Rgu9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGrw14GHx2wKMbw8wviPA+M4A47sCjO8OML4nwPjekKjBR3am6SwBj4c3zrOGOM8W4jx7iPMcIc5ZiHMe4jxniPNcuxQ1eF99U95f+0Dtg7UP1T5c+0jto7WPGTXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBu8LeFj8/gDjBwKMHwwwfijA+OEA40cCjB8NMH4sJGrw0Z1pOnfA4+GN8zwhzvOGOM8X4jx/iPMCIc4LhjgvFOK88C5FDT5e35RP1D5Z+1Tt07XP1D5b+1zt80YNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHHAx4WfyLA+MkA46cCjJ8OMH4mwPjZAOPnAoyfD4kafGxnmi4S8Hh447xoiLOFOHdCnHtCnBcLcV48xHmJEOcldylq8IX6pnyx9qXal2tfqX219rXa12vfMGqw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDb4Q8LD4iwHGLwUYvxxg/EqA8asBxq8FGL8eYPxGSNTg4zvTdKmAx8Mb56VDnJcJcV42xHm5EOflQ5xXCHFeMcR5pV2KGnyzvinfqn279p3ad2vfq32/9oPaD40abPcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNvBjws/laA8dsBxu8EGL8bYPxegPH7AcYfBBh/GBI1+MRO/VsBj4c3zkWIcxnivEqI86ohzquFOK8e4rxGiPOauxQ1+FF9U35c+0ntp7Wf1X5e+0Xtl7VfGTXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBj8KeFj84wDjTwKMPw0w/izA+PMA4y8CjL8MMP4qJGrwyZ1pulbA4+GN89ohzuuEOK8b4rxeiPP6Ic4bhDhvGOK80S5FDX5d35Tf1H5b+13t97U/1P5Y+1Ptz0YNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMGvAx4W/ybA+NsA4+8CjL8PMP4hwPjHAOOfAox/DokafGpnmm4c8Hh447xJiPOmIc6bhThvHuK8RYjzliHOW4U4b71LUYO/1Dflr7W/1f5e+0ftn7V/1f5d+49Rg+1eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrwl4CHxX8NMP4twPj3AOM/Aoz/DDD+K8D47wDjf0KiBp/emabbBDwe3jhvG+K8XYjz9iHOO4Q47xjiXIU41yHOO+1S1OC/9U35X23v2j61fWv71favHVA70KjBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNfhvwMPi/wUY9w4w7hNg3DfAuF+Acf8A4wEBxgNDogaf2ZmmOwc8Ht447xLivGuI824hzruHOO8R4rxniPNeIc5771LU4KD6phxcO6R2aO2w2uG1I2pH1o4yarDda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNDgp4WHxwgPGQAOOhAcbDAoyHBxiPCDAeGWA8KiRq8NmdabpPwOPhjfO+Ic77hTjvH+J8QIjzgSHOB4U4HxzifMguRQ2m+sPUsWrHrh2ndtza8WrHr52gdsLNH66MGvy/vUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYPPA6v/6f9NjBRiPHWA8ToDxuAHG4wUYjx9gPEGA8YS3GvN7Tjs/tzNNDw14PLxxPizE+fAQ5yNCnI8McT4qxPnoEOdjQpyP3aWowYnqm3Li2klqJ62drHby2ilqp6ydyqjBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNThRwMPiEwcYTxJgPGmA8WQBxpMHGE8RYDxlgPFUIVGDz+9M0+MCHg9vnI8PcT4hxPnEEOeTQpxPDnE+JcT51BDn03YpanDq+qacpnba2ulqp6+doXbG2plqZzZqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ1OHfCw+DQBxtMGGE8XYDx9gPEMAcYzBhjPFGA8c0jU4As70/T0gMfDG+czQpzPDHE+K8T57BDnc0Kczw1xPi/E+fxdihrsVd+Us9TOWjtb7ey1c9RmtXntnEYNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMFeAQ+LzxJgPGuA8WwBxrMHGM8RYJwFGOcBxnOGRA2+uDNNLwh4PLxxvjDE+aIQ54tDnC8Jcb40xPmyEOfLQ5yv2KWowbnqm3Lu2nlq562dr3b+2gVqF6xdyKjBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNThXwMPicwcYzxNgPG+A8XwBxvMHGC8QYLxggPFCIVGDL+1M0ysDHg9vnK8Kcb46xPmaEOdrQ5yvC3G+PsT5hhDnG3cpanDh+qZcpHbRWqtt/lC1p3ax2sVrlzBqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ0uHPCw+CIBxosGGFuAcSfAuCfAeLEA48UDjJcIiRp8eWea3hTweHjjfHOI8y0hzreGON8W4nx7iPMdIc53hjjftUtRg0vWN+VStUvXLlO7bO1ytcvXrlC7olGD7V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtanDJgIfFlwowXjrAeJkA42UDjJcLMF4+wHiFAOMVQ6IGX9mZpncHPB7eON8T4nxviPN9Ic73hzg/EOL8YIjzQyHOD+9S1OBKm29KbVFb1q5Su2rtarWr165h1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaXCngYfGVA4yLAOMywHiVAONVA4xXCzBePcB4jZCowVd3pukjAY+HN86Phjg/FuL8eIjzEyHOT4Y4PxXi/HSI8zO7FDW4Zn1TrlW7du06tevWrle7fu0GtRsaNdjuNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IG1wx4WHytAOO1A4zXCTBeN8B4vQDj9QOMNwgw3jAkavC1nWn6bMDj4Y3zcyHOz4c4vxDi/GKI80shzi+HOL8S4vzqLkUNblTflBvXblK7ae1mtZvXblG7Ze1WRg22e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowY0CHhbfOMB4kwDjTQOMNwsw3jzAeIsA4y0DjLcKiRp8fWeavhbweHjj/HqI8xshzm+GOL8V4vx2iPM7Ic7vhji/t0tRg1vXN+U2tdvWble7fe0OtTvWVrW1UYPtXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcOuAh8W3CTDeNsB4uwDj7QOMdwgw3jHAuAowrkOiBt/YmabvBzwe3jh/EOL8YYjzRyHOH4c4fxLi/GmI82chzp/vUtTgTvVNuXPtLrW71u5Wu3vtHrV71u5l1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsa3CngYfGdA4x3CTDeNcB4twDj3QOM9wgw3jPAeK+QqME3d6bpFwGPhzfOX4Y4fxXi/HWI8zchzt+GOH8X4vx9iPMPuxQ1uHd9U+5Tu2/tfrX71x5Qe2DtQbUHGzXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBvcOeFh8nwDjfQOM9wsw3j/A+IAA4wMDjA8KMD44JGrwrZ1p+mPA4+GN808hzj+HOP8S4vxriPNvIc6/hzj/EeL85y5FDR5S35SH1h5We3jtEbVH1h5Ve3TtMUYNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMFDAh4WPzTA+LAA48MDjI8IMD4ywPioAOOjA4yPCYkafHtnmv4V8Hh44/x3iPM/Ic7/hjj/F+LcO8S5T4hz3xDnfrsUNXhsfVMeV3t87Qm1J9aeVHty7Sm1pxo12O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogaPDXhY/LgA4+MDjE8IMD4xwPikAOOTA4xPCTA+NSRq8J2dado/4PHwxnlAiPPAEOdBIc6DQ5yHhDgPDXEeFuI8fJeiBk+rb8rTa8+oPbP2rNqza8+pPbf2PKMG271GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OBpAQ+Lnx5gfEaA8ZkBxmcFGJ8dYHxOgPG5AcbnhUQNvrszTUcEPB7eOI8McR4V4pzOneE8Vojz2CHO44Q4jxviPN5A5zF/+59f35QX1F5Ye1HtxbWX1F5ae1nt5UYNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHzAx4WvyDA+MIA44sCjC8OML4kwPjSAOPLAowvD4kafG9nmo4f8Hh44zxBiPOEIc4ThThPHOI8SYjzpCHOk4U4T75LUYNX1DfllbVX1V5de03ttbXX1V5fe4NRg+1eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrwioCHxa8MML4qwPjqAONrAoyvDTC+LsD4+gDjG0KiBt/fmaZTBDwe3jhPGeI8VYjz1CHO04Q4TxviPF2I8/QhzjPsUtTgjfVNeVPtzbW31N5ae1vt7bV31N5p1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsavDHgYfGbAoxvDjC+JcD41gDj2wKMbw8wviPA+M6QqMEPdqbpjAGPhzfOM4U4zxzi3CvEeZYQ51lDnGcLcZ49xHmOXYoavKu+Ke+uvaf23tr7au+vfaD2wdqHjBps9xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg3cFPCx+d4DxPQHG9wYY3xdgfH+A8QMBxg8GGD8UEjX44c40zQIeD2+c8xDnOUOc5wpxnjvEeZ4Q53lDnOcLcZ5/l6IGH65vykdqH619rPbx2idqn6x9qvZpowbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4MMBD4s/EmD8aIDxYwHGjwcYPxFg/GSA8VMBxk+HRA1+tDNNFwh4PLxxXjDEeaEQ54VDnBcJcV40xNlCnDshzj27FDX4TH1TPlv7XO3ztS/Uvlj7Uu3Lta8YNdjuNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGnwl4WPzZAOPnAoyfDzB+IcD4xQDjlwKMXw4wfiUkavDjnWm6WMDj4Y3z4iHOS4Q4LxnivFSI89IhzsuEOC8b4rzcLkUNvlrflK/Vvl77Ru2btW/Vvl37Tu27Rg22e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowVcDHhZ/LcD49QDjNwKM3wwwfivA+O0A43cCjN8NiRr8ZGeaLh/weHjjvEKI84ohziuFOK8c4lyEOJchzquEOK+6S1GD79U35fu1H9R+WPtR7ce1n9R+WvuZUYPtXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8L2Ah8XfDzD+IMD4wwDjjwKMPw4w/iTA+NMA489CogY/3ZmmqwU8Ht44rx7ivEaI85ohzmuFOK8d4rxOiPO6Ic7r7VLU4Of1TflF7Ze1X9V+XftN7be139V+b9Rgu9eoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGOMswDgPMBo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBY1wEGJcBRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNjBq0zhtlNGrAGI0aMMZVgHEdYEyLGvw84GHxLwKMvwww/irA+OsA428CjL8NMP4uwPj7kKjBz3am6foBj4c3zhuEOG8Y4rxRiPPGIc6bhDhvGuK8WYjz5rsUNfhDfVP+WPtT7c+1v9T+Wvtb7e+1fxg12O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogZ/CHhY/McA458CjH8OMP4lwPjXAOPfAox/DzD+IyRq8POdabpFwOPhjfOWIc5bhThvHeK8TYjztiHO24U4bx/ivMMuRQ3+Wd+Uf9X+XftP7b+1/9X2ru1T29eowXavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjX4Z8DD4n8FGP8dYPxPgPG/Acb/BRj3DjDuE2DcNyRq8IudabpjwOPhjXMV4lyHOO8U4rxziPMuIc67hjjvFuK8+y5FDfarb8r+tQNqB9YOqh1cO6R2aO0wowbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYL+Ah8X7BxgPCDAeGGA8KMB4cIDxkADjoQHGw0KiBr/cmaZ7BDwe3jjvGeK8V4jz3iHO+4Q47xvivF+I8/4hzgfsUtTg8PqmHFE7snbU5o9U9UegY9WOXTtO7bibPwoZNfh/e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSoweEBD4uPCDAeGWA8KsC4eeD3f914rADjsQOMxwkwHvfWY37PaeevdqbpgQGPhzfOB4U4HxzifEiI86EhzoeFOB8e4nxEiPORuxQ1OF59U45fO0HthLUT1U5cO0ntpLWTGTXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBscLeFh8/ADjCQKMJwwwnijAeOIA40kCjCcNMJ4sJGrw651pelTA4+GN89EhzseEOB8b4nxciPPxIc4nhDifGOJ80i5FDU5e35RT1E5ZO1Xt1LXT1E5bO13t9EYNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHJAx4WnyLAeMoA46kCjKcOMJ4mwHjaAOPpAoynD4ka/GZnmp4c8Hh443xKiPOpIc6nhTifHuJ8RojzmSHOZ4U4n71LUYMz1DfljLUz1c5c26t2ltpZa2ernd2owXavUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjDGWYBxHmA0asAYjRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8a4CDAuA4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMqwDjOsCYFjU4Q8DD4jMGGM8UYDxzgHGvAONZAoxnDTCeLcB49pCowW93puk5AY+HN87nhjifF+J8fojzBSHOF4Y4XxTifHGI8yW7FDU4R31TZrV57Zy1c9XOXTtP7by18xk12O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogbnCHhYPAswzgOM5wwwnivAeO4A43kCjOcNMJ4vJGrwu51pemnA4+GN82UhzpeHOF8R4nxliPNVIc5XhzhfE+J87S5FDc5f35QL1C5Yu1DtwrWL1C5aa7UdowbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd7//88YNfg/ajRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcP6Ah8UXCDBeMMB4oQDjhQOMFwkwXjTA2AKMOyFRg9/vTNPrAh4Pb5yvD3G+IcT5xhDnm0Kcbw5xviXE+dYQ59t2KWqwp74pF6tdvHaJ2iVrl6pdunaZ2mWNGmz3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDPQEPiy8WYLx4gPESAcZLBhgvFWC8dIDxMgHGy4ZEDf6wM01vD3g8vHG+I8T5zhDnu0Kc7w5xvifE+d4Q5/tCnO/fpajB5eqbcvnaFWpXrF1p842pLWrL2lWMGmz3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDywU8LL58gPEKAcYrBhivFGC8coBxEWBcBhivEhI1+OPONH0g4PHwxvnBEOeHQpwfDnF+JMT50RDnx0KcHw9xfmKXogZXrW/K1WpXr12jds3atWrXrl2ndl2jBtu9Rg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYZwHGeYDRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRjjIsC4DDAaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxrgKM6wBjWtTgqgEPi68WYLx6gPEaAcZrBhivFWC8doDxOgHG64ZEDf60M02fDHg8vHF+KsT56RDnZ0Kcnw1xfi7E+fkQ5xdCnF/cpajB9eqbcv3aDWo3rN2oduPaTWo3rd3MqMF2r1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1uF7Aw+LrBxhvEGC8YYDxRgHGGwcYbxJgvGmA8WYhUYM/70zTlwIeD2+cXw5xfiXE+dUQ59dCnF8PcX4jxPnNEOe3dilqcPP6ptyidsvarWq3rt2mdtva7Wq3N2qw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDW4e8LD4FgHGWwYYbxVgvHWA8TYBxtsGGG8XYLx9SNTgLzvT9O2Ax8Mb53dCnN8NcX4vxPn9EOcPQpw/DHH+KMT5412KGtyhvil3rK1q69qdaneu3aV219rdjBps9xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRgzsEPCy+Y4BxFWBcBxjvFGC8c4DxLgHGuwYY7xYSNfjrzjT9JODx8Mb50xDnz0KcPw9x/iLE+csQ569CnL8Ocf5ml6IGd69vyj1q96zdq3bv2n1q963dr3Z/owbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4O4BD4vvEWC8Z4DxXgHGewcY7xNgvG+A8X4BxvuHRA3+tjNNvw14PLxx/i7E+fsQ5x9CnH8Mcf4pxPnnEOdfQpx/3aWowQPqm/LA2oNqD649pPbQ2sNqD689wqjBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNXhAwMPiBwYYHxRgfHCA8SEBxocGGB8WYHx4gPERIVGDv+9M098CHg9vnH8Pcf4jxPnPEOe/Qpz/DnH+J8T53xDn/3YpavDI+qY8qvbo2mNqj609rvb42hNqTzRqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ0eGfCw+FEBxkcHGB8TYHxsgPFxAcbHBxifEGB8YkjU4B8707R3wOPhjXOfEOe+Ic79Qpz7hzgPCHEeGOI8KMR58C5FDZ5U35Qn155Se2rtabWn155Re2btWUYNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMGTAh4WPznA+JQA41MDjE8LMD49wPiMAOMzA4zPCoka/HNnmg4JeDy8cR4a4jwsxHl4iPOIEOeRIc6jQpzTeTKcxxroPOZv/7Prm/Kc2nNrz6s9v/aC2gtrL6q92KjBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNXh2wMPi5wQYnxtgfF6A8fkBxhcEGF8YYHxRgPHFIVGDf+1M07EDHg9vnMcJcR43xHm8EOfxQ5wnCHGeMMR5ohDniXcpavCS+qa8tPay2strr6i9svaq2qtrrzFqsN1r1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBoxxFmCcBxiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEuAozLAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBkYNWueNMho1YIxGDRjjKsC4DjCmRQ1eEvCw+KUBxpcFGF8eYHxFgPGVAcZXBRhfHWB8TUjU4N8703SSgMfDG+dJQ5wnC3GePMR5ihDnKUOcpwpxnjrEeZpdihq8tr4pr6u9vvaG2htrb6q9ufaW2luNGmz3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGD1wY8LH5dgPH1AcY3BBjfGGB8U4DxzQHGtwQY3xoSNfjPzjSdNuDx8MZ5uhDn6UOcZwhxnjHEeaYQ55lDnHuFOM+yS1GDt9U35e21d9TeWXtX7d2199TeW3ufUYPtXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8LaAh8VvDzC+I8D4zgDjuwKM7w4wvifA+N4A4/tCogb/3ZmmswY8Ht44zxbiPHuI8xwhzlmIcx7iPGeI81whznPvUtTg/fVN+UDtg7UP1T5c+0jto7WP1T5u1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsavD/gYfEHAowfDDB+KMD44QDjRwKMHw0wfizA+PGQqMH/dqbpPAGPhzfO84Y4zxfiPH+I8wIhzguGOC8U4rxwiPMiuxQ1+ER9Uz5Z+1Tt07XP1D5b+1zt87UvGDXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBp8IeFj8yQDjpwKMnw4wfibA+NkA4+cCjJ8PMH4hJGqw9840XTTg8fDG2UKcOyHOPSHOi4U4Lx7ivESI85IhzkvtUtTgi/VN+VLty7Wv1L5a+1rt67Vv1L5p1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsafDHgYfGXAoxfDjB+JcD41QDj1wKMXw8wfiPA+M2QqME+O9N06YDHwxvnZUKclw1xXi7EefkQ5xVCnFcMcV4pxHnlXYoafKu+Kd+ufaf23dr3at+v/aD2w9qPjBps9xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg28FPCz+doDxOwHG7wYYvxdg/H6A8QcBxh8GGH8UEjXYd2eaFgGPhzfOZYjzKiHOq4Y4rxbivHqI8xohzmuGOK+1S1GDH9c35Se1n9Z+Vvt57Re1X9Z+Vfu1UYPtXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1q8OOAh8U/CTD+NMD4swDjzwOMvwgw/jLA+KsA469Dogb77UzTtQMeD2+c1wlxXjfEeb0Q5/VDnDcIcd4wxHmjEOeNdylq8Jv6pvy29rva72t/qP2x9qfan2t/MWqw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDX4T8LD4twHG3wUYfx9g/EOA8Y8Bxj8FGP8cYPxLSNRg/51puknA4+GN86YhzpuFOG8e4rxFiPOWIc5bhThvHeK8zS5FDf5a35S/1f5e+0ftn7V/1f5d+0/tv0YNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMFfAx4W/y3A+PcA4z8CjP8MMP4rwPjvAON/Aoz/DYkaHLAzTbcNeDy8cd4uxHn7EOcdQpx3DHGuQpzrEOedQpx33qWowf/qm7J3bZ/avrX9avvXDqgdWDvIqMF2r1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1+F/Aw+K9A4z7BBj3DTDuF2DcP8B4QIDxwADjQSFRgwN3pukuAY+HN867hjjvFuK8e4jzHiHOe4Y47xXivHeI8z67FDU4uL4ph9QOrR1WO7x2RO3I2lGbPwht/shi1OD/7TVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBgcHPCw+JMB4aIDxsADj4QHGIwKMRwYYjwowbh6YUsaRUYODdqbpvgGPhzfO+4U47x/ifECI84EhzgeFOB8c4nxIiPOhuxQ1OFZ9U45dO07tuLXj1Y5fO0HthLUTGTXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBse6zf/9/6bHDjAeJ8B43ADj8QKMxw8wniDAeMIA44lCogYH70zTwwIeD2+cDw9xPiLE+cgQ56NCnI8OcT4mxPnYEOfjdilqcOL6ppykdtLayWonr52idsraqWqnNmqw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDU4c8LD4JAHGkwYYTxZgPHmA8RQBxlMGGE8VYDx1SNTgkJ1penzA4+GN8wkhzieGOJ8U4nxyiPMpIc6nhjifFuJ8+i5FDU5T35TT1k5XO33tDLUz1s5UO3NtL6MG271GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OA0AQ+LTxtgPF2A8fQBxjMEGM8YYDxTgPHMAca9QqIGh+5M0zMCHg9vnM8McT4rxPnsEOdzQpzPDXE+L8T5/BDnC3YpanCW+qactXa22tlr56jNavPaOWvnMmqw3WvUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjHEWYJwHGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMS4CjMsAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGRg1a540yGjVgjEYNGOMqwLgOMKZFDc4S8LD4rAHGswUYzx5gPEeAcRZgnAcYzxlgPFdI1OCwnWl6YcDj4Y3zRSHOF4c4XxLifGmI82UhzpeHOF8R4nzlLkUNzl3flPPUzls7X+38tQvULli7UO3CRg22e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowbkDHhafJ8B43gDj+QKM5w8wXiDAeMEA44UCjBcOiRocvjNNrwp4PLxxvjrE+ZoQ52tDnK8Lcb4+xPmGEOcbQ5xv2qWowUXqm3LRWqtt/qCyp3ax2sVrl6hd0qjBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNbhIwMPiiwYYW4BxJ8C4J8B4sQDjxQOMlwgwXjIkanDEzjS9OeDx8Mb5lhDnW0Ocbwtxvj3E+Y4Q5ztDnO8Kcb57l6IGl6pvyqVrl6ldtna52uVrV6hdsXYlowbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4FIBD4svHWC8TIDxsgHGywUYLx9gvEKA8YoBxiuFRA2O3Jmm9wQ8Ht443xvifF+I8/0hzg+EOD8Y4vxQiPPDIc6P7FLU4Mr1TVnUlrWr1K5au1rt6rVr1K5p1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsaXDngYfEiwLgMMF4lwHjVAOPVAoxXDzBeI8B4zZCowVE70/TRgMfDG+fHQpwfD3F+IsT5yRDnp0Kcnw5xfibE+dldihpcq74p165dp3bd2vVq16/doHbD2o2MGmz3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDawU8LL52gPE6AcbrBhivF2C8foDxBgHGGwYYbxQSNZj2TNPnAh4Pb5yfD3F+IcT5xRDnl0KcXw5xfiXE+dUQ59d2KWpw4/qm3KR209rNajev3aJ2y9qtarc2arDda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNbhzwsPgmAcabBhhvFmC8eYDxFgHGWwYYbxVgvHVI1OBYe6bp6wGPhzfOb4Q4vxni/FaI89shzu+EOL8b4vxeiPP7uxQ1uE19U25bu13t9rU71O5YW9XWtTsZNdjuNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGtwl4WHzbAOPtAoy3DzDeIcB4xwDjKsC4DjDeKSRqcOw90/SDgMfDG+cPQ5w/CnH+OMT5kxDnT0OcPwtx/jzE+Ytdihrcub4pd6ndtXa32t1r96jds3av2r2NGmz3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDOwc8LL5LgPGuAca7BRjvHmC8R4DxngHGewUY7x0SNTjOnmn6ZcDj4Y3zVyHOX4c4fxPi/G2I83chzt+HOP8Q4vzjLkUN7lPflPvW7le7f+0BtQfWHlR7cO0hRg22e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowX0CHhbfN8B4vwDj/QOMDwgwPjDA+KAA44MDjA8JiRocd880/Sng8fDG+ecQ519CnH8Ncf4txPn3EOc/Qpz/DHH+a5eiBg+tb8rDag+vPaL2yNqjao+uPab2WKMG271GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OChAQ+LHxZgfHiA8REBxkcGGB8VYHx0gPExAcbHhkQNjrdnmv4d8Hh44/xPiPO/Ic7/hTj3DnHuE+LcN8S5X4hz/12KGjyuvimPrz2h9sTak2pPrj2l9tTa04wabPcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYPHBTwsfnyA8QkBxicGGJ8UYHxygPEpAcanBhifFhI1OP6eaTog4PHwxnlgiPOgEOfBIc5DQpyHhjgPC3EeHuI8YpeiBk+vb8ozas+sPav27Npzas+tPa/2fKMG271GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1ODpAQ+LnxFgfGaA8VkBxmcHGJ8TYHxugPF5Acbnh0QNTrBnmo4MeDy8cR4V4pzOm+E8Vojz2CHO44Q4jxviPF6I8/gDncf87X9BfVNeWHtR7cW1l9ReWntZ7eW1Vxg12O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogYvCHhY/MIA44sCjC8OML4kwPjSAOPLAowvDzC+IiRqcMI903SCgMfDG+cJQ5wnCnGeOMR5khDnSUOcJwtxnjzEeYpdihq8sr4pr6q9uvaa2mtrr6u9vvaG2huNGmz3GjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjnAUY5wFGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMiwDjMsBo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDVwY8LH5VgPHVAcbXBBhfG2B8XYDx9QHGNwQY3xgSNTjRnmk6ZcDj4Y3zVCHOU4c4TxPiPG2I83QhztOHOM8Q4jzjLkUN3lTflDfX3lJ7a+1ttbfX3lF7Z+1dRg22e40aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMc4CjPMAo1EDxmjUgDEaNWCMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowxkWAcRlgNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNTAqEHrvFFGowaM0agBY1wFGNcBxrSowZsCHha/OcD4lgDjWwOMbwswvj3A+I4A4zsDjO8KiRqceM80nSng8fDGeeYQ514hzrOEOM8a4jxbiPPsIc5zhDhnuxQ1eHd9U95Te2/tfbX31z5Q+2DtQ7UPGzXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBu8OeFj8ngDjewOM7wswvj/A+IEA4wcDjB8KMH44JGpwkj3TNA94PLxxnjPEea4Q57lDnOcJcZ43xHm+EOf5Q5wX2KWowUfqm/LR2sdqH699ovbJ2qdqn659xqjBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIyrAOM6wJgWNfhIwMPijwYYPxZg/HiA8RMBxk8GGD8VYPx0gPEzIVGDk+6ZpgsGPB7eOC8U4rxwiPMiIc6LhjhbiHMnxLknxHmxXYoafLa+KZ+rfb72hdoXa1+qfbn2ldpXjRps9xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRg88GPCz+XIDx8wHGLwQYvxhg/FKA8csBxq8EGL8aEjU42Z5punjA4+GN8xIhzkuGOC8V4rx0iPMyIc7LhjgvF+K8/C5FDb5W35Sv175R+2btW7Vv175T+27te0YNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMHXAh4Wfz3A+I0A4zcDjN8KMH47wPidAON3A4zfC4kanHzPNF0h4PHwxnnFEOeVQpxXDnEuQpzLEOdVQpxXDXFebZeiBt+vb8oPaj+s/aj249pPaj+t/az2c6MG271GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OD7AQ+LfxBg/GGA8UcBxh8HGH8SYPxpgPFnAcafh0QNTrFnmq4e8Hh447xGiPOaIc5rhTivHeK8TojzuiHO64U4r79LUYNf1Dfll7Vf1X5d+03tt7Xf1X5f+4NRg+1eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrwi4CHxb8MMP4qwPjrAONvAoy/DTD+LsD4+wDjH0KiBqfcM003CHg8vHHeMMR5oxDnjUOcNwlx3jTEebMQ581DnLfYpajBH+ub8qfan2t/qf219rfa32v/qP3TqMF2r1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0P6PGo0aMEajBozRqIFRg9Z5o4xGDRijUQPGuAowrgOMaVGDPwY8LP5TgPHPAca/BBj/GmD8W4Dx7wHGfwQY/xkSNTjVnmm6ZcDj4Y3zViHOW4c4bxPivG2I83YhztuHOO8Q4rzjLkUN/lXflH/X/lP7b+1/tb1r+9T2re1n1GC716gBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Y4yzAOA8wGjVgjEYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjXAQYlwFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg2MGrTOG2U0asAYjRowxlWAcR1gTIsa/CvgYfG/A4z/CTD+N8D4vwDj3gHGfQKM+wYY9wuJGpx6zzStAh4Pb5zrEOedQpx3DnHeJcR51xDn3UKcdw9x3mOXogb71zflgNqBtYNqB9cOqR1aO6x2uFGD7V6jBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIyzAOM8wGjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjHERYFwGGI0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBhXAcZ1gDEtarB/wMPiAwKMBwYYDwowHhxgPCTAeGiA8bAA4+EhUYPT7JmmewY8Ht447xXivHeI8z4hzvuGOO8X4rx/iPMBIc4H7lLU4Ij6phxZO2rzx5T6Y8WxaseuHad23NrxNn/AMGrw//YaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYMjAh4WHxlgPCrAuHlA93/deKwA47EDjMcJMB43wHi82475PcffUO6ZpgcFPB7eOB8c4nxIiPOhIc6HhTgfHuJ8RIjzkSHOR+1S1OD49U05Qe2EtRPVTlw7Se2ktZPVTm7UYLvXqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRjjLMA4DzAaNWCMRg0Yo1EDxmjUgDEaNWCMRg2MGrTOG2U0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWNcBBiXAUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDYwatM4bZTRqwBiNGjDGVYBxHWBMixocP+Bh8QkCjCcMMJ4owHjiAONJAownDTCeLMB48pCowen2TNOjAx4Pb5yPCXE+NsT5uBDn40OcTwhxPjHE+aQQ55N3KWpwivqmnLJ2qtqpa6epnbZ2utrpa2cwarDda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNThHwsPiUAcZTBRhPHWA8TYDxtAHG0wUYTx9gPENI1OD0e6bpKQGPhzfOp4Y4nxbifHqI8xkhzmeGOJ8V4nx2iPM5uxQ1OGN9U85UO3Ntr9pZametna129to5jBps9xo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBY5wFGOcBRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjIsA4zLAaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxrgKMK4DjGlRgzMGPCw+U4DxzAHGvQKMZwkwnjXAeLYA49kDjOcIiRqcYc80PTfg8fDG+bwQ5/NDnC8Icb4wxPmiEOeLQ5wvCXG+dJeiBrP6psxr56ydq3bu2nlq562dr3Z+owbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rUYBbwsHgeYDxngPFcAcZzBxjPE2A8b4DxfAHG84dEDc64Z5peFvB4eON8eYjzFSHOV4Y4XxXifHWI8zUhzteGOF+3S1GDC9Q35YK1C9UuXLtI7aK1Vtv88WKPUYPtXqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjLMA4zzAaNSAMRo1YIxGDRijUQPGaNSAMRo1MGrQOm+U0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaMcRFgXAYYjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGFcBxnWAMS1qcIGAh8UXDDBeKMB44QDjRQKMFw0wtgDjToBxT0jU4Ex7pun1AY+HN843hDjfGOJ8U4jzzSHOt4Q43xrifFuI8+27FDW4WH1TLl67RO2StUvVLl27TO2ytcsZNdjuNWrAGI0aMEajBozRqAFjNGpg1KB13iijUQPGOAswzgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGoAWM0asAYjRowRqMGjNGoAWM0asAYFwHGZYDRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBkYNWueNMho1YIxGDRijUQOjBq3zRhmNGjBGowaMcRVgXAcY06IGFwt4WHzxAOMlAoyXDDBeKsB46QDjZQKMlw0wXi4kanDmPdP0joDHwxvnO0Oc7wpxvjvE+Z4Q53tDnO8Lcb4/xPmBXYoaXL6+KVeoXbF2pc33pbaoLWtXqV3VqMF2r1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowxlmAcR5gNGrAGI0aMEajBozRqAFjNGrAGI0aGDVonTfKaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGuAgwLgOMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYjRoYNWidN8po1IAxGjVgjKsA4zrAmBY1uHzAw+IrBBivGGC8UoDxygHGRYBxGWC8SoDxqiFRg732TNMHAx4Pb5wfCnF+OMT5kRDnR0OcHwtxfjzE+YkQ5yd3KWpwtfqmXL12jdo1a9eqXbt2ndp1a9czarDda9SAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaMcRZgnAcYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxLgKMywCjUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBiNGjBGowZGDVrnjTIaNWCMRg0Y4yrAuA4wpkUNrhbwsPjqAcZrBBivGWC8VoDx2gHG6wQYrxtgvF5I1OAse6bpUwGPhzfOT4c4PxPi/GyI83Mhzs+HOL8Q4vxiiPNLuxQ1uH59U25Qu2HtRrUb125Su2ntZrWbGzXY7jVqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxjgLMM4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMEajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGBcBxmWA0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMRg0Yo1EDowat80YZjRowRqMGjHEVYFwHGNOiBtcPeFh8gwDjDQOMNwow3jjAeJMA400DjDcLMN48JGpw1j3T9OWAx8Mb51dCnF8NcX4txPn1EOc3QpzfDHF+K8T57V2KGtyivim3rN2qduvabWq3rd2udvvaHYwabPcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYNbBDwsvmWA8VYBxlsHGG8TYLxtgPF2AcbbBxjvEBI1ONueafpOwOPhjfO7Ic7vhTi/H+L8QYjzhyHOH4U4fxzi/MkuRQ3uWN+UVW1du1PtzrW71O5au1vt7kYNtnuNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDHOAozzAKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMMZFgHEZYDRqwBiNGjBGowaM0agBYzRqwBiNGjBGowaM0aiBUYPWeaOMRg0Yo1EDxmjUwKhB67xRRqMGjNGoAWNcBRjXAca0qMEdAx4WrwKM6wDjnQKMdw4w3iXAeNcA490CjHcPiRqcfc80/TTg8fDG+bMQ589DnL8Icf4yxPmrEOevQ5y/CXH+dpeiBveob8o9a/eq3bt2n9p9a/er3b/2AKMG271GDRijUQPGaNSAMRo1YIxGDYwatM4bZTRqwBhnAcZ5gNGoAWM0asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGOMiwLgMMBo1YIxGDRijUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqYNSgdd4oo1EDxmjUgDGuAozrAGNa1OAeAQ+L7xlgvFeA8d4BxvsEGO8bYLxfgPH+AcYHhEQNzrFnmn4X8Hh44/x9iPMPIc4/hjj/FOL8c4jzLyHOv4Y4/7ZLUYMH1jflQbUH1x5Se2jtYbWH1x5Re6RRg+1eowaM0agBYzRqwBiNGjBGowZGDVrnjTIaNWCMswDjPMBo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aMEajBozRqAFjNGrAGI0aMEajBoxxEWBcBhiNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNTBq0DpvlNGoAWM0asAYVwHGdYAxLWrwwICHxQ8KMD44wPiQAONDA4wPCzA+PMD4iADjI0OiBrM90/T3gMfDG+c/Qpz/DHH+K8T57xDnf0Kc/w1x/i/EufcuRQ0eVd+UR9ceU3ts7XG1x9eeUHti7UlGDbZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBowIeFj86wPiYAONjA4yPCzA+PsD4hADjEwOMTwqJGsz3TNM+AY+HN859Q5z7hTj3D3EeEOI8MMR5UIjz4BDnIbsUNXhyfVOeUntq7Wm1p9eeUXtm7Vm1Zxs12O41asAYjRowRqMGjNGoAWM0amDUoHXeKKNRA8Y4CzDOA4xGDRijUQPGaNSAMRo1YIxGDRijUQOjBq3zRhmNGjBGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBgXAcZlgNGoAWM0asAYjRowRqMGjNGoAWM0asAYjRowRqMGRg1a540yGjVgjEYNGKNRA6MGrfNGGY0aMEajBoxxFWBcBxjTogZPDnhY/JQA41MDjE8LMD49wPiMAOMzA4zPCjA+OyRqcM4903RowOPhjfOwEOfhIc4jQpxHhjiPCnFO58twHivEeeyBzmP+9j+nvinPrT2v9vzaC2ovrL2o9uLaS4wabPcaNWCMRg0Yo1EDxmjUgDEaNTBq0DpvlNGoAWOcBRjnAUajBozRqAFjNGrAGI0aMEajBozRqIFRg9Z5o4xGDRijUQPGaNSAMRo1YIxGDRijUQPGaNSAMRo1YIyLAOMywGjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDowat80YZjRowRqMGjNGogVGD1nmjjEYNGKNRA8a4CjCuA4xpUYPnBDwsfm6A8XkBxucHGF8QYHxhgPFFAcYXBxhfEhI1ONeeaTpOwOPhjfO4Ic7jhTiPH+I8QYjzhCHOE4U4TxziPMkuRQ1eWt+Ul9VeXntF7ZW1V9VeXXtN7bVGDbZ7jRowRqMGjNGoAWM0asAYjRoYNWidN8po1IAxzgKM8wCjUQPGaNSAMRo1YIxGDRijUQPGaNTAqEHrvFFGowaM0agBYzRqwBiNGjBGowaM0agBYzRqwBiNGjDGRYBxGWA0asAYjRowRqMGjNGoAWM0asAYjRowRqMGjNGogVGD1nmjjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjXAUY1wHGtKjBSwMeFr8swPjyAOMrAoyvDDC+KsD46gDjawKMrw2JGpx7zzSdNODx8MZ5shDnyUOcpwhxnjLEeaoQ56lDnKcJcZ52l6IGr6tvyutrb6i9sfam2ptrb6m9tfY2owbbvUYNGKNRA8Zo1IAxGjVgjEYNjBq0zhtlNGrAGGcBxnmA0agBYzRqwBiNGjBGowaM0agBYzRqYNSgdd4oo1EDxmjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Y4yLAuAwwGjVgjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1MCoQeu8UUajBozRqAFjNGpg1KB13iijUQPGaNSAMa4CjOsAY1rU4HUBD4tfH2B8Q4DxjQHGNwUY3xxgfEuA8a0BxreFRA3Os2eaThfweHjjPH2I8wwhzjOGOM8U4jxziHOvEOdZQpxn3aWowdvrm/KO2jtr76q9u/ae2ntr76u936jBdq9RA8Zo1IAxGjVgjEYNGKNRA6MGrfNGGY0aMMZZgHEeYDRqwBiNGjBGowaM0agBYzRqwBiNGhg1aJ03ymjUgDEaNWCMRg0Yo1EDxmjUgDEaNWCMRg0Yo1EDxrgIMC4DjEYNGKNRA8Zo1IAxGjVgjEYNGKNRA8Zo1IAxGjUwatA6b5TRqAFjNGrAGI0aGDVonTfKaNSAMRo1+P/Y+6tY17K0S8NcGZzBzGQH80wHc9rBzEzbDmZmZmbKYGZmZmZmZmbm/la31P2rW2f3xRzTOkN6P2lIpbrIeupceNVO/fMtjbFrYOwZGN2iBpcaPCy+zMB4uYHxCgPjlQbGqwyMVxsYrzEwXmsSNZiuVVWTGzwerp1TmDinNHE2TJxNE+dUJs6pTZzTmDin7VPU4Lr4plwfuyF2Y+ym2M2xW2K3xm4jajC4l6iBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAY2wYGJsGRqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42xbWDsGBiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGpA1CBlXikjUQONkaiBxtg1MPYMjG5Rg+sMHhZfb2C8wcB4o4HxJgPjzQbGWwyMtxoYbzOJGkzfqqrpDB4P187pTZwzmDhnNHHOZOKc2cQ5i4lzVhPnbH2KGtwe35Q7YnfG7ordHbsndm/svtj9RA0G9xI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtanC7wcPiOwyMdxoY7zIw3m1gvMfAeK+B8T4D4/0mUYMZWvGfYfB4uHb+x8TZMnHObuKcw8Q5p4lzLhPn3CbOefoUNXggvikPxh6KPRx7JPZo7LHY47EniBoM7iVqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BgbBsamgZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1OABg4fFDxoYHzIwPmxgfMTA+KiB8TED4+MGxidMogYztqpqXoPHw7VzPhPn/CbOBUycC5o4FzJxLmzi/K+Js92nqMGT8U15KvZ07JnYs7HnYs/HXoi9SNRgcC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQPJfy5RA5GRqIHGSNRAYyRqoDESNdAYiRpojEQNNMa2gbFjYCRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGiNRA42RqAFRg5R5pYxEDTRGogYaY9fA2DMwukUNnjR4WPyUgfFpA+MzBsZnDYzPGRifNzC+YGB80SRqMFOrqjoGj4dr5yImzkVNnIuZOBc3cS5h4lzSxLmUiXPpPkUNXopvysuxV2Kvxl6LvR57I/Zm7C2iBoN7iRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00xoaBsWlgJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BjbBsaOgZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogZEDVLmlTISNdAYiRpojF0DY8/A6BY1eMngYfHLBsZXDIyvGhhfMzC+bmB8w8D4poHxLZOowcytqlrG4PFw7VzWxLmciXN5E+cKJs4VTZwrmThXNnGu0qeowdvxTXkn9m7svdj7sQ9iH8Y+in1M1GBwL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBm8bPCx+x8D4roHxPQPj+wbGDwyMHxoYPzIwfmwSNZilVVWrGjwerp2rmThXN3GuYeJc08S5lolzbRPnOibOdfsUNfgkvimfxj6LfR77IvZl7KvY17FviBoM7iVqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BgbBsamgZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1OATg4fFnxoYPzMwfm5g/MLA+KWB8SsD49cGxm9MogaztqpqPYPHw7VzfRPnBibOARNn18TZM3FuaOLcyMS5cZ+iBt/GN+W72PexH2I/xn6K/Rz7JfYrUYPBvUQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGmPDwNg0MBI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMbQNjx8BI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDogYp80oZiRpojEQNNMaugbFnYHSLGnxr8LD4OwPj9wbGHwyMPxoYfzIw/mxg/MXA+KtJ1GC2VlVtYvB4uHZuauLczMS5uYlzCxPnlibOrUycW5s4t+lT1OC3+Kb8Hvsj9mfsr9jfsX/q/+Ii/ouBf9X/5QBRgyF7iRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00xoaBsWlgJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BjbBsaOgZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogZEDVLmlTISNdAYiRpojF0DY8/A6BY1+M3gYfHvBsY/DIx/Ghj/MjD+bWD8x8BYP+Ac2o3/Wq/M77n8f3auVVXbGjwerp3bmTi3N3HuYOLc0cS5k4lzZxPnLibOXfsUNRgmvinDxoaLDR8bITZibKTYv2MjEzUY3EvUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDE2DIxNAyNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHG2DYwdgyMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGPsGhh7Bka3qMEwBg+LhzUwDmdgHN7AOIKBcUQD40gGxn8bGEc2iRrU/0Nfuxk8Hq6du5s49zBx7mni3MvEubeJcx8T574mzv36FDUYJb4po8ZGi40eGyM2Zmys2NixcYgaDO4laqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYGwbGpoGRqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAY2wbGDsGRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxdg2MPQOjW9RgFIOHxaMaGEczMI5uYBzDwDimgXEsA+PYBsZxTKIGrVZV7W/weLh2HmDiPNDEeZCJ82AT5yEmzkNNnIeZOA/vU9Rg3PimjBcbPzZBbMLYRLGJY5PEJiVqMLiXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGDcQ0eFo9nYBzfwDiBgXFCA+NEBsaJDYyTGBgnNYkazN6qqiMMHg/XziNNnEeZOI82cR5j4jzWxHmcifN4E+cJfYoaTBbflMljU8SmjDVizdhUsalj0xA1GNxL1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxNgyMTQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxtg2MHYMjEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDESNSBqkDKvlJGogcZI1EBj7BoYewZGt6jBZAYPiyc3ME5hYJzSwNgwMDYNjFMZGKc2ME5jEjWYo1VVJxo8Hq6dJ5k4TzZxnmLiPNXE+T8T52kmztNNnGf0KWowbXxTpotNH5shNmNsptjMsVlisxI1GNxL1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxNgyMTQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxtg2MHYMjEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDESNSBqkDKvlJGogcZI1EBj7BoYewZGt6jBtAYPi6czME5vYJzBwDijgXEmA+PMBsZZDIyzmkQN5mxV1ZkGj4dr51kmzrNNnOeYOM81cZ5n4jzfxHmBifPCPkUNZotvSorV/yVAKzZ7bI7YnLG5YnMTNRjcS9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreowWwGD4uTgfE/BsaWgXF2A+McBsY5DYxzGRjnNokazNWqqosMHg/XzotNnJeYOC81cV5m4rzcxHmFifNKE+dVfYoazBPflHlj88Xmjy0QWzC2UGzh+ntD1GBwL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBvMYPCye18A4n4FxfgPjAgbGBQ2MCxkYFzYw/tckajB3q6quNng8XDuvMXFea+K8zsR5vYnzBhPnjSbOm0ycN/cpatCOb0ontkhs0dhiscVjS8SWjC1F1GBwL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBm2Dh8UdA+MiBsZFDYyLGRgXNzAuYWBc0sC4lEnUYJ5WVd1i8Hi4dt5q4rzNxHm7ifMOE+edJs67TJx3mzjv6VPUYOn4piwTWza2XGz52AqxFWMrxVYmajC4l6iBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAY2wYGJsGRqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42xbWDsGBiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGpA1CBlXikjUQONkaiBxtg1MPYMjG5Rg6UNHhYvY2Bc1sC4nIFxeQPjCgbGFQ2MKxkYVzaJGszbqqp7DR4P1877TJz3mzgfMHE+aOJ8yMT5sInzERPno32KGqwS35RVY6vFVo+tEVsztlZs7dg6RA0G9xI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtarCKwcPiVQ2MqxkYVzcwrmFgXNPAuJaBcW0D4zomUYP5WlX1mMHj4dr5uInzCRPnkybOp0ycT5s4nzFxPmvifK5PUYN145uyXmz92AaxgVg31ottGNuIqMHgXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDdY1eFi8noFxfQPjBgbGAQNj18DYMzBuaGDcyCRqMH+rqp43eDxcO18wcb5o4nzJxPmyifMVE+erJs7XTJyv9ylqsHF8UzaJbRrbLLZ5bIvYlrGtYlsTNRjcS9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreowcYGD4s3MTBuamDczMC4uYFxCwPjlgbGrQyMW5tEDRZoVdUbBo+Ha+ebJs63TJxvmzjfMXG+a+J8z8T5vonzgz5FDbaJb8q2se1i28d2iO0Y2ym2c2wXogaDe4kaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNMaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNdjG4GHxtgbG7QyM2xsYdzAw7mhg3MnAuLOBcReTqMGCrar60ODxcO38yMT5sYnzExPnpybOz0ycn5s4vzBxftmnqMGu8U3ZLbZ7bI/YnrG9YnvH9ontS9RgcC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdoga7Gjws3s3AuLuBcQ8D454Gxr0MjHsbGPcxMO5rEjVYqFVVXxk8Hq6dX5s4vzFxfmvi/M7E+b2J8wcT548mzp/6FDXYL74p+8cOiB0YOyh2cOyQ2KGxw4gaDO4laqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYGwbGpoGRqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAY2wbGDsGRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxdg2MPQOjW9RgP4OHxfsbGA8wMB5oYDzIwHiwgfEQA+OhBsbDTKIGC7eq6meDx8O18xcT568mzt9MnL+bOP8wcf5p4vzLxPl3n6IGh8c35YjYkbGjYkfHjokdGzsudjxRg8G9RA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaY8PA2DQwEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxtA2PHwEjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQOiBinzShmJGmiMRA00xq6BsWdgdIsaHG7wsPgIA+ORBsajDIxHGxiPMTAea2A8zsB4vEnU4L+tqvrH4PFw7axm8HD+y8Q5jIlzWBPncCbO4U2cI5g4Ryzo/L+//SfEN+XE2Emxk2OnxE6N/S92Wux0ogaDe4kaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNMaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNTjB4GHxiQbGkwyMJxsYTzEwnmpg/J+B8TQD4+kmUYN2q6pGMng8XDv/beIc2cQ5iolzVBPnaCbO0U2cY5g4x+xT1OCM+KacGTsrdnbsnNi5sfNi58cuIGowuJeogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGNsGBibBkaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONsW1g7BgYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqQNQgZV4pI1EDjZGogcbYNTD2DIxuUYMzDB4Wn2lgPMvAeLaB8RwD47kGxvMMjOcbGC8wiRp0WlU1lsHj4do5tolzHBPnuCbO8Uyc45s4JzBxTmjinKhPUYML45tyUezi2CWxS2OXxS6PXRG7kqjB4F6iBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42xYWBsGhiJGmiMRA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYa4+wGRqIGGiNRA42RqIHGSNRAYyRqoDESNdAY/2tgbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1OBCg4fFFxkYLzYwXmJgvNTAeJmB8XID4xUGxitNogaLtKpqYoPHw7VzEhPnpCbOyUyck5s4pzBxTmnibJg4m32KGlwV35SrY9fEro1dF7s+dkPsxthNRA0G945TDf3/DweiBhojUQONkaiBxkjUgKhByrxSRqIGGuOUBsaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNbjK4GHx1QbGawyM1xoYrzMwXm9gvMHAeKOB8SaTqMGiraqayuDxcO2c2sQ5jYlzWhPndCbO6U2cM5g4ZzRxztSnqMHN8U25JXZr7LbY7bE7YnfG7ordTdRgcC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogY3GzwsvsXAeKuB8TYD4+0GxjsMjHcaGO8yMN5tEjVYrFVVMxs8Hq6ds5g4ZzVxzmbiTCbO/5g4WybO2U2cc/QpanBPfFPujd0Xuz/2QOzB2EOxh2OPEDUY3EvUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDE2DIxNAyNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHG2DYwdgyMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGPsGhh7Bka3qME9Bg+L7zUw3mdgvN/A+ICB8UED40MGxocNjI+YRA0Wb1XVnAaPh2vnXCbOuU2c85g45zVxzmfinN/EuYCJc8E+RQ0ejW/KY7HHY0/Enow9FXs69kzsWaIGg3uJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTTGhoGxaWAkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGNsGxo6BkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMXQNjz8DoFjV41OBh8WMGxscNjE8YGJ80MD5lYHzawPiMgfFZk6jBEq2qWsjg8XDtXNjE+V8TZ9vE2TFxLmLiXNTEuZiJc/E+RQ2ei2/K87EXYi/GXoq9HHsl9mrsNaIGg3uJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTTGhoGxaWAkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGNsGxo6BkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMXQNjz8DoFjV4zuBh8fMGxhcMjC8aGF8yML5sYHzFwPiqgfE1k6jBkq2qWsLg8XDtXNLEuZSJc2kT5zImzmVNnMuZOJc3ca7Qp6jB6/FNeSP2Zuyt2Nuxd2Lvxt6LvU/UYHAvUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHG2DAwNg2MRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGmPbwNgxMBI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1ICoQcq8UkaiBhojUQONsWtg7BkY3aIGrxs8LH7DwPimgfEtA+PbBsZ3DIzvGhjfMzC+bxI1WKpVVSsaPB6unSuZOFc2ca5i4lzVxLmaiXN1E+caJs41+xQ1+CC+KR/GPop9HPsk9mnss9jnsS+IGgzuJWqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGBsGxqaBkaiBxkjUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGNsGxg7BkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMXYNjD0Do1vU4AODh8UfGhg/MjB+bGD8xMD4qYHxMwPj5wbGL0yiBku3qmotg8fDtXNtE+c6Js51TZzrmTjXN3FuYOIcMHF2+xQ1+DK+KV/Fvo59E/s29l3s+9gPsR+JGgzuJWqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGBsGxqaBkaiBxkjUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGNsGxg7BkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMXYNjD0Do1vU4EuDh8VfGRi/NjB+Y2D81sD4nYHxewPjDwbGH02iBsu0qqpn8Hi4dm5o4tzIxLmxiXMTE+emJs7NTJybmzi36FPU4Kf4pvwc+yX2a+y32O+xP2J/xv4iajC4l6iBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAY2wYGJsGRqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42xbWDsGBiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGpA1CBlXikjUQONkaiBxtg1MPYMjG5Rg58MHhb/bGD8xcD4q4HxNwPj7wbGPwyMfxoY/zKJGizbqqotDR4P186tTJxbmzi3MXFua+LczsS5vYlzBxPnjn2KGvwd35R/6v8CIP7A/ldsmNiwseFiw8dGqP/wJmowZC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogZ/Gzws/sfAWD9QG9qN/zIwDmNgHNbAOJyBcXgD4wjrl/k9l//3lK2q2sng8XDt3NnEuYuJc1cT524mzt1NnHuYOPc0ce7Vp6jBiPFNGSn279jIsVFio8ZGi40eG4OoweBeogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONsWFgbBoYiRpojEQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNMa2gbFjYCRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGiNRA42RqAFRg5R5pYxEDTRGogYaY9fA2DMwukUNRjR4WDySgfHfBsaRDYyjGBhHNTCOZmAc3cA4hknUYPlWVe1t8Hi4du5j4tzXxLmfiXN/E+cBJs4DTZwHmTgP7lPUYMz4powVGzs2Tmzc2Hix8WMTxCYkajC4l6iBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAY2wYGJsGRqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42xbWDsGBiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGpA1CBlXikjUQONkaiBxtg1MPYMjG5RgzENHhaPZWAc28A4joFxXAPjeAbG8Q2MExgYJzSJGqzQqqpDDB4P185DTZyHmTgPN3EeYeI80sR5lInzaBPnMX2KGkwU35SJY5PEJo1NFps8NkVsyliDqMHgXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDSYyeFg8sYFxEgPjpAbGyQyMkxsYpzAwTmlgbJhEDVZsVdWxBo+Ha+dxJs7jTZwnmDhPNHGeZOI82cR5ionz1D5FDZrxTZkqNnVsmti0seli08dmiM1I1GBwL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBk2Dh8VTGRinNjBOY2Cc1sA4nYFxegPjDAbGGU2iBiu1qup/Bo+Ha+dpJs7TTZxnmDjPNHGeZeI828R5jonz3D5FDWaKb8rMsVlis8Zmi6VY/Qd3KzY7UYPBvUQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGmPDwNg0MBI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMbQNjx8BI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDogYp80oZiRpojEQNNMaugbFnYHSLGsxk8LB4ZgPjLAbGWQ2MsxkYk4HxPwbGloFxdpOowcqtqjrP4PFw7TzfxHmBifNCE+dFJs6LTZyXmDgvNXFe1qeowRzxTZkzNlds7tg8sXlj88Xmjy1A1GBwL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBnMYPCye08A4l4FxbgPjPAbGeQ2M8xkY5zcwLmASNVilVVWXGzwerp1XmDivNHFeZeK82sR5jYnzWhPndSbO6/sUNVgwvikLxRauvy2xdqwTWyS2aGwxogaDe4kaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNMaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNVjQ4GHxQgbGhQ2M/zUwtg2MHQPjIgbGRQ2Mi5lEDVZtVdUNBo+Ha+eNJs6bTJw3mzhvMXHeauK8zcR5u4nzjj5FDRaPb8oSsSVjS8WWji0TWza2XGx5ogaDe4kaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNMaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNVjc4GHxEgbGJQ2MSxkYlzYwLmNgXNbAuJyBcXmTqMFqraq60+DxcO28y8R5t4nzHhPnvSbO+0yc95s4HzBxPtinqMEK8U1ZMbZSbOXYKrFVY6vFVo+tQdRgcC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogYrGDwsXtHAuJKBcWUD4yoGxlUNjKsZGFc3MK5hEjVYvVVVDxk8Hq6dD5s4HzFxPmrifMzE+biJ8wkT55Mmzqf6FDVYM74pa8XWjq0TWze2Xmz92AaxAaIGg3uJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTTGhoGxaWAkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGNsGxo6BkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMXQNjz8DoFjVY0+Bh8VoGxrUNjOsYGNc1MK5nYFzfwLiBgXHAJGqwRquqnjZ4PFw7nzFxPmvifM7E+byJ8wUT54smzpdMnC/3KWrQjW9KL7ZhbKPYxrFNYpvGNottTtRgcC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogZdg4fFPQPjhgbGjQyMGxsYNzEwbmpg3MzAuLlJ1GDNVlW9YvB4uHa+auJ8zcT5uonzDRPnmybOt0ycb5s43+lT1GCL+KZsGdsqtnVsm9i2se1i28d2IGowuJeogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGNsGBibBkaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONsW1g7BgYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqQNQgZV4pI1EDjZGogcbYNTD2DIxuUYMtDB4Wb2lg3MrAuLWBcRsD47YGxu0MjNsbGHcwiRqs1aqqdw0eD9fO90yc75s4PzBxfmji/MjE+bGJ8xMT56d9ihrsGN+UnWI7x3aJ7RrbLbZ7bI/YnkQNBvcSNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMDQNj08BI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMbYNjB0DI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYuwbGnoHRLWqwo8HD4p0MjDsbGHcxMO5qYNzNwLi7gXEPA+OeJlGDtVtV9ZnB4+Ha+bmJ8wsT55cmzq9MnF+bOL8xcX5r4vyuT1GDveKbsndsn9i+sf1i+8cOiB0YO4ioweBeogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONsWFgbBoYiRpojEQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNMa2gbFjYCRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGiNRA42RqAFRg5R5pYxEDTRGogYaY9fA2DMwukUN9jJ4WLy3gXEfA+O+Bsb9DIz7GxgPMDAeaGA8yCRqsE6rqr43eDxcO38wcf5o4vzJxPmzifMXE+evJs7fTJy/9ylqcHB8Uw6JHRo7LHZ47IjYkbGjYkcTNRjcS9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreowcEGD4sPMTAeamA8zMB4uIHxCAPjkQbGowyMR5tEDdZtVdUfBo+Ha+efJs6/TJx/mzj/MXFWM3o4/2XiHMbEOWxB5//97T8mvinHxo6LHR87IXZi7KTYybFTiBoM7iVqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BgbBsamgZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1OAYg4fFxxoYjzMwHm9gPMHAeKKB8SQD48kGxlNMogbrtapqOIPHw7VzeBPnCCbOEU2cI5k4/23iHNnEOYqJc9Q+RQ1OjW/K/2KnxU6PnRE7M3ZW7OzYOUQNBvcSNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMDQNj08BI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMbYNjB0DI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYuwbGnoHRLWpwqsHD4v8ZGE8zMJ5uYDzDwHimgfEsA+PZBsZzTKIG67eqajSDx8O1c3QT5xgmzjFNnGOZOMc2cY5j4hzXxDlen6IG58Y35bzY+bELYhfGLopdHLskdilRg8G9RA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaY8PA2DQwEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxtA2PHwEjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQOiBinzShmJGmiMRA00xq6BsWdgdIsanGvwsPg8A+P5BsYLDIwXGhgvMjBebGC8xMB4qUnUYINWVY1v8Hi4dk5g4pzQxDmRiXNiE+ckJs5JTZyTmTgn71PU4LL4plweuyJ2Zeyq2NWxa2LXxq4jajC4l6iBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAY2wYGJsGRqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42xbWDsGBiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGpA1CBlXikjUQONkaiBxtg1MPYMjG5Rg8sMHhZfbmC8wsB4pYHxKgPj1QbGawyM1xoYrzOJGgy0qmoKg8fDtXNKE2fDxNk0cU5l4pzaxDmNiXNaE+d0fYoaXB/flBtiN8Zuit0cuyV2a+y22O1EDQb3EjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojA0DY9PASNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDG2DYwdAyNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGLsGxp6B0S1qcL3Bw+IbDIw3GhhvMjDebGC8xcB4q4HxNgPj7SZRg26rqqY3eDxcO2cwcc5o4pzJxDmziXMWE+esJs7ZTJypT1GDO+KbcmfsrtjdsXti98bui90fe4CoweBeogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONsWFgbBoYiRpojEQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNMa2gbFjYCRqoDESNdAYiRpojEQNNEaiBhojUYP/16W8I2ogMhI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGDOwweFt9pYLzLwHi3gfEeA+O9Bsb7DIz3GxgfMIka9FpV9R+Dx8O1s2XinN3EOYeJc04T51wmzrlNnPOYOOftU9TgwfimPBR7OPZI7NHYY7HHY0/EniRqMLiXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGDBw0eFj9kYHzYwPiIgfFRA+NjBsbHDYxPGBifNIkabNiqqvkMHg/XzvlNnAuYOBc0cS5k4lzYxPlfE2fbxNnpU9TgqfimPB17JvZs7LnY87EXYi/GXiJqMLiXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGDpwweFj9tYHzGwPisgfE5A+PzBsYXDIwvGhhfMokabNSqqkUMHg/XzkVNnIuZOBc3cS5h4lzSxLmUiXNpE+cyfYoavBzflFdir8Zei70eeyP2Zuyt2NtEDQb3EjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojA0DY9PASNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDG2DYwdAyNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGLsGxp6B0S1q8LLBw+JXDIyvGhhfMzC+bmB8w8D4poHxLQPj2yZRg41bVbWswePh2rmciXN5E+cKJs4VTZwrmThXNnGuYuJctU9Rg3fim/Ju7L3Y+7EPYh/GPop9HPuEqMHgXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDd4xeFj8roHxPQPj+wbGDwyMHxoYPzIwfmxg/MQkarBJq6pWM3g8XDtXN3GuYeJc08S5lolzbRPnOibOdU2c6/UpavBpfFM+i30e+yL2Zeyr2Nexb2LfEjUY3EvUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDE2DIxNAyNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHG2DYwdgyMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGPsGhh7Bka3qMGnBg+LPzMwfm5g/MLA+KWB8SsD49cGxm8MjN+aRA02bVXV+gaPh2vnBibOARNn18TZM3FuaOLcyMS5sYlzkz5FDb6Lb8r3sR9iP8Z+iv0c+yX2a+w3ogaDe4kaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNMaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNfjO4GHx9wbGHwyMPxoYfzIw/mxg/MXA+KuB8TeTqMFmrara1ODxcO3czMS5uYlzCxPnlibOrUycW5s4tzFxbtunqMHv8U35I/Zn7K/Y37F/6j+244/Zf8WGqf+oJWowZC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdoga/Gzws/sPA+KeB8S8D498Gxn8MjPUDyaHd+C8D4zAblPk9Vzs3b1XVdgaPh2vn9ibOHUycO5o4dzJx7mzi3MXEuauJc7c+RQ2GjW/KcLHhYyPERoyNFPt3bOTYKEQNBvcSNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMDQNj08BI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMbYNjB0DI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYuwbGnoHRLWowrMHD4uEMjMMbGEcwMI5oYBzJwPhvA+PIBsZRTKIGW7SqaneDx8O1cw8T554mzr1MnHubOPcxce5r4tzPxLl/n6IGo8Y3ZbTY6LExYmPGxoqNHRsnNi5Rg8G9RA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaY8PA2DQwEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxtA2PHwEjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQOiBinzShmJGmiMRA00xq6BsWdgdIsajGrwsHg0A+PoBsYxDIxjGhjHMjCObWAcx8A4rknUYMtWVR1g8Hi4dh5o4jzIxHmwifMQE+ehJs7DTJyHmziP6FPUYLz4powfmyA2YWyi2MSxSWKTxiYjajC4l6iBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAY2wYGJsGRqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42xbWDsGBiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGpA1CBlXikjUQONkaiBxtg1MPYMjG5Rg/EMHhaPb2CcwMA4oYFxIgPjxAbGSQyMkxoYJzOJGmzVqqojDR4P186jTJxHmziPMXEea+I8zsR5vInzBBPniX2KGkwe35QpYlPGGrFmbKrY1LFpYtMSNRjcS9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreoweQGD4unMDBOaWBsGBibBsapDIxTGxinMTBOaxI12LpVVScZPB6unSebOE8xcZ5q4vyfifM0E+fpJs4zTJxn9ilqMF18U6aPzRCbMTZTbObYLLFZY7MRNRjcS9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreowXQGD4unNzDOYGCc0cA4k4FxZgPjLAbGWQ2Ms5lEDbZpVdVZBo+Ha+fZJs5zTJznmjjPM3Geb+K8wMR5oYnzoj5FDVJ8U+o/XFux2WNzxOaMzRWbOzYPUYPBvUQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGmPDwNg0MBI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMbQNjx8BI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDogYp80oZiRpojEQNNMaugbFnYHSLGiSDh8X/MTC2DIyzGxjnMDDOaWCcy8A4t4FxHpOowbatqrrY4PFw7bzExHmpifMyE+flJs4rTJxXmjivMnFe3aeowbzxTZkvNn9sgdiCsYViC9ffmlibqMHgXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDeY1eFg8n4FxfgPjAgbGBQ2MCxkYFzYw/tfA2DaJGmzXqqprDB4P185rTZzXmTivN3HeYOK80cR5k4nzZhPnLX2KGnTim7JIbNHYYrHFY0vElowtFVuaqMHgXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDToGD4sXMTAuamBczMC4uIFxCQPjkgbGpQyMS5tEDbZvVdWtBo+Ha+dtJs7bTZx3mDjvNHHeZeK828R5j4nz3j5FDZaJb8qyseViy8dWiK0YWym2cmwVogaDe4kaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNMaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNVjG4GHxsgbG5QyMyxsYVzAwrmhgXMnAuLKBcRWTqMEOraq6z+DxcO2838T5gInzQRPnQybOh02cj5g4HzVxPtanqMGq8U1ZLbZ6bI3YmrG1YmvH1omtS9RgcC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogarGjwsXs3AuLqBcQ0D45oGxrUMjGsbGNcxMK5rEjXYsVVVjxs8Hq6dT5g4nzRxPmXifNrE+YyJ81kT53Mmzuf7FDVYL74p68c2iA3EurFebMPYRrGNiRoM7iVqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BgbBsamgZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1GA9g4fF6xsYNzAwDhgYuwbGnoFxQwPjRgbGjU2iBju1quoFg8fDtfNFE+dLJs6XTZyvmDhfNXG+ZuJ83cT5Rp+iBpvEN2XT2GaxzWNbxLaMbRXbOrYNUYPBvUQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGmPDwNg0MBI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMbQNjx8BI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDogYp80oZiRpojEQNNMaugbFnYHSLGmxi8LB4UwPjZgbGzQ2MWxgYtzQwbmVg3NrAuI1J1GDnVlW9afB4uHa+ZeJ828T5jonzXRPneybO902cH5g4P+xT1GDb+KZsF9s+tkNsx9hOsZ1ju8R2JWowuJeogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGNsGBibBkaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNTg/3Up74gaiIxEDTRGogYaI1EDjZGogcZI1EBjbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1GBbg4fF2xkYtzcw7mBg3NHAuJOBcWcD4y4Gxl1Noga7tKrqI4PHw7XzYxPnJybOT02cn5k4PzdxfmHi/NLE+VWfoga7xTdl99gesT1je8X2ju0T2ze2H1GDwb1EDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhpjw8DYNDASNdAYiRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojG0DY8fASNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTTGroGxZ2B0ixrsZvCweHcD4x4Gxj0NjHsZGPc2MO5jYNzXwLifSdRg11ZVfW3weLh2fmPi/NbE+Z2J83sT5w8mzh9NnD+ZOH/uU9Rg//imHBA7MHZQ7ODYIbFDY4fFDidqMLiXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGD/Q0eFh9gYDzQwHiQgfFgA+MhBsZDDYyHGRgPN4ka7Naqql8MHg/Xzl9NnL+ZOH83cf5h4vzTxPmXifNvE+c/fYoaHBHflCNjR8WOjh0TOzZ2XOz42AlEDQb3EjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojA0DY9PASNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDG2DYwdAyNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGLsGxp6B0S1qcITBw+IjDYxHGRiPNjAeY2A81sB4nIHxeAPjCSZRg93r/6Gvmar/9ynNaue/TJzDmDiHNXEOZ+Ic3sQ5golzRBPnSAWd//e3/8T4ppwUOzl2SuzU2P9ip8VOj51B1GBwL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBicaPCw+ycB4soHxFAPjqQbG/xkYTzMwnm5gPMMkarBHK/6zDR4P186RTZyjmDhHNXGOZuIc3cQ5holzTBPnWH2KGpwZ35SzYmfHzomdGzsvdn7sgtiFRA0G9xI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtanCmwcPiswyMZxsYzzEwnmtgPM/AeL6B8QID44UmUYM9W1U1tsHj4do5jolzXBPneCbO8U2cE5g4JzRxTmTinLhPUYOL4ptyceyS2KWxy2KXx66IXRm7iqjB4F6iBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42xYWBsGhiJGmiMRA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00xraBsWNgJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaI1EDjZGoAVGDlHmljEQNNEaiBhpj18DYMzC6RQ0uMnhYfLGB8RID46UGxssMjJcbGK8wMF5pYLzKJGqwV6uqJjF4PFw7JzVxTmbinNzEOYWJc0oTZ8PE2TRxTtWnqMHV8U25JnZt7LrY9bEbYjfGbordTNRgcC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogZXGzwsvsbAeK2B8ToD4/UGxhsMjDcaGG8yMN5sEjXYu1VVUxs8Hq6d05g4pzVxTmfinN7EOYOJc0YT50wmzpn7FDW4Jb4pt8Zui90euyN2Z+yu2N2xe4gaDO4laqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYGwbGpoGRqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAY2wbGDsGRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxdg2MPQOjW9TgFoOHxbcaGG8zMN5uYLzDwHingfEuA+PdBsZ7TKIG+7SqahaDx8O1c1YT52wmzmTi/I+Js2XinN3EOYeJc84+RQ3ujW/KfbH7Yw/EHow9FHs49kjsUaIGg3uJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTTGhoGxaWAkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGNsGxo6BkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMXQNjz8DoFjW41+Bh8X0GxvsNjA8YGB80MD5kYHzYwPiIgfFRk6jBvq2qmsvg8XDtnNvEOY+Jc14T53wmzvlNnAuYOBc0cS7Up6jBY/FNeTz2ROzJ2FOxp2PPxJ6NPUfUYHAvUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHG2DAwNg2MRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGmPbwNgxMBI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1ICoQcq8UkaiBhojUQONsWtg7BkY3aIGjxk8LH7cwPiEgfFJA+NTBsanDYzPGBifNTA+ZxI12K9VVQsbPB6unf81cbZNnB0T5yImzkVNnIuZOBc3cS7Rp6jB8/FNeSH2Yuyl2MuxV2Kvxl6LvU7UYHAvUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHG2DAwNg2MRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGmPbwNgxMBI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1ICoQcq8UkaiBhojUQONsWtg7BkY3aIGzxs8LH7BwPiigfElA+PLBsZXDIyvGhhfMzC+bhI12L9VVUsaPB6unUuZOJc2cS5j4lzWxLmciXN5E+cKJs4V+xQ1eCO+KW/G3oq9HXsn9m7svdj7sQ+IGgzuJWqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGBsGxqaBkaiBxkjUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGNsGxg7BkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMXYNjD0Do1vU4A2Dh8VvGhjfMjC+bWB8x8D4roHxPQPj+wbGD0yiBge0qmolg8fDtXNlE+cqJs5VTZyrmThXN3GuYeJc08S5Vp+iBh/GN+Wj2MexT2Kfxj6LfR77IvYlUYPBvUQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGmPDwNg0MBI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMbQNjx8BI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDogYp80oZiRpojEQNNMaugbFnYHSLGnxo8LD4IwPjxwbGTwyMnxoYPzMwfm5g/MLA+KVJ1ODAVlWtbfB4uHauY+Jc18S5nolzfRPnBibOARNn18TZ61PU4Kv4pnwd+yb2bey72PexH2I/xn4iajC4l6iBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAY2wYGJsGRqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42xbWDsGBiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGpA1CBlXikjUQONkaiBxtg1MPYMjG5Rg68MHhZ/bWD8xsD4rYHxOwPj9wbGHwyMPxoYfzKJGhzUqqoNDR4P186NTJwbmzg3MXFuauLczMS5uYlzCxPnln2KGvwc35RfYr/Gfov9Hvsj9mfsr9jfRA0G9xI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtavCzwcPiXwyMvxoYfzMw/m5g/MPA+KeB8S8D498mUYODW1W1lcHj4dq5tYlzGxPntibO7Uyc25s4dzBx7mji3KlPUYN/6j9aB+J/LzZMbNjYcLHhYyPERowRNRjES9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreowT8GD4vrB2BDu/FfBsZhDIzDGhiHMzAOb2AcwcA44kCZ33O185BWVe1s8Hi4du5i4tzVxLmbiXN3E+ceJs49TZx7mTj37lPUYKSB+F/HRo6NEhs1Nlps9NgYsTFjRA0G8RI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtalA/sBra/03/bWAc2cA4ioFxVAPjaAbG0Q2MYxgYxxwo83uudh7aqqp9DB4P1859TZz7mTj3N3EeYOI80MR5kInzYBPnIX2KGow1UFVjx8aJjRsbLzZ+bILYhLGJYkQNBvESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMDQNj08BI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMbYNjB0DI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYuwbGnoHRLWpQP7Aa2v9NxzYwjmNgHNfAOJ6BcXwD4wQGxgkNjBMNlPk9VzsPa1XVoQaPh2vnYSbOw02cR5g4jzRxHmXiPNrEeYyJ89g+RQ0mHqiqSWKTxiaLTR6bIjZlrBFrxogaDOIlaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYGwbGpoGRqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAY2wbGDsGRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxdg2MPQOjW9SgfmA1tP+bTmJgnNTAOJmBcXID4xQGxikNjA0DY3OgzO+52nl4q6qOM3g8XDuPN3GeYOI80cR5konzZBPnKSbOU02c/+tT1GCqgaqaOjZNbNrYdLHpYzPEZozNFCNqMIiXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGDqQaG/n/TqQ2M0xgYpzUwTmdgnN7AOIOBcUYD40wDZX7P1c4jWlV1msHj4dp5uonzDBPnmSbOs0ycZ5s4zzFxnmviPK9PUYOZB6pqltissdliKVb/kdiKzR6bI0bUYBAvUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHG2DAwNg2MRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGmPbwNgxMBI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1ICoQcq8UkaiBhojUQONsWtg7BkY3aIG9QOrof3fdBYD46wGxtkMjMnA+B8DY8vAOLuBcY6BMr/naueRrao63+DxcO28wMR5oYnzIhPnxSbOS0ycl5o4LzNxXt6nqMGcA1U1V2zu2DyxeWPzxeaPLRBbMEbUYBAvUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHG2DAwNg2MRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGmPbwNgxMBI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1ICoQcq8UkaiBhojUQONsWtg7BkY3aIG9QOrof3fdC4D49wGxnkMjPMaGOczMM5vYFzAwLjgQJnfc7XzqFZVXWHweLh2XmnivMrEebWJ8xoT57UmzutMnNebOG/oU9RgoYGqWjj231g71oktEls0tlhs8RhRg0G8RA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaY8PA2DQwEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxtA2PHwEjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQOiBinzShmJGmiMRA00xq6BsWdgdIsa1A+shvZ/04UNjP81MLYNjB0D4yIGxkUNjIsZGBcfKPN7rnYe3aqqGw0eD9fOm0ycN5s4bzFx3mrivM3EebuJ8w4T5519ihosMVBVS8aWii0dWya2bGy52PKxFWJEDQbxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojA0DY9PASNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDG2DYwdAyNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGLsGxp6B0S1qUD+wGtr/TZc0MC5lYFzawLiMgXFZA+NyBsblDYwrDJT5PVc7j2lV1V0Gj4dr590mzntMnPeaOO8zcd5v4nzAxPmgifOhPkUNVhyoqpViK8dWia0aWy22emyN2JoxogaDeIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNMaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNagfWA3t/6YrGRhXNjCuYmBc1cC4moFxdQPjGgbGNQfK/J6rnce2quphg8fDtfMRE+ejJs7HTJyPmzifMHE+aeJ8ysT5dJ+iBmsNVNXasXVi68bWi60f2yA2EOvGiBoM4iVqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BgbBsamgZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1KB+YDW0/5uubWBcx8C4roFxPQPj+gbGDQyMAwbG7kCZ33O187hWVT1j8Hi4dj5r4nzOxPm8ifMFE+eLJs6XTJwvmzhf6VPUoDdQVRvGNoptHNsktmlss9jmsS1iRA0G8RI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtalA/sBrq/00NjBsZGDc2MG5iYNzUwLiZgXFzA+MWA2V+z9XO41tV9arB4+Ha+ZqJ83UT5xsmzjdNnG+ZON82cb5j4ny3T1GDLQeqaqvY1rFtYtvGtottH9shtmOMqMEgXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDeoHVkP7v+lWBsatDYzbGBi3NTBuZ2Dc3sC4g4Fxx4Eyv+dq5wmtqnrP4PFw7XzfxPmBifNDE+dHJs6PTZyfmDg/NXF+1qeowU4DVbVzbJfYrrHdYrvH9ojtGdsrRtRgEC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogb1A6uh/d90ZwPjLgbGXQ2MuxkYdzcw7mFg3NPAuNdAmd9ztfPEVlV9bvB4uHZ+YeL80sT5lYnzaxPnNybOb02c35k4v+9T1GDvgaraJ7ZvbL/Y/rEDYgfGDoodHCNqMIiXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGD+oHV0P5vuo+BcV8D434Gxv0NjAcYGA80MB5kYDx4oMzvudp5UquqfjB4PFw7fzRx/mTi/NnE+YuJ81cT528mzt9NnH/0KWpwyEBVHRo7LHZ47IjYkbGjYkfHjokRNRjES9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreoQf3Aamj/Nz3UwHiYgfFwA+MRBsYjDYxHGRiPNjAeM1Dm91ztPLlVVX8aPB6unX+ZOP82cf5j4qxm9nD+y8Q5jIlzWBPncAWd//e3/9iBqjoudnzshNiJsZNiJ8dOiZ0aI2owiJeogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGNsGBibBkaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONsW1g7BgYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqQNQgZV4pI1EDjZGogcbYNTD2DIxuUYP6gdXQ/m96nIHxeAPjCQbGEw2MJxkYTzYwnmJgPHWgzO+5/N+yVVXDGzwerp0jmDhHNHGOZOL8t4lzZBPnKCbOUU2co/UpavC/gao6LXZ67IzYmbGzYmfHzomdGyNqMIiXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGD+oHV0P5vepqB8XQD4xkGxjMNjGcZGM82MJ5jYDx3oMzvuTy+0Kqq0Q0eD9fOMUycY5o4xzJxjm3iHMfEOa6JczwT5/h9ihqcN1BV58cuiF0Yuyh2ceyS2KWxy2JEDQbxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojA0DY9PASNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDG2DYwdAyNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGLsGxp6B0S1qcN7A0P9ver6B8QID44UGxosMjBcbGC8xMF5qYLxsoMzvuTxO06qqCQweD9fOCU2cE5k4JzZxTmLinNTEOZmJc3IT5xR9ihpcPlBVV8SujF0Vuzp2Teza2HWx62NEDQbxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojA0DY9PASNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDG2DYwdAyNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGLsGxp6B0S1qUD+wGtr/Ta8wMF5pYLzKwHi1gfEaA+O1BsbrDIzXD5T5PVc7T2tV1ZQGj4drZ8PE2TRxTmXinNrEOY2Jc1oT53Qmzun7FDW4YaCqbozdFLs5dkvs1thtsdtjd8SIGgziJWqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGBsGxqaBkaiBxkjUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGNsGxg7BkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMXYNjD0Do1vUoH5gNbT/m95oYLzJwHizgfEWA+OtBsbbDIy3GxjvGCjze652nt6qqhkMHg/XzhlNnDOZOGc2cc5i4pzVxDmbiTOZOP/Tp6jBnQNVdVfs7tg9sXtj98Xujz0QezBG1GAQL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBvUDq6H93/QuA+PdBsZ7DIz3GhjvMzDeb2B8wMD44ECZ33O184xWVbUMHg/XztlNnHOYOOc0cc5l4pzbxDmPiXNeE+d8fYoaPDRQVQ/HHok9Gnss9njsidiTsadiRA0G8RI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtalA/sBra/00fNjA+YmB81MD4mIHxcQPjEwbGJw2MTw2U+T1XO89sVdX8Bo+Ha+cCJs4FTZwLmTgXNnH+18TZNnF2TJyL9Clq8PRAVT0Tezb2XOz52AuxF2MvxV6OETUYxEvUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDE2DIxNAyNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHG2DYwdgyMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGPsGhh7Bka3qEH9wGpo/zd9xsD4rIHxOQPj8wbGFwyMLxoYXzIwviw0lowanNWqqkUNHg/XzsVMnIubOJcwcS5p4lzKxLm0iXMZE+eyfYoavDJQVa/GXou9Hnsj9mbsrdjbsXdiRA0G8RI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtalA/sBra/01fNTC+ZmB83cD4hoHxTQPjWwbGtw2M7wyU+T1XO89uVdVyBo+Ha+fyJs4VTJwrmjhXMnGubOJcxcS5qolztT5FDd4dqKr3Yu/HPoh9GPso9nHsk9inMaIGg3iJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTTGhoGxaWAkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGNsGxo6BkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMXQNjz8DoFjWoH1gN7f+m7xkY3zcwfmBg/NDA+JGB8WMD4ycGxk8Hyvyeq53ntKpqdYPHw7VzDRPnmibOtUyca5s41zFxrmviXM/EuX6fogafDVTV57EvYl/Gvop9Hfsm9m3suxhRg0G8RA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaY8PA2DQwEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxtA2PHwEjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQOiBinzShmJGmiMRA00xq6BsWdgdIsa1A+shvZ/088NjF8YGL80MH5lYPzawPiNgfFbA+N3A2V+z9XOc1tVtYHB4+HaOWDi7Jo4eybODU2cG5k4NzZxbmLi3LRPUYPvB6rqh9iPsZ9iP8d+if0a+y32e4yowSBeogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONsWFgbBoYiRpojEQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNMa2gbFjYCRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGiNRA42RqAFRg5R5pYxEDTRGogYaY9fA2DMwukUN6gdWQ/u/6Q8Gxh8NjD8ZGH82MP5iYPzVwPibgfH3gTK/52rnea2q2szg8XDt3NzEuYWJc0sT51Ymzq1NnNuYOLc1cW7Xp6jBHwNV9Wfsr9jfsX9iVfwB9q/YMLFh6z/GiBoM2UvUQGMkaqAxEjXQGIkaaIxEDYgapMwrZSRqoDE2DIxNAyNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHG2DYwdgyMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGPsGhh7Bka3qEH9wGpo/zf908D4l4HxbwPjPwbG+gHi0G78l4FxGAPjsN0yv+dq5/mtqtre4PFw7dzBxLmjiXMnE+fOJs5dTJy7mjh3M3Hu3qeowXDxTRk+NkJsxNhIsX/HRo6NEhu1/mOMqMGQvUQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGmPDwNg0MBI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMbQNjx8BI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDogYp80oZiRpojEQNNMaugbFnYHSLGgxn8LB4eAPjCAbGEQ2MIxkY/21gHNnAOIqBcdRumd9ztfOCVlXtYfB4uHbuaeLcy8S5t4lzHxPnvibO/Uyc+5s4D+hT1GC0+KaMHhsjNmZsrNjYsXFi48bGq/8YI2owZC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogajGTwsHt3AOIaBcUwD41gGxrENjOMYGMc1MI7XLfN7rnZe2KqqAw0eD9fOg0ycB5s4DzFxHmriPMzEebiJ8wgT55F9ihqMH9+UCWITxiaKTRybJDZpbLLY5PUfY0QNhuwlaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYGwbGpoGRqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAY2wbGDsGRqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxdg2MPQOjW9RgfIOHxRMYGCc0ME5kYJzYwDiJgXFSA+NkBsbJu2V+z9XOi1pVdZTB4+HaebSJ8xgT57EmzuNMnMebOE8wcZ5o4jypT1GDKeKbMmWsEWvGpopNHZsmNm1suvqPMaIGQ/YSNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMDQNj08BI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMbYNjB0DI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxEDYgapMwrZSRqoDESNdAYuwbGnoHRLWowhcHD4ikNjA0DY9PAOJWBcWoD4zQGxmkNjNN1y/yeq50Xt6rqZIPHw7XzFBPnqSbO/5k4TzNxnm7iPMPEeaaJ86w+RQ2mj2/KDLEZYzPFZo7NEps1Nlss1X+METUYspeogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGNsGBibBkaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONsW1g7BgYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqQNQgZV4pI1EDjZGogcbYNTD2DIxuUYPpDR4Wz2BgnNHAOJOBcWYD4ywGxlkNjLMZGFO3zO+52nlJq6rONng8XDvPMXGea+I8z8R5vonzAhPnhSbOi0ycF/cpalD/sdWKzR6bIzZnbK7Y3LF5YvPWf4wRNRiyl6iBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAY2wYGJsGRqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42xbWDsGBiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcZI1EBjJGpA1CBlXikjUQONkaiBxtg1MPYMjG5Rg/8YPCxuGRhnNzDOYWCc08A4l4FxbgPjPAbGebtlfs/VzktbVXWJwePh2nmpifMyE+flJs4rTJxXmjivMnFebeK8pk9Rg/nimzJ/bIHYgrGFYgvX35lYO9ap/xgjajBkL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBvMZPCye38C4gIFxQQPjQgbGhQ2M/zUwtg2MnW6Z33O187JWVV1r8Hi4dl5n4rzexHmDifNGE+dNJs6bTZy3mDhv7VPUYJH4piwaWyy2eGyJ2JKxpWJLx5ap/xgjajBkL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBosYPCxe1MC4mIFxcQPjEgbGJQ2MSxkYlzYwLtMt83uudl7eqqrbDB4P187bTZx3mDjvNHHeZeK828R5j4nzXhPnfX2KGiwb35TlYsvHVoitGFsptnJsldiq9R9jRA2G7CVqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BgbBsamgZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1GBZg4fFyxkYlzcwrmBgXNHAuJKBcWUD4yoGxlW7ZX7P1c4rWlV1v8Hj4dr5gInzQRPnQybOh02cj5g4HzVxPmbifLxPUYPV4puyemyN2JqxtWJrx9aJrRtbr/5jjKjBkL1EDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhpjw8DYNDASNdAYiRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojG0DY8fASNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTTGroGxZ2B0ixqsZvCweHUD4xoGxjUNjGsZGNc2MK5jYFzXwLhet8zvudp5ZauqnjB4PFw7nzRxPmXifNrE+YyJ81kT53MmzudNnC/0KWqwfnxTNogNxLqxXmzD2EaxjWOb1H+METUYspeogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGNsGBibBkaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONsW1g7BgYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHGSNRAYyRqQNQgZV4pI1EDjZGogcbYNTD2DIxuUYP1DR4Wb2BgHDAwdg2MPQPjhgbGjQyMGxsYN+mW+T1XO69qVdWLBo+Ha+dLJs6XTZyvmDhfNXG+ZuJ83cT5honzzT5FDTaNb8pmsc1jW8S2jG0V2zq2TWzb+o8xogZD9hI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIwNA2PTwEjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkaqAxtg2MHQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogZEDVLmlTISNdAYiRpojEQNiBqkzCtlJGqgMRI10Bi7BsaegdEtarCpwcPizQyMmxsYtzAwbmlg3MrAuLWBcRsD47bdMr/naufVrap6y+DxcO1828T5jonzXRPneybO902cH5g4PzRxftSnqMF28U3ZPrZDbMfYTrGdY7vEdo3tVv8xRtRgyF6iBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42xYWBsGhiJGmiMRA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00xraBsWNgJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaI1EDjZGoAVGDlHmljEQNNEaiBhpj18DYMzC6RQ22M3hYvL2BcQcD444Gxp0MjDsbGHcxMO5qYNytW+b3XO28plVVHxs8Hq6dn5g4PzVxfmbi/NzE+YWJ80sT51cmzq/7FDXYPb4pe8T2jO0V2zu2T2zf2H6x/es/xogaDNlL1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxNgyMTQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxtg2MHYMjEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDESNSBqkDKvlJGogcZI1EBj7BoYewZGt6jB7gYPi/cwMO5pYNzLwLi3gXEfA+O+Bsb9DIz7d8v8nqud17aq6huDx8O181sT53cmzu9NnD+YOH80cf5k4vzZxPlLn6IGB8Q35cDYQbGDY4fEDo0dFjs8dkT9xxhRgyF7iRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00xoaBsWlgJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BjbBsaOgZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogZEDVLmlTISNdAYiRpojF0DY8/A6BY1OMDgYfGBBsaDDIwHGxgPMTAeamA8zMB4uIHxiG6Z33O187pWVf1q8Hi4dv5m4vzdxPmHifNPE+dfJs6/TZz/mDirWco5/+9v/5HxTTkqdnTsmNixseNix8dOiJ1Y/zFG1GDIXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDY40eFh8lIHxaAPjMQbGYw2MxxkYjzcwnmBgPLFb5vdc7by+Ff+ZBR/lKp3DmDiHNXEOZ+Ic3sQ5golzRBPnSCbOf/cpanBSfFNOjp0SOzX2v9hpsdNjZ8TOrP8YI2owZC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogYnGTwsPtnAeIqB8VQD4/8MjKcZGE83MJ5hYDyzW+b3XO28oVVVIxs8Hq6do5g4RzVxjmbiHN3EOYaJc0wT51gmzrH7FDU4K74pZ8fOiZ0bOy92fuyC2IWxi+o/xogaDNlL1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxNgyMTQMjUQONkaiBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONkaiBxtg2MHYMjEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDESNSBqkDKvlJGogcZI1EBj7BoYewZGt6jBWQYPi882MJ5jYDzXwHiegfF8A+MFBsYLDYwXdcv8nqudN7aqahyDx8O1c1wT53gmzvFNnBOYOCc0cU5k4pzYxDlJn6IGF8c35ZLYpbHLYpfHrohdGbsqdnX9xxhRgyF7iRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00xoaBsWlgJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BjbBsaOgZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogZEDVLmlTISNdAYiRpojF0DY8/A6BY1uNjgYfElBsZLDYyXGRgvNzBeYWC80sB4lYHx6m6Z33O186ZWVU1q8Hi4dk5m4pzcxDmFiXNKE2fDxNk0cU5l4py6T1GDa+Kbcm3sutj1sRtiN8Zuit0cu6X+Y4yowZC9RA00RqIGGiNRA42RqIHGSNSAqEHKvFJGogYaY8PA2DQwEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxtA2PHwEjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNEaiBhojUQOiBinzShmJGmiMRA00xq6BsWdgdIsaXGPwsPhaA+N1BsbrDYw3GBhvNDDeZGC82cB4S7fM77n837JVVdMYPB6undOaOKczcU5v4pzBxDmjiXMmE+fMJs5Z+hQ1uDW+KbfFbo/dEbszdlfs7tg9sXvrP8aIGgzZS9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreowa0GD4tvMzDebmC8w8B4p4HxLgPj3QbGewyM93bL/J6rnbe0qmpWg8fDtXM2E2cycf7HxNkycc5u4pzDxDmniXOuPkUN7otvyv2xB2IPxh6KPRx7JPZo7LH6jzGiBkP2EjXQGIkaaIxEDTRGogYaI1EDogYp80oZiRpojA0DY9PASNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDG2DYwdAyNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGLsGxp6B0S1qcJ/Bw+L7DYwPGBgfNDA+ZGB82MD4iIHxUQPjY90yv+dq562tqprb4PFw7ZzHxDmviXM+E+f8Js4FTJwLmjgXMnEu3KeowePxTXki9mTsqdjTsWdiz8aeiz1f/zFG1GDIXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDR43eFj8hIHxSQPjUwbGpw2MzxgYnzUwPmdgfL5b5vdc7bytFf9ZBo+Ha2fbxNkxcS5i4lzUxLmYiXNxE+cSJs4l+xQ1eCG+KS/GXoq9HHsl9mrstdjrsTfqP8aIGgzZS9RAYyRqoDESNdAYiRpojEQNiBqkzCtlJGqgMTYMjE0DI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcbYNjB2DIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGhA1SJlXykjUQGMkaqAxEjUgapAyr5SRqIHGSNRAY+waGHsGRreowQsGD4tfNDC+ZGB82cD4ioHxVQPjawbG1w2Mb3TL/J6rnbe3qmopg8fDtXNpE+cyJs5lTZzLmTiXN3GuYOJc0cS5Up+iBm/GN+Wt2Nuxd2Lvxt6LvR/7IPZh/ccYUYMhe4kaaIxEDTRGogYaI1EDjZGoAVGDlHmljEQNNMaGgbFpYCRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAY2wbGjoGRqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQOiBinzShmJGmiMRA00RqIGRA1S5pUyEjXQGIkaaIxdA2PPwOgWNXjT4GHxWwbGtw2M7xgY3zUwvmdgfN/A+IGB8cNumd9ztfOOVlWtbPB4uHauYuJc1cS5molzdRPnGibONU2ca5k41+5T1OCj+KZ8HPsk9mnss9jnsS9iX8a+qv8YI2owZC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogYfGTws/tjA+ImB8VMD42cGxs8NjF8YGL80MH7VLfN7rnbe2aqqdQweD9fOdU2c65k41zdxbmDiHDBxdk2cPRPnhn2KGnwd35RvYt/Gvot9H/sh9mPsp9jP9R9jRA2G7CVqoDESNdAYiRpojEQNNEaiBkQNUuaVMhI10BgbBsamgZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjbBsYOwZGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA2IGqTMK2UkaqAxEjXQGIkaEDVImVfKSNRAYyRqoDF2DYw9A6Nb1OBrg4fF3xgYvzUwfmdg/N7A+IOB8UcD408Gxp+7ZX7P1c67WlW1kcHj4dq5sYlzExPnpibOzUycm5s4tzBxbmni3KpPUYNf4pvya+y32O+xP2J/xv6K/R37p/5jjKjBkL1EDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhpjw8DYNDASNdAYiRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00RqIGGiNRA42RqIHGSNRAYyRqoDESNdAYiRpojG0DY8fASNRAYyRqoDESNdAYiRpojEQNNEaiBhojUQONkagBUYOUeaWMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTTGroGxZ2B0ixr8YvCw+FcD428Gxt8NjH8YGP80MP5lYPzbwPhPt8zvudp5d6uqtjZ4PFw7tzFxbmvi3M7Eub2JcwcT544mzp1MnDv3KWpQxR8y/4oNExs2Nlxs+NgIsRFjI9V/6BA1GLKXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGD+oHV0P5v+i8D4zAGxmENjMMZGIc3MI5gYBzRwDhSr8zvudp5T6uqdjF4PFw7dzVx7mbi3N3EuYeJc08T514mzr1NnPv0KWrw7/imjBwbJTZqbLTY6LExYmPGxqr/0CFqMGQvUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHG2DAwNg2MRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGmPbwNgxMBI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1ICoQcq8UkaiBhojUQONsWtg7BkY3aIG9QOrof3fdGQD4ygGxlENjKMZGEc3MI5hYBzTwDhWr8zvudp5b6uq9jV4PFw79zNx7m/iPMDEeaCJ8yAT58EmzkNMnIf2KWowdnxTxomNGxsvNn5sgtiEsYliE9d/6BA1GLKXqIHGSNRAYyRqoDESNdAYiRoQNUiZV8pI1EBjbBgYmwZGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaI1EDjbFtYOwYGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxkjUQGMkakDUIGVeKSNRA42RqIHG2DUw9gyMblGD+oHV0P5vOo6BcVwD43gGxvENjBMYGCc0ME5kYJy4V+b3XO28r1VVhxk8Hq6dh5s4jzBxHmniPMrEebSJ8xgT57EmzuP6FDWYJL4pk8Ymi00emyI2ZawRa8amqv/QIWowZC9RA42RqIHGSNRAYyRqoDESNSBqkDKvlJGogcbYMDA2DYxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTRGogYaY9vA2DEwEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGpA1CBlXikjUQONkaiBxkjUgKhByrxSRqIGGiNRA42xa2DsGRjdogb1A6uh/d90UgPjZAbGyQ2MUxgYpzQwNgyMTQPjVL0yv+dq5/2tqjre4PFw7TzBxHmiifMkE+fJJs5TTJynmjj/Z+I8rU9Rg6njmzJNbNrYdLHpYzPEZozNFJu5/kOHqMGQvUQNNEaiBhojUQONkaiBxkjUgKhByrxSRqIGGmPDwNg0MBI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMbQNjx8BI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA42RqAFRg5R5pYxEDTRGogYaI1EDogYp80oZiRpojEQNNMaugbFnYHSLGtQPrIb2f9NpDIzTGhinMzBOb2CcwcA4o4FxJgPjzL0yv+dq5wOtqjrd4PFw7TzDxHmmifMsE+fZJs5zTJznmjjPM3Ge36eowSzxTZk1Nlssxeo/bFqx2WNzxOas/9AhajBkL1EDjZGogcZI1EBjJGqgMRI1IGqQMq+UkaiBxtgwMDYNjEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNRAYyRqoDESNdAYiRpojEQNNEaiBhpj28DYMTASNdAYiRpojEQNNEaiBhojUQONkaiBxkjUQGMkakDUIGVeKSNRA42RqIHGSNSAqEHKvFJGogYaI1EDjbFrYOwZGN2iBvUDq6H933RWA+NsBsZkYPyPgbFlYJzdwDiHgXHOXpnfc7XzwVZVXWDweLh2XmjivMjEebGJ8xIT56UmzstMnJebOK/oU9RgrvimzB2bJzZvbL7Y/LEFYgvGFqr/0CFqMGQvUQONkaiBxkjUQGMkaqAxEjUgapAyr5SRqIHG2DAwNg2MRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGmPbwNgxMBI10BiJGmiMRA00RqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjZGogcZI1ICoQcq8UkaiBhojUQONsWtg7BkY3aIG9QOrof3fdG4D4zwGxnkNjPMZGOc3MC5gYFzQwLhQr8zvudr5UKuqrjR4PFw7rzJxXm3ivMbEea2J8zoT5/UmzhtMnDf2KWqwcP1NibVjndgisUVji8UWjy1R/6FD1GDIXqIGGiNRA42RqIHGSNRAYyRqQNQgZV4pI1EDjbFhYGwaGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkaiBxkjUQGMkaqAxEjXQGIkaaIxEDTTGtoGxY2AkaqAxEjXQGIkaaIxEDTRGogYaI1EDjZGogcZI1ICoQcq8UkaiBhojUQONkagBUYOUeaWMRA00RqIGGmPXwNgzMLpFDf6fD6yG8n/T/xoY2wbGjoFxEQPjogbGxQyMixsYl+iV+T1XOx9uVdVNBo+Ha+fNJs5bTJy3mjhvM3HebuK8w8R5p4nzrj5FDZaMb8pSsaVjy8SWjS0XWz62QmzF+g+dOmowbGzU6v/3iBoM/f8PB6IGGiNRA42RqIHGSNSAqEHKvFJGogYa45QGxoaBsWlgJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogYaI1EDjZGogcZI1EBjJGqgMRI10BjbBsaOgZGogcZI1EBjJGqgMRI10BiJGmiMRA00RqIGGiNRA6IGKfNKGYkaaIxEDTRGogZEDVLmlTISNdAYiRpojF0DY8/AqI4a/H87///9r9eepcz/ve6O/9yt/8//WaL/3FTCuY2Jc1sT53Ymzu1NnDuYOHc0ce5k4tzZwHlPOHcxce5q4tzNxLm7iXMPE+eeJs69TJx7mzj3MXDeG859TZz7mTj3N3EeYOI80MR5kInzYBPnISbOQw2c94XzMBPn4SbOI0ycR5o4jzJxHm3iPMbEeayJ8zgD5/3hPN7EeYKJ80QT50kmzpNNnKeYOE81cf7PxHmagfOBcJ5u4jzDxHmmifMsE+fZJs5zTJznmjjPM3Geb+B8MJwXmDgvNHFeZOK82MR5iYnzUhPnZSbOy02cVxg4HwrnlSbOq0ycV5s4rzFxXmvivM7Eeb2J8wYT540GzofDeZOJ82YT5y0mzltNnLeZOG83cd5h4rzTxHmXgfORcN5t4rzHxHmvifM+E+f9Js4HTJwPmjgfMnE+bOB8NJyPmDgfNXE+ZuJ83MT5hInzSRPnUybOp02czxg4HwvnsybO50ycz5s4XzBxvmjifMnE+bKJ8xUT56sGzsfD+ZqJ83UT5xsmzjdNnG+ZON82cb5j4nzXxPmegfOJcL5v4vzAxPmhifMjE+fHJs5PTJyfmjg/M3F+buB8MpxfmDi/NHF+ZeL82sT5jYnzWxPndybO702cPxg4nwrnjybOn0ycP5s4fzFx/mri/M3E+buJ8w8T558GzqfD+Vf1/7mh2fm3ifMfE+f//f/kYGh2/svEOYyJc1gT53AmzuENnM+EcwQT54gmzpFMnP82cY5s4hzFxDmqiXM0E+foBs5nwzmGiXNME+dYJs6xTZzjmDjHNXGOZ+Ic38Q5gYHzuXBOaOKcyMQ5sYlzEhPnpCbOyUyck5s4pzBxTmngfD6cDRNn08Q5lYlzahPnNCbOaU2c05k4pzdxzmDgfCGcM5o4ZzJxzmzinMXEOauJczYTZzJx/sfE2TJwvhjO2U2cc5g45zRxzmXinNvEOY+Jc14T53wmzvkNnC+FcwET54ImzoVMnAubOP9r4mybODsmzkVMnIsaOF8O52ImzsVNnEuYOJc0cS5l4lzaxLmMiXNZE+dyBs5Xwrm8iXMFE+eKJs6VTJwrmzhXMXGuauJczcS5uoHz1XCuYeJc08S5lolzbRPnOibOdU2c65k41zdxbmDgfC2cAybOromzZ+Lc0MS5kYlzYxPnJibOTU2cmxk4Xw/n5ibOLUycW5o4tzJxbm3i3MbEua2JczsT5/YGzjfCuYOJc0cT504mzp1NnLuYOHc1ce5m4tzdxLmHgfPNcO5p4tzLxLm3iXMfE+e+Js79TJz7mzgPMHEeaOB8K5wHmTgPNnEeYuI81MR5mInzcBPnESbOI02cRxk43w7n0SbOY0ycx5o4jzNxHm/iPMHEeaKJ8yQT58kGznfCeYqJ81QT5/9MnKeZOE83cZ5h4jzTxHmWifNsA+e74TzHxHmuifM8E+f5Js4LTJwXmjgvMnFebOK8xMD5XjgvNXFeZuK83MR5hYnzShPnVSbOq02c15g4rzVwvh/O60yc15s4bzBx3mjivMnEebOJ8xYT560mztsMnB+E83YT5x0mzjtNnHeZOO82cd5j4rzXxHmfifN+A+eH4XzAxPmgifMhE+fDJs5HTJyPmjgfM3E+buJ8wsD5UTifNHE+ZeJ82sT5jInzWRPncybO502cL5g4XzRwfhzOl0ycL5s4XzFxvmrifM3E+bqJ8w0T55smzrcMnJ+E820T5zsmzndNnO+ZON83cX5g4vzQxPmRifNjA+en4fzExPmpifMzE+fnJs4vTJxfmji/MnF+beL8xsD5WTi/NXF+Z+L83sT5g4nzRxPnTybOn02cv5g4fzVwfh7O30ycv5s4/zBx/mni/MvE+beJ8x8TZzWMh/NfBs4vwjmMiXNYE+dwJs7hTZwjmDhHNHGOZOL8t4lzZAPnl+EcxcQ5qolzNBPn6CbOMUycY5o4xzJxjm3iHMfA+VU4xzVxjmfiHN/EOYGJc0IT50QmzolNnJOYOCc1cH4dzslMnJObOKcwcU5p4myYOJsmzqlMnFObOKcxcH4TzmlNnNOZOKc3cc5g4pzRxDmTiXNmE+csJs5ZDZzfhnM2E2cycf7HxNkycc5u4pzDxDmniXMuE+fcBs7vwjmPiXNeE+d8Js75TZwLmDgXNHEuZOJc2MT5XwPn9+Fsmzg7Js5FTJyLmjgXM3EubuJcwsS5pIlzKQPnD+Fc2sS5jIlzWRPncibO5U2cK5g4VzRxrmTiXNnA+WM4VzFxrmriXM3EubqJcw0T55omzrVMnGubONcxcP4UznVNnOuZONc3cW5g4hwwcXZNnD0T54Ymzo0MnD+Hc2MT5yYmzk1NnJuZODc3cW5h4tzSxLmViXNrA+cv4dzGxLmtiXM7E+f2Js4dTJw7mjh3MnHubOLcxcD5azh3NXHuZuLc3cS5h4lzTxPnXibO/wc79gBr98P1bX4Xp/apbZ/2GLVtuz2sbdu2bdu2bdu22/k+mXveeefJP3lmcq9J7iv5rWRld6/uXvmc3YPk9IY4+0CcfQHO73L2gzj7Q5wDIM6BEOcgiHMwxDkE4hwKcQ4DOH/IORziHAFxjoQ4R0GcoyHOMRDnWIhzHMQ5HuD8KecEiHMixDkJ4pwMcU6BOKdCnNMgzukQ5wyA85ecMyHOWRDnbIhzDsQ5F+KcB3HOhzgXQJwLAc7fci6COBdDnEsgzqUQ5zKIcznEuQLiXAlxrgI4/8i5GuJcA3GuhTjXQZzrIc4NEOdGiHMTxLkZ4Pwr5xaIcyvEuQ3i3A5x7oA4d0KcuyDO3RDnHoDTlcfl2gtx7oM490OcByDOgxDnIYjzMMR5BOI8CnBGkvMYxHkc4jwBcZ6EOE9BnKchzjMQ51mI8xzAGVnO8xDnBYjzIsR5CeK8DHFegTivQpzXIM7rAGcUOW9AnDchzlsQ522I8w7EeRfivAdx3oc4HwCcUeV8CHE+gjgfQ5xPIM6nEOcziPM5xPkC4nwJcLrJ+QrifA1xvoE430Kc7yDO9xDnB4jzI8T5CeCMJudniPMLxPkV4vwGcX6HOH9AnD8hzl8Q52+AM7qcfyDOvxCnKwrDGQnijAxxRoE4o0KcbhBnNIAzhpzRIc4YEGdMiDMWxBkb4owDccaFOONBnPEBzphyJoA4E0KciSBOd4gzMcSZBOJMCnEmgziTA5yx5EwBcaaEOFNBnKkhzjQQZ1qIMx3EmR7izABwxpYzI8SZCeLMDHFmgTizQpzZIM7sEGcOiDMnwBlHzlwQZ26I0wPizANx5oU4PSFOL4jTG+L0ATjjyukLcfpBnP4QZwDEGQhxBkGc+SDO/BBnAYAznpwFIc5CEGdhiLMIxFkU4iwGcRaHOEtAnCUBzvhyloI4S0OcZSDOshBnOYizPMRZAeKsCHFWAjgTyFkZ4qwCcVaFOKtBnNUhzhoQZ02IsxbEWRvgTChnHYizLsRZD+KsD3E2gDgbQpyNIM7GEGcTgDORnMEQZwjEGQpxhkGc4RBnBMTZFOJsBnE2Bzjd5WwBcbaEOFtBnK0hzjYQZ1uIsx3E2R7i7ABwJpazI8TZCeLsDHF2gTi7QpzdIM7uEGcPiLMnwJlEzl4QZ2+Isw/E2Rfi7Adx9oc4B0CcAyHOQQBnUjkHQ5xDIM6hEOcwiHM4xDkC4hwJcY6COEcDnMnkHANxjoU4x0Gc4yHOCRDnRIhzEsQ5GeKcAnAml3MqxDkN4pwOcc6AOGdCnLMgztkQ5xyIcy7AmULOeRDnfIhzAcS5EOJcBHEuhjiXQJxLIc5lAGdKOZdDnCsgzpUQ5yqIczXEuQbiXAtxroM41wOcqeTcAHFuhDg3QZybIc4tEOdWiHMbxLkd4twBcKaWcyfEuQvi3A1x7oE490Kc+yDO/RDnAYjzIMCZRs5DEOdhiPMIxHkU4jwGcR6HOE9AnCchzlMAZ1o5T0OcZyDOsxDnOYjzPMR5AeK8CHFegjgvA5zp5LwCcV6FOK9BnNchzhsQ502I8xbEeRvivANwppfzLsR5D+K8D3E+gDgfQpyPIM7HEOcTiPMpwJlBzmcQ53OI8wXE+RLifAVxvoY430CcbyHOdwBnRjnfQ5wfIM6PEOcniPMzxPkF4vwKcX6DOL8DnJnk/AFx/oQ4f0GcvyHOPxDnX4jTFZXhjARxRgY4M8sZBeKMCnG6QZzRIM7oEGcMiDMmxBkL4owNcGaRMw7EGRfijAdxxoc4E0CcCSHORBCnO8SZGODMKmcSiDMpxJkM4kwOcaaAOFNCnKkgztQQZxqAM5ucaSHOdBBneogzA8SZEeLMBHFmhjizQJxZAc7scmaDOLNDnDkgzpwQZy6IMzfE6QFx5oE48wKcOeT0hDi9IE5viNMH4vSFOP0gTn+IMwDiDAQ4c8oZBHHmgzjzQ5wFIM6CEGchiLMwxFkE4iwKcOaSsxjEWRziLAFxloQ4S0GcpSHOMhBnWYizHMCZW87yEGcFiLMixFkJ4qwMcVaBOKtCnNUgzuoAp4ecNSDOmhBnLYizNsRZB+KsC3HWgzjrQ5wNAM48cjaEOBtBnI0hziYQZzDEGQJxhkKcYRBnOMCZV84IiLMpxNkM4mwOcbaAOFtCnK0gztYQZxuA01POthBnO4izPcTZAeLsCHF2gjg7Q5xdIM6uAKeXnN0gzu4QZw+IsyfE2Qvi7A1x9oE4+0Kc/QBObzn7Q5wDIM6BEOcgiHMwxDkE4hwKcQ6DOIcDnD5yjoA4R0KcoyDO0RDnGIhzLMQ5DuIcD3FOADh95ZwIcU6COCdDnFMgzqkQ5zSIczrEOQPinAlw+sk5C+KcDXHOgTjnQpzzIM75EOcCiHMhxLkI4PSXczHEuQTiXApxLoM4l0OcKyDOlRDnKohzNcAZIOcaiHMtxLkO4lwPcW6AODdCnJsgzs0Q5xaAM1DOrRDnNohzO8S5A+LcCXHugjh3Q5x7IM69AGeQnPsgzv0Q5wGI8yDEeQjiPAxxHoE4j0KcxwDOfHIehzhPQJwnIc5TEOdpiPMMxHkW4jwHcZ4HOPPLeQHivAhxXoI4L0OcVyDOqxDnNYjzOsR5A+AsIOdNiPMWxHkb4rwDcd6FOO9BnPchzgcQ50OAs6CcjyDOxxDnE4jzKcT5DOJ8DnG+gDhfQpyvAM5Ccr6GON9AnG8hzncQ53uI8wPE+RHi/ARxfgY4C8v5BeL8CnF+gzi/Q5w/IM6fEOcviPM3xPkH4Cwi51+I0+XGcEaCOCNDnFEgzqgQpxvEGQ3ijA5wFpUzBsQZE+KMBXHGhjjjQJxxIc54EGd8iDMBwFlMzoQQZyKI0x3iTAxxJoE4k0KcySDO5BBnCoCzuJwpIc5UEGdqiDMNxJkW4kwHcaaHODNAnBkBzhJyZoI4M0OcWSDOrBBnNogzO8SZA+LMCXHmAjhLypkb4vSAOPNAnHkhTk+I0wvi9IY4fSBOX4CzlJx+EKc/xBkAcQZCnEEQZz6IMz/EWQDiLAhwlpazEMRZGOIsAnEWhTiLQZzFIc4SEGdJiLMUwFlGztIQZxmIsyzEWQ7iLA9xVoA4K0KclSDOygBnWTmrQJxVIc5qEGd1iLMGxFkT4qwFcdaGOOsAnOXkrAtx1oM460OcDSDOhhBnI4izMcTZBOIMBjjLyxkCcYZCnGEQZzjEGQFxNoU4m0GczSHOFgBnBTlbQpytIM7WEGcbiLMtxNkO4mwPcXaAODsCnBXl7ARxdoY4u0CcXSHObhBnd4izB8TZE+LsBXBWkrM3xNkH4uwLcfaDOPtDnAMgzoEQ5yCIczDAWVnOIRDnUIhzGMQ5HOIcAXGOhDhHQZyjIc4xAGcVOcdCnOMgzvEQ5wSIcyLEOQninAxxToE4pwKcVeWcBnFOhzhnQJwzIc5ZEOdsiHMOxDkX4pwHcFaTcz7EuQDiXAhxLoI4F0OcSyDOpRDnMohzOcBZXc4VEOdKiHMVxLka4lwDca6FONdBnOshzg0AZw05N0KcmyDOzRDnFohzK8S5DeLcDnHugDh3Apw15dwFce6GOPdAnHshzn0Q536I8wDEeRDiPARw1pLzMMR5BOI8CnEegziPQ5wnIM6TEOcpiPM0wFlbzjMQ51mI8xzEeR7ivABxXoQ4L0GclyHOKwBnHTmvQpzXIM7rEOcNiPMmxHkL4rwNcd6BOO8CnHXlvAdx3oc4H0CcDyHORxDnY4jzCcT5FOJ8BnDWk/M5xPkC4nwJcb6COF9DnG8gzrcQ5zuI8z3AWV/ODxDnR4jzE8T5GeL8AnF+hTi/QZzfIc4fAGcDOX9CnL8gzt8Q5x+I8y/E6YrGcEaCOCNDnFEAzoZyRoU43SDOaBBndIgzBsQZE+KMBXHGhjjjAJyN5IwLccaDOONDnAkgzoQQZyKI0x3iTAxxJgE4G8uZFOJMBnEmhzhTQJwpIc5UEGdqiDMNxJkW4GwiZzqIMz3EmQHizAhxZoI4M0OcWSDOrBBnNoAzWM7sEGcOiDMnxJkL4swNcXpAnHkgzrwQpyfAGSKnF8TpDXH6QJy+EKcfxOkPcQZAnIEQZxDAGSpnPogzP8RZAOIsCHEWgjgLQ5xFIM6iEGcxgDNMzuIQZwmIsyTEWQriLA1xloE4y0Kc5SDO8gBnuJwVIM6KEGcliLMyxFkF4qwKcVaDOKtDnDUAzgg5a0KctSDO2hBnHYizLsRZD+KsD3E2gDgbApxN5WwEcTaGOJtAnMEQZwjEGQpxhkGc4RBnBMDZTM6mEGcziLM5xNkC4mwJcbaCOFtDnG0gzrYAZ3M520Gc7SHODhBnR4izE8TZGeLsAnF2hTi7AZwt5OwOcfaAOHtCnL0gzt4QZx+Isy/E2Q/i7A9wtpRzAMQ5EOIcBHEOhjiHQJxDIc5hEOdwiHMEwNlKzpEQ5yiIczTEOQbiHAtxjoM4x0OcEyDOiQBnazknQZyTIc4pEOdUiHMaxDkd4pwBcc6EOGcBnG3knA1xzoE450Kc8yDO+RDnAohzIcS5COJcDHC2lXMJxLkU4lwGcS6HOFdAnCshzlUQ52qIcw3A2U7OtRDnOohzPcS5AeLcCHFugjg3Q5xbIM6tAGd7ObdBnNshzh0Q506IcxfEuRvi3ANx7oU49wGcHeTcD3EegDgPQpyHIM7DEOcRiPMoxHkM4jwOcHaU8wTEeRLiPAVxnoY4z0CcZyHOcxDneYjzAsDZSc6LEOcliPMyxHkF4rwKcV6DOK9DnDcgzpsAZ2c5b0GctyHOOxDnXYjzHsR5H+J8AHE+hDgfAZxd5HwMcT6BOJ9CnM8gzucQ5wuI8yXE+QrifA1wdpXzDcT5FuJ8B3G+hzg/QJwfIc5PEOdniPMLwNlNzq8Q5zeI8zvE+QPi/Alx/oI4f0OcfyDOvwBndzld0RnOSBBnZIgzCsQZFeJ0gzijQZzRIc4YAGcPOWNCnLEgztgQZxyIMy7EGQ/ijA9xJoA4EwKcPeVMBHG6Q5yJIc4kEGdSiDMZxJkc4kwBcaYEOHvJmQriTA1xpoE400Kc6SDO9BBnBogzI8SZCeDsLWdmiDMLxJkV4swGcWaHOHNAnDkhzlwQZ26As4+cHhBnHogzL8TpCXF6QZzeEKcPxOkLcfoBnH3l9Ic4AyDOQIgzCOLMB3HmhzgLQJwFIc5CAGc/OQtDnEUgzqIQZzGIszjEWQLiLAlxloI4SwOc/eUsA3GWhTjLQZzlIc4KEGdFiLMSxFkZ4qwCcA6QsyrEWQ3irA5x1oA4a0KctSDO2hBnHYizLsA5UM56EGd9iLMBxNkQ4mwEcTaGOJtAnMEQZwjAOUjOUIgzDOIMhzgjIM6mEGcziLM5xNkC4mwJcA6WsxXE2RribANxtoU420Gc7SHODhBnR4izE8A5RM7OEGcXiLMrxNkN4uwOcfaAOHtCnL0gzt4A51A5+0CcfSHOfhBnf4hzAMQ5EOIcBHEOhjiHAJzD5BwKcQ6DOIdDnCMgzpEQ5yiIczTEOQbiHAtwDpdzHMQ5HuKcAHFOhDgnQZyTIc4pEOdUiHMawDlCzukQ5wyIcybEOQvinA1xzoE450Kc8yDO+QDnSDkXQJwLIc5FEOdiiHMJxLkU4lwGcS6HOFcAnKPkXAlxroI4V0OcayDOtRDnOohzPcS5AeLcCHCOlnMTxLkZ4twCcW6FOLdBnNshzh0Q506IcxfAOUbO3RDnHohzL8S5D+LcD3EegDgPQpyHIM7DAOdYOY9AnEchzmMQ53GI8wTEeRLiPAVxnoY4zwCc4+Q8C3GegzjPQ5wXIM6LEOcliPMyxHkF4rwKcI6X8xrEeR3ivAFx3oQ4b0GctyHOOxDnXYjzHsA5Qc77EOcDiPMhxPkI4nwMcT6BOJ9CnM8gzucA50Q5X0CcLyHOVxDna4jzDcT5FuJ8B3G+hzg/AJyT5PwIcX6COD9DnF8gzq8Q5zeI8zvE+QPi/AlwTpbzF8T5G+L8A3H+hThdMRjOSBBnZIgzCsQZFeCcIqcbxBkN4owOccaAOGNCnLEgztgQZxyIMy7AOVXOeBBnfIgzAcSZEOJMBHG6Q5yJIc4kEGdSgHOanMkgzuQQZwqIMyXEmQriTA1xpoE400Kc6QDO6XKmhzgzQJwZIc5MEGdmiDMLxJkV4swGcWYHOGfImQPizAlx5oI4c0OcHhBnHogzL8TpCXF6AZwz5fSGOH0gTl+I0w/i9Ic4AyDOQIgzCOLMB3DOkjM/xFkA4iwIcRaCOAtDnEUgzqIQZzGIszjAOVvOEhBnSYizFMRZGuIsA3GWhTjLQZzlIc4KAOccOStCnJUgzsoQZxWIsyrEWQ3irA5x1oA4awKcc+WsBXHWhjjrQJx1Ic56EGd9iLMBxNkQ4mwEcM6TszHE2QTiDIY4QyDOUIgzDOIMhzgjIM6mAOd8OZtBnM0hzhYQZ0uIsxXE2RribANxtoU42wGcC+RsD3F2gDg7QpydIM7OEGcXiLMrxNkN4uwOcC6UswfE2RPi7AVx9oY4+0CcfSHOfhBnf4hzAMC5SM6BEOcgiHMwxDkE4hwKcQ6DOIdDnCMgzpEA52I5R0GcoyHOMRDnWIhzHMQ5HuKcAHFOhDgnAZxL5JwMcU6BOKdCnNMgzukQ5wyIcybEOQvinA1wLpVzDsQ5F+KcB3HOhzgXQJwLIc5FEOdiiHMJwLlMzqUQ5zKIcznEuQLiXAlxroI4V0OcayDOtQDncjnXQZzrIc4NEOdGiHMTxLkZ4twCcW6FOLcBnCvk3A5x7oA4d0KcuyDO3RDnHohzL8S5D+LcD3CulPMAxHkQ4jwEcR6GOI9AnEchzmMQ53GI8wTAuUrOkxDnKYjzNMR5BuI8C3GegzjPQ5wXIM6LAOdqOS9BnJchzisQ51WI8xrEeR3ivAFx3oQ4bwGca+S8DXHegTjvQpz3IM77EOcDiPMhxPkI4nwMcK6V8wnE+RTifAZxPoc4X0CcLyHOVxDna4jzDcC5Ts63EOc7iPM9xPkB4vwIcX6COD9DnF8gzq8A53o5v0Gc3yHOHxDnT4jzF8T5G+L8A3H+hThdMf/znRvkjARxRoY4o0CcUSFON4gzGsQZHeKMAXHGBDg3yhkL4owNccaBOONCnPEgzvgQZwKIMyHEmQjg3CSnO8SZGOJMAnEmhTiTQZzJIc4UEGdKiDMVwLlZztQQZxqIMy3EmQ7iTA9xZoA4M0KcmSDOzADnFjmzQJxZIc5sEGd2iDMHxJkT4swFceaGOD0Azq1y5oE480KcnhCnF8TpDXH6QJy+EKcfxOkPcG6TMwDiDIQ4gyDOfBBnfoizAMRZEOIsBHEWBji3y1kE4iwKcRaDOItDnCUgzpIQZymIszTEWQbg3CFnWYizHMRZHuKsAHFWhDgrQZyVIc4qEGdVgHOnnNUgzuoQZw2IsybEWQvirA1x1oE460Kc9QDOXXLWhzgbQJwNIc5GEGdjiLMJxBkMcYZAnKEA5245wyDOcIgzAuJsCnE2gzibQ5wtIM6WEGcrgHOPnK0hzjYQZ1uIsx3E2R7i7ABxdoQ4O0GcnQHOvXJ2gTi7QpzdIM7uEGcPiLMnxNkL4uwNcfYBOPfJ2Rfi7Adx9oc4B0CcAyHOQRDnYIhzCMQ5FODcL+cwiHM4xDkC4hwJcY6COEdDnGMgzrEQ5ziA84Cc4yHOCRDnRIhzEsQ5GeKcAnFOhTinQZzTAc6Dcs6AOGdCnLMgztkQ5xyIcy7EOQ/inA9xLgA4D8m5EOJcBHEuhjiXQJxLIc5lEOdyiHMFxLkS4Dws5yqIczXEuQbiXAtxroM410OcGyDOjRDnJoDziJybIc4tEOdWiHMbxLkd4twBce6EOHdBnLsBzqNy7oE490Kc+yDO/RDnAYjzIMR5COI8DHEeATiPyXkU4jwGcR6HOE9AnCchzlMQ52mI8wzEeRbgPC7nOYjzPMR5AeK8CHFegjgvQ5xXIM6rEOc1gPOEnNchzhsQ502I8xbEeRvivANx3oU470Gc9wHOk3I+gDgfQpyPIM7HEOcTiPMpxPkM4nwOcb4AOE/J+RLifAVxvoY430CcbyHOdxDne4jzA8T5EeA8LecniPMzxPkF4vwKcX6DOL9DnD8gzp8Q5y+A84ycvyHOPxDnX4jTFYvhjARxRoY4o0CcUSFON4DzrJzRIM7oEGcMiDMmxBkL4owNccaBOONCnPEAznNyxoc4E0CcCSHORBCnO8SZGOJMAnEmhTiTAZzn5UwOcaaAOFNCnKkgztQQZxqIMy3EmQ7iTA9wXpAzA8SZEeLMBHFmhjizQJxZIc5sEGd2iDMHwHlRzpwQZy6IMzfE6QFx5oE480KcnhCnF8TpDXBektMH4vSFOP0gTn+IMwDiDIQ4gyDOfBBnfoDzspwFIM6CEGchiLMwxFkE4iwKcRaDOItDnCUAzityloQ4S0GcpSHOMhBnWYizHMRZHuKsAHFWBDivylkJ4qwMcVaBOKtCnNUgzuoQZw2IsybEWQvgvCZnbYizDsRZF+KsB3HWhzgbQJwNIc5GEGdjgPO6nE0gzmCIMwTiDIU4wyDOcIgzAuJsCnE2AzhvyNkc4mwBcbaEOFtBnK0hzjYQZ1uIsx3E2R7gvClnB4izI8TZCeLsDHF2gTi7QpzdIM7uEGcPgPOWnD0hzl4QZ2+Isw/E2Rfi7Adx9oc4B0CcAwHO23IOgjgHQ5xDIM6hEOcwiHM4xDkC4hwJcY4COO/IORriHANxjoU4x0Gc4yHOCRDnRIhzEsQ5GeC8K+cUiHMqxDkN4pwOcc6AOGdCnLMgztkQ5xyA856ccyHOeRDnfIhzAcS5EOJcBHEuhjiXQJxLAc77ci6DOJdDnCsgzpUQ5yqIczXEuQbiXAtxrgM4H8i5HuLcAHFuhDg3QZybIc4tEOdWiHMbxLkd4Hwo5w6IcyfEuQvi3A1x7oE490Kc+yDO/RDnAYDzkZwHIc5DEOdhiPMIxHkU4jwGcR6HOE9AnCcBzsdynoI4T0OcZyDOsxDnOYjzPMR5AeK8CHFeAjifyHkZ4rwCcV6FOK9BnNchzhsQ502I8xbEeRvgfCrnHYjzLsR5D+K8D3E+gDgfQpyPIM7HEOcTgPOZnE8hzmcQ53OI8wXE+RLifAVxvoY430CcbwHO53K+gzjfQ5wfIM6PEOcniPMzxPkF4vwKcX4DOF/I+R3i/AFx/oQ4f0GcvyHOPxDnX4jTFZvhjARwvpQzMsQZBeKMCnG6QZzRIM7oEGcMiDMmxBkL4HwlZ2yIMw7EGRfijAdxxoc4E0CcCSHORBCnO8D5Ws7EEGcSiDMpxJkM4kwOcaaAOFNCnKkgztQA5xs500CcaSHOdBBneogzA8SZEeLMBHFmhjizAJxv5cwKcWaDOLNDnDkgzpwQZy6IMzfE6QFx5gE438mZF+L0hDi9IE5viNMH4vSFOP0gTn+IMwDgfC9nIMQZBHHmgzjzQ5wFIM6CEGchiLMwxFkE4PwgZ1GIsxjEWRziLAFxloQ4S0GcpSHOMhBnWYDzo5zlIM7yEGcFiLMixFkJ4qwMcVaBOKtCnNUAzk9yVoc4a0CcNSHOWhBnbYizDsRZF+KsB3HWBzg/y9kA4mwIcTaCOBtDnE0gzmCIMwTiDIU4wwDOL3KGQ5wREGdTiLMZxNkc4mwBcbaEOFtBnK0Bzq9ytoE420Kc7SDO9hBnB4izI8TZCeLsDHF2ATi/ydkV4uwGcXaHOHtAnD0hzl4QZ2+Isw/E2Rfg/C5nP4izP8Q5AOIcCHEOgjgHQ5xDIM6hEOcwgPOHnMMhzhEQ50iIcxTEORriHANxjoU4x0Gc4wHOn3JOgDgnQpyTIM7JEOcUiHMqxDkN4pwOcc4AOH/JORPinAVxzoY450CccyHOeRDnfIhzAcS5EOD8LeciiHMxxLkE4lwKcS6DOJdDnCsgzpUQ5yqA84+cqyHONRDnWohzHcS5HuLcAHFuhDg3QZybAc6/cm6BOLdCnNsgzu0Q5w6IcyfEuQvi3A1x7gE4XXldrr0Q5z6Icz/EeQDiPAhxHoI4D0OcRyDOowBnJDmPQZzHIc4TEOdJiPMUxHka4jwDcZ6FOM8BnJHlPA9xXoA4L0KclyDOyxDnFYjzKsR5DeK8DnBGkfMGxHkT4rwFcd6GOO9AnHchznsQ532I8wHAGVXOhxDnI4jzMcT5BOJ8CnE+gzifQ5wvIM6XAKebnK8gztcQ5xuI8y3E+Q7ifA9xfoA4P0KcnwDOaHJ+hji/QJxfIc5vEOd3iPMHxPkT4vwFcf4GOKPL+Qfi/AtxuuIwnJEgzsgQZxSIMyrE6QZxRgM4Y8gZHeKMAXHGhDhjQZyxIc44EGdciDMexBkf4IwpZwKIMyHEmQjidIc4E0OcSSDOpBBnMogzOcAZS84UEGdKiDMVxJka4kwDcaaFONNBnOkhzgwAZ2w5M0KcmSDOzBBnFogzK8SZDeLMDnHmgDhzApxx5MwFceaGOD0gzjwQZ16I0xPi9II4vSFOH4Azrpy+EKcfxOkPcQZAnIEQZxDEmQ/izA9xFgA448lZEOIsBHEWhjiLQJxFIc5iEGdxiLMExFkS4IwvZymIszTEWQbiLAtxloM4y0OcFSDOihBnJYAzgZyVIc4qEGdViLMaxFkd4qwBcdaEOGtBnLUBzoRy1oE460Kc9SDO+hBnA4izIcTZCOJsDHE2ATgTyRkMcYZAnKEQZxjEGQ5xRkCcTSHOZhBnc4DTXc4WEGdLiLMVxNka4mwDcbaFONtBnO0hzg4AZ2I5O0KcnSDOzhBnF4izK8TZDeLsDnH2gDh7ApxJ5OwFcfaGOPtAnH0hzn4QZ3+IcwDEORDiHARwJpVzMMQ5BOIcCnEOgziHQ5wjIM6REOcoiHM0wJlMzjEQ51iIcxzEOR7inABxToQ4J0GckyHOKQBncjmnQpzTIM7pEOcMiHMmxDkL4pwNcc6BOOcCnCnknAdxzoc4F0CcCyHORRDnYohzCcS5FOJcBnCmlHM5xLkC4lwJca6COFdDnGsgzrUQ5zqIcz3AmUrODRDnRohzE8S5GeLcAnFuhTi3QZzbIc4dAGdqOXdCnLsgzt0Q5x6Icy/EuQ/i3A9xHoA4DwKcaeQ8BHEehjiPQJxHIc5jEOdxiPMExHkS4jwFcKaV8zTEeQbiPAtxnoM4z0OcFyDOixDnJYjzMsCZTs4rEOdViPMaxHkd4rwBcd6EOG9BnLchzjsAZ3o570Kc9yDO+xDnA4jzIcT5COJ8DHE+gTifApwZ5HwGcT6HOF9AnC8hzlcQ52uI8w3E+RbifAdwZpTzPcT5AeL8CHF+gjg/Q5xfIM6vEOc3iPM7wJlJzh8Q50+I8xfE+Rvi/ANx/oU4XXEZzkgQZ2SAM7OcUSDOqBCnG8QZDeKMDnHGgDhjQpyxIM7YAGcWOeNAnHEhzngQZ3yIMwHEmRDiTARxukOciQHOrHImgTiTQpzJIM7kEGcKiDMlxJkK4kwNcaYBOLPJmRbiTAdxpoc4M0CcGSHOTBBnZogzC8SZFeDMLmc2iDM7xJkD4swJceaCOHNDnB4QZx6IMy/AmUNOT4jTC+L0hjh9IE5fiNMP4vSHOAMgzkCAM6ecQRBnPogzP8RZAOIsCHEWgjgLQ5xFIM6iAGcuOYtBnMUhzhIQZ0mIsxTEWRriLANxloU4ywGcueUsD3FWgDgrQpyVIM7KEGcViLMqxFkN4qwOcHrIWQPirAlx1oI4a0OcdSDOuhBnPYizPsTZAODMI2dDiLMRxNkY4mwCcQZDnCEQZyjEGQZxhgOceeWMgDibQpzNIM7mEGcLiLMlxNkK4mwNcbYBOD3lbAtxtoM420OcHSDOjhBnJ4izM8TZBeLsCnB6ydkN4uwOcfaAOHtCnL0gzt4QZx+Isy/E2Q/g9JazP8Q5AOIcCHEOgjgHQ5xDIM6hEOcwiHM4wOkj5wiIcyTEOQriHA1xjoE4x0Kc4yDO8RDnBIDTV86JEOckiHMyxDkF4pwKcU6DOKdDnDMgzpkAp5+csyDO2RDnHIhzLsQ5D+KcD3EugDgXQpyLAE5/ORdDnEsgzqUQ5zKIcznEuQLiXAlxroI4VwOcAXKugTjXQpzrIM71EOcGiHMjxLkJ4twMcW4BOAPl3ApxboM4t0OcOyDOnRDnLohzN8S5B+LcC3AGybkP4twPcR6AOA9CnIcgzsMQ5xGI8yjEeQzgzCfncYjzBMR5EuI8BXGehjjPQJxnIc5zEOd5gDO/nBcgzosQ5yWI8zLEeQXivApxXoM4r0OcNwDOAnLehDhvQZy3Ic47EOddiPMexHkf4nwAcT4EOAvK+QjifAxxPoE4n0KczyDO5xDnC4jzJcT5CuAsJOdriPMNxPkW4nwHcb6HOD9AnB8hzk8Q52eAs7CcXyDOrxDnN4jzO8T5A+L8CXH+gjh/Q5x/AM4icv6FOF3xGM5IEGdkiDMKxBkV4nSDOKNBnNEBzqJyxoA4Y0KcsSDO2BBnHIgzLsQZD+KMD3EmADiLyZkQ4kwEcbpDnIkhziQQZ1KIMxnEmRziTAFwFpczJcSZCuJMDXGmgTjTQpzpIM70EGcGiDMjwFlCzkwQZ2aIMwvEmRXizAZxZoc4c0CcOSHOXABnSTlzQ5weEGceiDMvxOkJcXpBnN4Qpw/E6QtwlpLTD+L0hzgDIM5AiDMI4swHceaHOAtAnAUBztJyFoI4C0OcRSDOohBnMYizOMRZAuIsCXGWAjjLyFka4iwDcZaFOMtBnOUhzgoQZ0WIsxLEWRngLCtnFYizKsRZDeKsDnHWgDhrQpy1IM7aEGcdgLOcnHUhznoQZ32IswHE2RDibARxNoY4m0CcwQBneTlDIM5QiDMM4gyHOCMgzqYQZzOIsznE2QLgrCBnS4izFcTZGuJsA3G2hTjbQZztIc4OEGdHgLOinJ0gzs4QZxeIsyvE2Q3i7A5x9oA4e0KcvQDOSnL2hjj7QJx9Ic5+EGd/iHMAxDkQ4hwEcQ4GOCvLOQTiHApxDoM4h0OcIyDOkRDnKIhzNMQ5BuCsIudYiHMcxDke4pwAcU6EOCdBnJMhzikQ51SAs6qc0yDO6RDnDIhzJsQ5C+KcDXHOgTjnQpzzAM5qcs6HOBdAnAshzkUQ52KIcwnEuRTiXAZxLgc4q8u5AuJcCXGugjhXQ5xrIM61EOc6iHM9xLkB4Kwh50aIcxPEuRni3AJxboU4t0Gc2yHOHRDnToCzppy7IM7dEOceiHMvxLkP4twPcR6AOA9CnIcAzlpyHoY4j0CcRyHOYxDncYjzBMR5EuI8BXGeBjhry3kG4jwLcZ6DOM9DnBcgzosQ5yWI8zLEeQXgrCPnVYjzGsR5HeK8AXHehDhvQZy3Ic47EOddgLOunPcgzvsQ5wOI8yHE+QjifAxxPoE4n0KczwDOenI+hzhfQJwvIc5XEOdriPMNxPkW4nwHcb4HOOvL+QHi/AhxfoI4P0OcXyDOrxDnN4jzO8T5A+BsIOdPiPMXxPkb4vwDcf6FOF3xGc5IEGdkiDMKwNlQzqgQpxvEGQ3ijA5xxoA4Y0KcsSDO2BBnHICzkZxxIc54EGd8iDMBxJkQ4kwEcbpDnIkhziQAZ2M5k0KcySDO5BBnCogzJcSZCuJMDXGmgTjTApxN5EwHcaaHODNAnBkhzkwQZ2aIMwvEmRXizAZwBsuZHeLMAXHmhDhzQZy5IU4PiDMPxJkX4vQEOEPk9II4vSFOH4jTF+L0gzj9Ic4AiDMQ4gwCOEPlzAdx5oc4C0CcBSHOQhBnYYizCMRZFOIsBnCGyVkc4iwBcZaEOEtBnKUhzjIQZ1mIsxzEWR7gDJezAsRZEeKsBHFWhjirQJxVIc5qEGd1iLMGwBkhZ02IsxbEWRvirANx1oU460Gc9SHOBhBnQ4CzqZyNIM7GEGcTiDMY4gyBOEMhzjCIMxzijAA4m8nZFOJsBnE2hzhbQJwtIc5WEGdriLMNxNkW4GwuZzuIsz3E2QHi7AhxdoI4O0OcXSDOrhBnN4CzhZzdIc4eEGdPiLMXxNkb4uwDcfaFOPtBnP0BzpZyDoA4B0KcgyDOwRDnEIhzKMQ5DOIcDnGOADhbyTkS4hwFcY6GOMdAnGMhznEQ53iIcwLEORHgbC3nJIhzMsQ5BeKcCnFOgzinQ5wzIM6ZEOcsgLONnLMhzjkQ51yIcx7EOR/iXABxLoQ4F0GciwHOtnIugTiXQpzLIM7lEOcKiHMlxLkK4lwNca4BONvJuRbiXAdxroc4N0CcGyHOTRDnZohzC8S5FeBsL+c2iHM7xLkD4twJce6COHdDnHsgzr0Q5z6As4Oc+yHOAxDnQYjzEMR5GOI8AnEehTiPQZzHAc6Ocp6AOE9CnKcgztMQ5xmI8yzEeQ7iPA9xXgA4O8l5EeK8BHFehjivQJxXIc5rEOd1iPMGxHkT4Ows5y2I8zbEeQfivAtx3oM470OcDyDOhxDnI4Czi5yPIc4nEOdTiPMZxPkc4nwBcb6EOF9BnK8Bzq5yvoE430Kc7yDO9xDnB4jzI8T5CeL8DHF+ATi7yfkV4vwGcX6HOH9AnD8hzl8Q52+I8w/E+Rfg7C6nKwHDGQnijAxxRoE4o0KcbhBnNIgzOsQZA+DsIWdMiDMWxBkb4owDccaFOONBnPEhzgQQZ0KAs6eciSBOd4gzMcSZBOJMCnEmgziTQ5wpIM6UAGcvOVNBnKkhzjQQZ1qIMx3EmR7izABxZoQ4MwGcveXMDHFmgTizQpzZIM7sEGcOiDMnxJkL4swNcPaR0wPizANx5oU4PSFOL4jTG+L0gTh9IU4/gLOvnP4QZwDEGQhxBkGc+SDO/BBnAYizIMRZCODsJ2dhiLMIxFkU4iwGcRaHOEtAnCUhzlIQZ2mAs7+cZSDOshBnOYizPMRZAeKsCHFWgjgrQ5xVAM4BclaFOKtBnNUhzhoQZ02IsxbEWRvirANx1gU4B8pZD+KsD3E2gDgbQpyNIM7GEGcTiDMY4gwBOAfJGQpxhkGc4RBnBMTZFOJsBnE2hzhbQJwtAc7BcraCOFtDnG0gzrYQZzuIsz3E2QHi7AhxdgI4h8jZGeLsAnF2hTi7QZzdIc4eEGdPiLMXxNkb4BwqZx+Isy/E2Q/i7A9xDoA4B0KcgyDOwRDnEIBzmJxDIc5hEOdwiHMExDkS4hwFcY6GOMdAnGMBzuFyjoM4x0OcEyDOiRDnJIhzMsQ5BeKcCnFOAzhHyDkd4pwBcc6EOGdBnLMhzjkQ51yIcx7EOR/gHCnnAohzIcS5COJcDHEugTiXQpzLIM7lEOcKgHOUnCshzlUQ52qIcw3EuRbiXAdxroc4N0CcGwHO0XJugjg3Q5xbIM6tEOc2iHM7xLkD4twJce4COMfIuRvi3ANx7oU490Gc+yHOAxDnQYjzEMR5GOAcK+cRiPMoxHkM4jwOcZ6AOE9CnKcgztMQ5xmAc5ycZyHOcxDneYjzAsR5EeK8BHFehjivQJxXAc7xcl6DOK9DnDcgzpsQ5y2I8zbEeQfivAtx3gM4J8h5H+J8AHE+hDgfQZyPIc4nEOdTiPMZxPkc4Jwo5wuI8yXE+QrifA1xvoE430Kc7yDO9xDnB4BzkpwfIc5PEOdniPMLxPkV4vwGcX6HOH9AnD8Bzsly/oI4f0OcfyDOvxCnKyHDGQnijAxxRoE4owKcU+R0gzijQZzRIc4YEGdMiDMWxBkb4owDccYFOKfKGQ/ijA9xJoA4E0KciSBOd4gzMcSZBOJMCnBOkzMZxJkc4kwBcaaEOFNBnKkhzjQQZ1qIMx3AOV3O9BBnBogzI8SZCeLMDHFmgTizQpzZIM7sAOcMOXNAnDkhzlwQZ26I0wPizANx5oU4PSFOL4BzppzeEKcPxOkLcfpBnP4QZwDEGQhxBkGc+QDOWXLmhzgLQJwFIc5CEGdhiLMIxFkU4iwGcRYHOGfLWQLiLAlxloI4S0OcZSDOshBnOYizPMRZAeCcI2dFiLMSxFkZ4qwCcVaFOKtBnNUhzhoQZ02Ac66ctSDO2hBnHYizLsRZD+KsD3E2gDgbQpyNAM55cjaGOJtAnMEQZwjEGQpxhkGc4RBnBMTZFOCcL2cziLM5xNkC4mwJcbaCOFtDnG0gzrYQZzuAc4Gc7SHODhBnR4izE8TZGeLsAnF2hTi7QZzdAc6FcvaAOHtCnL0gzt4QZx+Isy/E2Q/i7A9xDgA4F8k5EOIcBHEOhjiHQJxDIc5hEOdwiHMExDkS4Fws5yiIczTEOQbiHAtxjoM4x0OcEyDOiRDnJIBziZyTIc4pEOdUiHMaxDkd4pwBcc6EOGdBnLMBzqVyzoE450Kc8yDO+RDnAohzIcS5COJcDHEuATiXybkU4lwGcS6HOFdAnCshzlUQ52qIcw3EuRbgXC7nOohzPcS5AeLcCHFugjg3Q5xbIM6tEOc2gHOFnNshzh0Q506IcxfEuRvi3ANx7oU490Gc+wHOlXIegDgPQpyHIM7DEOcRiPMoxHkM4jwOcZ4AOFfJeRLiPAVxnoY4z0CcZyHOcxDneYjzAsR5EeBcLecliPMyxHkF4rwKcV6DOK9DnDcgzpsQ5y2Ac42ctyHOOxDnXYjzHsR5H+J8AHE+hDgfQZyPAc61cj6BOJ9CnM8gzucQ5wuI8yXE+QrifA1xvgE418n5FuJ8B3G+hzg/QJwfIc5PEOdniPMLxPkV4Fwv5zeI8zvE+QPi/Alx/oI4f0OcfyDOvxCnK9F/vnODnJEgzsgQZxSIMyrE6QZxRoM4o0OcMSDOmADnRjljQZyxIc44EGdciDMexBkf4kwAcSaEOBMBnJvkdIc4E0OcSSDOpBBnMogzOcSZAuJMCXGmAjg3y5ka4kwDcaaFONNBnOkhzgwQZ0aIMxPEmRng3CJnFogzK8SZDeLMDnHmgDhzQpy5IM7cEKcHwLlVzjwQZ16I0xPi9II4vSFOH4jTF+L0gzj9Ac5tcgZAnIEQZxDEmQ/izA9xFoA4C0KchSDOwgDndjmLQJxFIc5iEGdxiLMExFkS4iwFcZaGOMsAnDvkLAtxloM4y0OcFSDOihBnJYizMsRZBeKsCnDulLMaxFkd4qwBcdaEOGtBnLUhzjoQZ12Isx7AuUvO+hBnA4izIcTZCOJsDHE2gTiDIc4QiDMU4NwtZxjEGQ5xRkCcTSHOZhBnc4izBcTZEuJsBXDukbM1xNkG4mwLcbaDONtDnB0gzo4QZyeIszPAuVfOLhBnV4izG8TZHeLsAXH2hDh7QZy9Ic4+AOc+OftCnP0gzv4Q5wCIcyDEOQjiHAxxDoE4hwKc++UcBnEOhzhHQJwjIc5REOdoiHMMxDkW4hwHcB6QczzEOQHinAhxToI4J0OcUyDOqRDnNIhzOsB5UM4ZEOdMiHMWxDkb4pwDcc6FOOdBnPMhzgUA5yE5F0KciyDOxRDnEohzKcS5DOJcDnGugDhXApyH5VwFca6GONdAnGshznUQ53qIcwPEuRHi3ARwHpFzM8S5BeLcCnFugzi3Q5w7IM6dEOcuiHM3wHlUzj0Q516Icx/EuR/iPABxHoQ4D0GchyHOIwDnMTmPQpzHIM7jEOcJiPMkxHkK4jwNcZ6BOM8CnMflPAdxnoc4L0CcFyHOSxDnZYjzCsR5FeK8BnCekPM6xHkD4rwJcd6COG9DnHcgzrsQ5z2I8z7AeVLOBxDnQ4jzEcT5GOJ8AnE+hTifQZzPIc4XAOcpOV9CnK8gztcQ5xuI8y3E+Q7ifA9xfoA4PwKcp+X8BHF+hji/QJxfIc5vEOd3iPMHxPkT4vwFcJ6R8zfE+Qfi/AtxutwZzkgQZ2SIMwrEGRXidAM4z8oZDeKMDnHGgDhjQpyxIM7YEGcciDMuxBkP4DwnZ3yIMwHEmRDiTARxukOciSHOJBBnUogzGcB5Xs7kEGcKiDMlxJkK4kwNcaaBONNCnOkgzvQA5wU5M0CcGSHOTBBnZogzC8SZFeLMBnFmhzhzAJwX5cwJceaCOHNDnB4QZx6IMy/E6QlxekGc3gDnJTl9IE5fiNMP4vSHOAMgzkCIMwjizAdx5gc4L8tZAOIsCHEWgjgLQ5xFIM6iEGcxiLM4xFkC4LwiZ0mIsxTEWRriLANxloU4y0Gc5SHOChBnRYDzqpyVIM7KEGcViLMqxFkN4qwOcdaAOGtCnLUAzmty1oY460CcdSHOehBnfYizAcTZEOJsBHE2Bjivy9kE4gyGOEMgzlCIMwziDIc4IyDOphBnM4DzhpzNIc4WEGdLiLMVxNka4mwDcbaFONtBnO0BzptydoA4O0KcnSDOzhBnF4izK8TZDeLsDnH2ADhvydkT4uwFcfaGOPtAnH0hzn4QZ3+IcwDEORDgvC3nIIhzMMQ5BOIcCnEOgziHQ5wjIM6REOcogPOOnKMhzjEQ51iIcxzEOR7inABxToQ4J0GckwHOu3JOgTinQpzTIM7pEOcMiHMmxDkL4pwNcc4BOO/JORfinAdxzoc4F0CcCyHORRDnYohzCcS5FOC8L+cyiHM5xLkC4lwJca6COFdDnGsgzrUQ5zqA84Gc6yHODRDnRohzE8S5GeLcAnFuhTi3QZzbAc6Hcu6AOHdCnLsgzt0Q5x6Icy/EuQ/i3A9xHgA4H8l5EOI8BHEehjiPQJxHIc5jEOdxiPMExHkS4Hws5ymI8zTEeQbiPAtxnoM4z0OcFyDOixDnJYDziZyXIc4rEOdViPMaxHkd4rwBcd6EOG9BnLcBzqdy3oE470Kc9yDO+xDnA4jzIcT5COJ8DHE+ATifyfkU4nwGcT6HOF9AnC8hzlcQ52uI8w3E+RbgfC7nO4jzPcT5AeL8CHF+gjg/Q5xfIM6vEOc3gPOFnN8hzh8Q50+I8xfE+Rvi/ANx/oU4XYkZzkgA50s5I0OcUSDOqBCnG8QZDeKMDnHGgDhjQpyxAM5XcsaGOONAnHEhzngQZ3yIMwHEmRDiTARxugOcr+VMDHEmgTiTQpzJIM7kEGcKiDMlxJkK4kwNcL6RMw3EmRbiTAdxpoc4M0CcGSHOTBBnZogzC8D5Vs6sEGc2iDM7xJkD4swJceaCOHNDnB4QZx6A852ceSFOT4jTC+L0hjh9IE5fiNMP4vSHOAMAzvdyBkKcQRBnPogzP8RZAOIsCHEWgjgLQ5xFAM4PchaFOItBnMUhzhIQZ0mIsxTEWRriLANxlgU4P8pZDuIsD3FWgDgrQpyVIM7KEGcViLMqxFkN4PwkZ3WIswbEWRPirAVx1oY460CcdSHOehBnfYDzs5wNIM6GEGcjiLMxxNkE4gyGOEMgzlCIMwzg/CJnOMQZAXE2hTibQZzNIc4WEGdLiLMVxNka4PwqZxuIsy3E2Q7ibA9xdoA4O0KcnSDOzhBnF4Dzm5xdIc5uEGd3iLMHxNkT4uwFcfaGOPtAnH0Bzu9y9oM4+0OcAyDOgRDnIIhzMMQ5BOIcCnEOAzh/yDkc4hwBcY6EOEdBnKMhzjEQ51iIcxzEOR7g/CnnBIhzIsQ5CeKcDHFOgTinQpzTIM7pEOcMgPOXnDMhzlkQ52yIcw7EORfinAdxzoc4F0CcCwHO33IugjgXQ5xLIM6lEOcyiHM5xLkC4lwJca4COP/IuRriXANxroU410Gc6yHODRDnRohzE8S5GeD8K+cWiHMrxLkN4twOce6AOHdCnLsgzt0Q5x6A0+Xpcu2FOPdBnPshzgMQ50GI8xDEeRjiPAJxHgU4I8l5DOI8DnGegDhPQpynIM7TEOcZiPMsxHkO4Iws53mI8wLEeRHivARxXoY4r0CcVyHOaxDndYAzipw3IM6bEOctiPM2xHkH4rwLcd6DOO9DnA8AzqhyPoQ4H0GcjyHOJxDnU4jzGcT5HOJ8AXG+BDjd5HwFcb6GON9AnG8hzncQ53uI8wPE+RHi/ARwRpPzM8T5BeL8CnF+gzi/Q5w/IM6fEOcviPM3wBldzj8Q51+I05WE4YwEcUaGOKNAnFEhTjeIMxrAGUPO6BBnDIgzJsQZC+KMDXHGgTjjQpzxIM74AGdMORNAnAkhzkQQpzvEmRjiTAJxJoU4k0GcyQHOWHKmgDhTQpypIM7UEGcaiDMtxJkO4kwPcWYAOGPLmRHizARxZoY4s0CcWSHObBBndogzB8SZE+CMI2cuiDM3xOkBceaBOPNCnJ4QpxfE6Q1x+gCcceX0hTj9IE5/iDMA4gyEOIMgznwQZ36IswDAGU/OghBnIYizMMRZBOIsCnEWgziLQ5wlIM6SAGd8OUtBnKUhzjIQZ1mIsxzEWR7irABxVoQ4KwGcCeSsDHFWgTirQpzVIM7qEGcNiLMmxFkL4qwNcCaUsw7EWRfirAdx1oc4G0CcDSHORhBnY4izCcCZSM5giDME4gyFOMMgznCIMwLibApxNoM4mwOc7nK2gDhbQpytIM7WEGcbiLMtxNkO4mwPcXYAOBPL2RHi7ARxdoY4u0CcXSHObhBnd4izB8TZE+BMImcviLM3xNkH4uwLcfaDOPtDnAMgzoEQ5yCAM6mcgyHOIRDnUIhzGMQ5HOIcAXGOhDhHQZyjAc5kco6BOMdCnOMgzvEQ5wSIcyLEOQninAxxTgE4k8s5FeKcBnFOhzhnQJwzIc5ZEOdsiHMOxDkX4Ewh5zyIcz7EuQDiXAhxLoI4F0OcSyDOpRDnMoAzpZzLIc4VEOdKiHMVxLka4lwDca6FONdBnOsBzlRyboA4N0KcmyDOzRDnFohzK8S5DeLcDnHuADhTy7kT4twFce6GOPdAnHshzn0Q536I8wDEeRDgTCPnIYjzMMR5BOI8CnEegziPQ5wnIM6TEOcpgDOtnKchzjMQ51mI8xzEeR7ivABxXoQ4L0GclwHOdHJegTivQpzXIM7rEOcNiPMmxHkL4rwNcd4BONPLeRfivAdx3oc4H0CcDyHORxDnY4jzCcT5FODMIOcziPM5xPkC4nwJcb6COF9DnG8gzrcQ5zuAM6Oc7yHODxDnR4jzE8T5GeL8AnF+hTi/QZzfAc5Mcv6AOH9CnL8gzt8Q5x+I8y/E6UrKcEaCOCMDnJnljAJxRoU43SDOaBBndIgzBsQZE+KMBXHGBjizyBkH4owLccaDOONDnAkgzoQQZyKI0x3iTAxwZpUzCcSZFOJMBnEmhzhTQJwpIc5UEGdqiDMNwJlNzrQQZzqIMz3EmQHizAhxZoI4M0OcWSDOrABndjmzQZzZIc4cEGdOiDMXxJkb4vSAOPNAnHkBzhxyekKcXhCnN8TpA3H6Qpx+EKc/xBkAcQYCnDnlDII480Gc+SHOAhBnQYizEMRZGOIsAnEWBThzyVkM4iwOcZaAOEtCnKUgztIQZxmIsyzEWQ7gzC1neYizAsRZEeKsBHFWhjirQJxVIc5qEGd1gNNDzhoQZ02IsxbEWRvirANx1oU460Gc9SHOBgBnHjkbQpyNIM7GEGcTiDMY4gyBOEMhzjCIMxzgzCtnBMTZFOJsBnE2hzhbQJwtIc5WEGdriLMNwOkpZ1uIsx3E2R7i7ABxdoQ4O0GcnSHOLhBnV4DTS85uEGd3iLMHxNkT4uwFcfaGOPtAnH0hzn4Ap7ec/SHOARDnQIhzEMQ5GOIcAnEOhTiHQZzDAU4fOUdAnCMhzlEQ52iIcwzEORbiHAdxjoc4JwCcvnJOhDgnQZyTIc4pEOdUiHMaxDkd4pwBcc4EOP3knAVxzoY450CccyHOeRDnfIhzAcS5EOJcBHD6y7kY4lwCcS6FOJdBnMshzhUQ50qIcxXEuRrgDJBzDcS5FuJcB3Guhzg3QJwbIc5NEOdmiHMLwBko51aIcxvEuR3i3AFx7oQ4d0GcuyHOPRDnXoAzSM59EOd+iPMAxHkQ4jwEcR6GOI9AnEchzmMAZz45j0OcJyDOkxDnKYjzNMR5BuI8C3GegzjPA5z55bwAcV6EOC9BnJchzisQ51WI8xrEeR3ivAFwFpDzJsR5C+K8DXHegTjvQpz3IM77EOcDiPMhwFlQzkcQ52OI8wnE+RTifAZxPoc4X0CcLyHOVwBnITlfQ5xvIM63EOc7iPM9xPkB4vwIcX6COD8DnIXl/AJxfoU4v0Gc3yHOHxDnT4jzF8T5G+L8A3AWkfMvxOlKxnBGgjgjQ5xRIM6oEKcbxBkN4owOcBaVMwbEGRPijAVxxoY440CccSHOeBBnfIgzAcBZTM6EEGciiNMd4kwMcSaBOJNCnMkgzuQQZwqAs7icKSHOVBBnaogzDcSZFuJMB3GmhzgzQJwZAc4ScmaCODNDnFkgzqwQZzaIMzvEmQPizAlx5gI4S8qZG+L0gDjzQJx5IU5PiNML4vSGOH0gTl+As5ScfhCnP8QZAHEGQpxBEGc+iDM/xFkA4iwIcJaWsxDEWRjiLAJxFoU4i0GcxSHOEhBnSYizFMBZRs7SEGcZiLMsxFkO4iwPcVaAOCtCnJUgzsoAZ1k5q0CcVSHOahBndYizBsRZE+KsBXHWhjjrAJzl5KwLcdaDOOtDnA0gzoYQZyOIszHE2QTiDAY4y8sZAnGGQpxhEGc4xBkBcTaFOJtBnM0hzhYAZwU5W0KcrSDO1hBnG4izLcTZDuJsD3F2gDg7ApwV5ewEcXaGOLtAnF0hzm4QZ3eIswfE2RPi7AVwVpKzN8TZB+LsC3H2gzj7Q5wDIM6BEOcgiHMwwFlZziEQ51CIcxjEORziHAFxjoQ4R0GcoyHOMQBnFTnHQpzjIM7xEOcEiHMixDkJ4pwMcU6BOKcCnFXlnAZxToc4Z0CcMyHOWRDnbIhzDsQ5F+KcB3BWk3M+xLkA4lwIcS6COBdDnEsgzqUQ5zKIcznAWV3OFRDnSohzFcS5GuJcA3GuhTjXQZzrIc4NAGcNOTdCnJsgzs0Q5xaIcyvEuQ3i3A5x7oA4dwKcNeXcBXHuhjj3QJx7Ic59EOd+iPMAxHkQ4jwEcNaS8zDEeQTiPApxHoM4j0OcJyDOkxDnKYjzNMBZW84zEOdZiPMcxHke4rwAcV6EOC9BnJchzisAZx05r0Kc1yDO6xDnDYjzJsR5C+K8DXHegTjvApx15bwHcd6HOB9AnA8hzkcQ52OI8wnE+RTifAZw1pPzOcT5AuJ8CXG+gjhfQ5xvIM63EOc7iPM9wFlfzg8Q50eI8xPE+Rni/AJxfoU4v0Gc3yHOHwBnAzl/Qpy/IM7fEOcfiPMvxOlKznBGgjgjQ5xRAM6GckaFON0gzmgQZ3SIMwbEGRPijAVxxoY44wCcjeSMC3HGgzjjQ5wJIM6EEGciiNMd4kwMcSYBOBvLmRTiTAZxJoc4U0CcKSHOVBBnaogzDcSZFuBsImc6iDM9xJkB4swIcWaCODNDnFkgzqwQZzaAM1jO7BBnDogzJ8SZC+LMDXF6QJx5IM68EKcnwBkipxfE6Q1x+kCcvhCnH8TpD3EGQJyBEGcQwBkqZz6IMz/EWQDiLAhxFoI4C0OcRSDOohBnMYAzTM7iEGcJiLMkxFkK4iwNcZaBOMtCnOUgzvIAZ7icFSDOihBnJYizMsRZBeKsCnFWgzirQ5w1AM4IOWtCnLUgztoQZx2Isy7EWQ/irA9xNoA4GwKcTeVsBHE2hjibQJzBEGcIxBkKcYZBnOEQZwTA2UzOphBnM4izOcTZAuJsCXG2gjhbQ5xtIM62AGdzOdtBnO0hzg4QZ0eIsxPE2Rni7AJxdoU4uwGcLeTsDnH2gDh7Qpy9IM7eEGcfiLMvxNkP4uwPcLaUcwDEORDiHARxDoY4h0CcQyHOYRDncIhzBMDZSs6REOcoiHM0xDkG4hwLcY6DOMdDnBMgzokAZ2s5J0GckyHOKRDnVIhzGsQ5HeKcAXHOhDhnAZxt5JwNcc6BOOdCnPMgzvkQ5wKIcyHEuQjiXAxwtpVzCcS5FOJcBnEuhzhXQJwrIc5VEOdqiHMNwNlOzrUQ5zqIcz3EuQHi3AhxboI4N0OcWyDOrQBnezm3QZzbIc4dEOdOiHMXxLkb4twDce6FOPcBnB3k3A9xHoA4D0KchyDOwxDnEYjzKMR5DOI8DnB2lPMExHkS4jwFcZ6GOM9AnGchznMQ53mI8wLA2UnOixDnJYjzMsR5BeK8CnFegzivQ5w3IM6bAGdnOW9BnLchzjsQ512I8x7EeR/ifABxPoQ4HwGcXeR8DHE+gTifQpzPIM7nEOcLiPMlxPkK4nwNcHaV8w3E+RbifAdxvoc4P0CcHyHOTxDnZ4jzC8DZTc6vEOc3iPM7xPkD4vwJcf6COH9DnH8gzr8AZ3c5XSkYzkgQZ2SIMwrEGRXidIM4o0Gc0SHOGABnDzljQpyxIM7YEGcciDMuxBkP4owPcSaAOBMCnD3lTARxukOciSHOJBBnUogzGcSZHOJMAXGmBDh7yZkK4kwNcaaBONNCnOkgzvQQZwaIMyPEmQng7C1nZogzC8SZFeLMBnFmhzhzQJw5Ic5cEGdugLOPnB4QZx6IMy/E6QlxekGc3hCnD8TpC3H6AZx95fSHOAMgzkCIMwjizAdx5oc4C0CcBSHOQgBnPzkLQ5xFIM6iEGcxiLM4xFkC4iwJcZaCOEsDnP3lLANxloU4y0Gc5SHOChBnRYizEsRZGeKsAnAOkLMqxFkN4qwOcdaAOGtCnLUgztoQZx2Isy7AOVDOehBnfYizAcTZEOJsBHE2hjibQJzBEGcIwDlIzlCIMwziDIc4IyDOphBnM4izOcTZAuJsCXAOlrMVxNka4mwDcbaFONtBnO0hzg4QZ0eIsxPAOUTOzhBnF4izK8TZDeLsDnH2gDh7Qpy9IM7eAOdQOftAnH0hzn4QZ3+IcwDEORDiHARxDoY4hwCcw+QcCnEOgziHQ5wjIM6REOcoiHM0xDkG4hwLcA6XcxzEOR7inABxToQ4J0GckyHOKRDnVIhzGsA5Qs7pEOcMiHMmxDkL4pwNcc6BOOdCnPMgzvkA50g5F0CcCyHORRDnYohzCcS5FOJcBnEuhzhXAJyj5FwJca6COFdDnGsgzrUQ5zqIcz3EuQHi3AhwjpZzE8S5GeLcAnFuhTi3QZzbIc4dEOdOiHMXwDlGzt0Q5x6Icy/EuQ/i3A9xHoA4D0KchyDOwwDnWDmPQJxHIc5jEOdxiPMExHkS4jwFcZ6GOM8AnOPkPAtxnoM4z0OcFyDOixDnJYjzMsR5BeK8CnCOl/MaxHkd4rwBcd6EOG9BnLchzjsQ512I8x7AOUHO+xDnA4jzIcT5COJ8DHE+gTifQpzPIM7nAOdEOV9AnC8hzlcQ52uI8w3E+RbifAdxvoc4PwCck+T8CHF+gjg/Q5xfIM6vEOc3iPM7xPkD4vwJcE6W8xfE+Rvi/ANx/oU4XSkZzkgQZ2SIMwrEGRXgnCKnG8QZDeKMDnHGgDhjQpyxIM7YEGcciDMuwDlVzngQZ3yIMwHEmRDiTARxukOciSHOJBBnUoBzmpzJIM7kEGcKiDMlxJkK4kwNcaaBONNCnOkAzulypoc4M0CcGSHOTBBnZogzC8SZFeLMBnFmBzhnyJkD4swJceaCOHNDnB4QZx6IMy/E6QlxegGcM+X0hjh9IE5fiNMP4vSHOAMgzkCIMwjizAdwzpIzP8RZAOIsCHEWgjgLQ5xFIM6iEGcxiLM4wDlbzhIQZ0mIsxTEWRriLANxloU4y0Gc5SHOCgDnHDkrQpyVIM7KEGcViLMqxFkN4qwOcdaAOGsCnHPlrAVx1oY460CcdSHOehBnfYizAcTZEOJsBHDOk7MxxNkE4gyGOEMgzlCIMwziDIc4IyDOpgDnfDmbQZzNIc4WEGdLiLMVxNka4mwDcbaFONsBnAvkbA9xdoA4O0KcnSDOzhBnF4izK8TZDeLsDnAulLMHxNkT4uwFcfaGOPtAnH0hzn4QZ3+IcwDAuUjOgRDnIIhzMMQ5BOIcCnEOgziHQ5wjIM6RAOdiOUdBnKMhzjEQ51iIcxzEOR7inABxToQ4JwGcS+ScDHFOgTinQpzTIM7pEOcMiHMmxDkL4pwNcC6Vcw7EORfinAdxzoc4F0CcCyHORRDnYohzCcC5TM6lEOcyiHM5xLkC4lwJca6COFdDnGsgzrUA53I510Gc6yHODRDnRohzE8S5GeLcAnFuhTi3AZwr5NwOce6AOHdCnLsgzt0Q5x6Icy/EuQ/i3A9wrpTzAMR5EOI8BHEehjiPQJxHIc5jEOdxiPMEwLlKzpMQ5ymI8zTEeQbiPAtxnoM4z0OcFyDOiwDnajkvQZyXIc4rEOdViPMaxHkd4rwBcd6EOG8BnGvkvA1x3oE470Kc9yDO+xDnA4jzIcT5COJ8DHCulfMJxPkU4nwGcT6HOF9AnC8hzlcQ52uI8w3AuU7OtxDnO4jzPcT5AeL8CHF+gjg/Q5xfIM6vAOd6Ob9BnN8hzh8Q50+I8xfE+Rvi/ANx/oU4Xan+850b5IwEcUaGOKNAnFEhTjeIMxrEGR3ijAFxxgQ4N8oZC+KMDXHGgTjjQpzxIM74EGcCiDMhxJkI4NwkpzvEmRjiTAJxJoU4k0GcySHOFBBnSogzFcC5Wc7UEGcaiDMtxJkO4kwPcWaAODNCnJkgzswA5xY5s0CcWSHObBBndogzB8SZE+LMBXHmhjg9AM6tcuaBOPNCnJ4QpxfE6Q1x+kCcvhCnH8TpD3BukzMA4gyEOIMgznwQZ36IswDEWRDiLARxFgY4t8tZBOIsCnEWgziLQ5wlIM6SEGcpiLM0xFkG4NwhZ1mIsxzEWR7irABxVoQ4K0GclSHOKhBnVYBzp5zVIM7qEGcNiLMmxFkL4qwNcdaBOOtCnPUAzl1y1oc4G0CcDSHORhBnY4izCcQZDHGGQJyhAOduOcMgznCIMwLibApxNoM4m0OcLSDOlhBnK4Bzj5ytIc42EGdbiLMdxNke4uwAcXaEODtBnJ0Bzr1ydoE4u0Kc3SDO7hBnD4izJ8TZC+LsDXH2ATj3ydkX4uwHcfaHOAdAnAMhzkEQ52CIcwjEORTg3C/nMIhzOMQ5AuIcCXGOgjhHQ5xjIM6xEOc4gPOAnOMhzgkQ50SIcxLEORninAJxToU4p0Gc0wHOg3LOgDhnQpyzIM7ZEOcciHMuxDkP4pwPcS4AOA/JuRDiXARxLoY4l0CcSyHOZRDncohzBcS5EuA8LOcqiHM1xLkG4lwLca6DONdDnBsgzo0Q5yaA84icmyHOLRDnVohzG8S5HeLcAXHuhDh3QZy7Ac6jcu6BOPdCnPsgzv0Q5wGI8yDEeQjiPAxxHgE4j8l5FOI8BnEehzhPQJwnIc5TEOdpiPMMxHkW4Dwu5zmI8zzEeQHivAhxXoI4L0OcVyDOqxDnNYDzhJzXIc4bEOdNiPMWxHkb4rwDcd6FOO9BnPcBzpNyPoA4H0KcjyDOxxDnE4jzKcT5DOJ8DnG+ADhPyfkS4nwFcb6GON9AnG8hzncQ53uI8wPE+RHgPC3nJ4jzM8T5BeL8CnF+gzi/Q5w/IM6fEOcvgPOMnL8hzj8Q51+I05Wa4YwEcUaGOKNAnFEhTjeA86yc0SDO6BBnDIgzJsQZC+KMDXHGgTjjQpzxAM5zcsaHOBNAnAkhzkQQpzvEmRjiTAJxJoU4kwGc5+VMDnGmgDhTQpypIM7UEGcaiDMtxJkO4kwPcF6QMwPEmRHizARxZoY4s0CcWSHObBBndogzB8B5Uc6cEGcuiDM3xOkBceaBOPNCnJ4QpxfE6Q1wXpLTB+L0hTj9IE5/iDMA4gyEOIMgznwQZ36A87KcBSDOghBnIYizMMRZBOIsCnEWgziLQ5wlAM4rcpaEOEtBnKUhzjIQZ1mIsxzEWR7irABxVgQ4r8pZCeKsDHFWgTirQpzVIM7qEGcNiLMmxFkL4LwmZ22Isw7EWRfirAdx1oc4G0CcDSHORhBnY4DzupxNIM5giDME4gyFOMMgznCIMwLibApxNgM4b8jZHOJsAXG2hDhbQZytIc42EGdbiLMdxNke4LwpZweIsyPE2Qni7AxxdoE4u0Kc3SDO7hBnD4Dzlpw9Ic5eEGdviLMPxNkX4uwHcfaHOAdAnAMBzttyDoI4B0OcQyDOoRDnMIhzOMQ5AuIcCXGOAjjvyDka4hwDcY6FOMdBnOMhzgkQ50SIcxLEORngvCvnFIhzKsQ5DeKcDnHOgDhnQpyzIM7ZEOccgPOenHMhznkQ53yIcwHEuRDiXARxLoY4l0CcSwHO+3IugziXQ5wrIM6VEOcqiHM1xLkG4lwLca4DOB/IuR7i3ABxboQ4N0GcmyHOLRDnVohzG8S5HeB8KOcOiHMnxLkL4twNce6BOPdCnPsgzv0Q5wGA85GcByHOQxDnYYjzCMR5FOI8BnEehzhPQJwnAc7Hcp6COE9DnGcgzrMQ5zmI8zzEeQHivAhxXgI4n8h5GeK8AnFehTivQZzXIc4bEOdNiPMWxHkb4Hwq5x2I8y7EeQ/ivA9xPoA4H0KcjyDOxxDnE4DzmZxPIc5nEOdziPMFxPkS4nwFcb6GON9AnG8BzudyvoM430OcHyDOjxDnJ4jzM8T5BeL8CnF+AzhfyPkd4vwBcf6EOH9BnL8hzj8Q51+I05WG4YwEcL6UMzLEGQXijApxukGc0SDO6BBnDIgzJsQZC+B8JWdsiDMOxBkX4owHccaHOBNAnAkhzkQQpzvA+VrOxBBnEogzKcSZDOJMDnGmgDhTQpypIM7UAOcbOdNAnGkhznQQZ3qIMwPEmRHizARxZoY4swCcb+XMCnFmgzizQ5w5IM6cEGcuiDM3xOkBceYBON/JmRfi9IQ4vSBOb4jTB+L0hTj9IE5/iDMA4HwvZyDEGQRx5oM480OcBSDOghBnIYizMMRZBOD8IGdRiLMYxFkc4iwBcZaEOEtBnKUhzjIQZ1mA86Oc5SDO8hBnBYizIsRZCeKsDHFWgTirQpzVAM5PclaHOGtAnDUhzloQZ22Isw7EWRfirAdx1gc4P8vZAOJsCHE2gjgbQ5xNIM5giDME4gyFOMMAzi9yhkOcERBnU4izGcTZHOJsAXG2hDhbQZytAc6vcraBONtCnO0gzvYQZweIsyPE2Qni7AxxdgE4v8nZFeLsBnF2hzh7QJw9Ic5eEGdviLMPxNkX4PwuZz+Isz/EOQDiHAhxDoI4B0OcQyDOoRDnMIDzh5zDIc4REOdIiHMUxDka4hwDcY6FOMdBnOMBzp9yToA4J0KckyDOyRDnFIhzKsQ5DeKcDnHOADh/yTkT4pwFcc6GOOdAnHMhznkQ53yIcwHEuRDg/C3nIohzMcS5BOJcCnEugziXQ5wrIM6VEOcqgPOPnKshzjUQ51qIcx3EuR7i3ABxboQ4N0GcmwHOv3JugTi3QpzbIM7tEOcOiHMnxLkL4twNce4BOF1eLtdeiHMfxLkf4jwAcR6EOA9BnIchziMQ51GAM5KcxyDO4xDnCYjzJMR5CuI8DXGegTjPQpznAM7Icp6HOC9AnBchzksQ52WI8wrEeRXivAZxXgc4o8h5A+K8CXHegjhvQ5x3IM67EOc9iPM+xPkA4Iwq50OI8xHE+RjifAJxPoU4n0GczyHOFxDnS4DTTc5XEOdriPMNxPkW4nwHcb6HOD9AnB8hzk8AZzQ5P0OcXyDOrxDnN4jzO8T5A+L8CXH+gjh/A5zR5fwDcf6FOF1pGc5IEGdkiDMKxBkV4nSDOKMBnDHkjA5xxoA4Y0KcsSDO2BBnHIgzLsQZD+KMD3DGlDMBxJkQ4kwEcbpDnIkhziQQZ1KIMxnEmRzgjCVnCogzJcSZCuJMDXGmgTjTQpzpIM70EGcGgDO2nBkhzkwQZ2aIMwvEmRXizAZxZoc4c0CcOQHOOHLmgjhzQ5weEGceiDMvxOkJcXpBnN4Qpw/AGVdOX4jTD+L0hzgDIM5AiDMI4swHceaHOAsAnPHkLAhxFoI4C0OcRSDOohBnMYizOMRZAuIsCXDGl7MUxFka4iwDcZaFOMtBnOUhzgoQZ0WIsxLAmUDOyhBnFYizKsRZDeKsDnHWgDhrQpy1IM7aAGdCOetAnHUhznoQZ32IswHE2RDibARxNoY4mwCcieQMhjhDIM5QiDMM4gyHOCMgzqYQZzOIsznA6S5nC4izJcTZCuJsDXG2gTjbQpztIM72EGcHgDOxnB0hzk4QZ2eIswvE2RXi7AZxdoc4e0CcPQHOJHL2gjh7Q5x9IM6+EGc/iLM/xDkA4hwIcQ4COJPKORjiHAJxDoU4h0GcwyHOERDnSIhzFMQ5GuBMJucYiHMsxDkO4hwPcU6AOCdCnJMgzskQ5xSAM7mcUyHOaRDndIhzBsQ5E+KcBXHOhjjnQJxzAc4Ucs6DOOdDnAsgzoUQ5yKIczHEuQTiXApxLgM4U8q5HOJcAXGuhDhXQZyrIc41EOdaiHMdxLke4Ewl5waIcyPEuQni3AxxboE4t0Kc2yDO7RDnDoAztZw7Ic5dEOduiHMPxLkX4twHce6HOA9AnAcBzjRyHoI4D0OcRyDOoxDnMYjzOMR5AuI8CXGeAjjTynka4jwDcZ6FOM9BnOchzgsQ50WI8xLEeRngTCfnFYjzKsR5DeK8DnHegDhvQpy3IM7bEOcdgDO9nHchznsQ532I8wHE+RDifARxPoY4n0CcTwHODHI+gzifQ5wvIM6XEOcriPM1xPkG4nwLcb4DODPK+R7i/ABxfoQ4P0GcnyHOLxDnV4jzG8T5HeDMJOcPiPMnxPkL4vwNcf6BOP9CnK50DGckiDMywJlZzigQZ1SI0w3ijAZxRoc4Y0CcMSHOWBBnbIAzi5xxIM64EGc8iDM+xJkA4kwIcSaCON0hzsQAZ1Y5k0CcSSHOZBBncogzBcSZEuJMBXGmhjjTAJzZ5EwLcaaDONNDnBkgzowQZyaIMzPEmQXizApwZpczG8SZHeLMAXHmhDhzQZy5IU4PiDMPxJkX4MwhpyfE6QVxekOcPhCnL8TpB3H6Q5wBEGcgwJlTziCIMx/EmR/iLABxFoQ4C0GchSHOIhBnUYAzl5zFIM7iEGcJiLMkxFkK4iwNcZaBOMtCnOUAztxyloc4K0CcFSHOShBnZYizCsRZFeKsBnFWBzg95KwBcdaEOGtBnLUhzjoQZ12Isx7EWR/ibABw5pGzIcTZCOJsDHE2gTiDIc4QiDMU4gyDOMMBzrxyRkCcTSHOZhBnc4izBcTZEuJsBXG2hjjbAJyecraFONtBnO0hzg4QZ0eIsxPE2Rni7AJxdgU4veTsBnF2hzh7QJw9Ic5eEGdviLMPxNkX4uwHcHrL2R/iHABxDoQ4B0GcgyHOIRDnUIhzGMQ5HOD0kXMExDkS4hwFcY6GOMdAnGMhznEQ53iIcwLA6SvnRIhzEsQ5GeKcAnFOhTinQZzTIc4ZEOdMgNNPzlkQ52yIcw7EORfinAdxzoc4F0CcCyHORQCnv5yLIc4lEOdSiHMZxLkc4lwBca6EOFdBnKsBzgA510CcayHOdRDneohzA8S5EeLcBHFuhji3AJyBcm6FOLdBnNshzh0Q506IcxfEuRvi3ANx7gU4g+TcB3HuhzgPQJwHIc5DEOdhiPMIxHkU4jwGcOaT8zjEeQLiPAlxnoI4T0OcZyDOsxDnOYjzPMCZX84LEOdFiPMSxHkZ4rwCcV6FOK9BnNchzhsAZwE5b0KctyDO2xDnHYjzLsR5D+K8D3E+gDgfApwF5XwEcT6GOJ9AnE8hzmcQ53OI8wXE+RLifAVwFpLzNcT5BuJ8C3G+gzjfQ5wfIM6PEOcniPMzwFlYzi8Q51eI8xvE+R3i/AFx/oQ4f0GcvyHOPwBnETn/Qpyu9AxnJIgzMsQZBeKMCnG6QZzRIM7oAGdROWNAnDEhzlgQZ2yIMw7EGRfijAdxxoc4EwCcxeRMCHEmgjjdIc7EEGcSiDMpxJkM4kwOcaYAOIvLmRLiTAVxpoY400CcaSHOdBBneogzA8SZEeAsIWcmiDMzxJkF4swKcWaDOLNDnDkgzpwQZy6As6ScuSFOD4gzD8SZF+L0hDi9IE5viNMH4vQFOEvJ6Qdx+kOcARBnIMQZBHHmgzjzQ5wFIM6CAGdpOQtBnIUhziIQZ1GIsxjEWRziLAFxloQ4SwGcZeQsDXGWgTjLQpzlIM7yEGcFiLMixFkJ4qwMcJaVswrEWRXirAZxVoc4a0CcNSHOWhBnbYizDsBZTs66EGc9iLM+xNkA4mwIcTaCOBtDnE0gzmCAs7ycIRBnKMQZBnGGQ5wREGdTiLMZxNkc4mwBcFaQsyXE2QribA1xtoE420Kc7SDO9hBnB4izI8BZUc5OEGdniLMLxNkV4uwGcXaHOHtAnD0hzl4AZyU5e0OcfSDOvhBnP4izP8Q5AOIcCHEOgjgHA5yV5RwCcQ6FOIdBnMMhzhEQ50iIcxTEORriHANwVpFzLMQ5DuIcD3FOgDgnQpyTIM7JEOcUiHMqwFlVzmkQ53SIcwbEORPinAVxzoY450CccyHOeQBnNTnnQ5wLIM6FEOciiHMxxLkE4lwKcS6DOJcDnNXlXAFxroQ4V0GcqyHONRDnWohzHcS5HuLcAHDWkHMjxLkJ4twMcW6BOLdCnNsgzu0Q5w6IcyfAWVPOXRDnbohzD8S5F+LcB3HuhzgPQJwHIc5DAGctOQ9DnEcgzqMQ5zGI8zjEeQLiPAlxnoI4TwOcteU8A3GehTjPQZznIc4LEOdFiPMSxHkZ4rwCcNaR8yrEeQ3ivA5x3oA4b0KctyDO2xDnHYjzLsBZV857EOd9iPMBxPkQ4nwEcT6GOJ9AnE8hzmcAZz05n0OcLyDOlxDnK4jzNcT5BuJ8C3G+gzjfA5z15fwAcX6EOD9BnJ8hzi8Q51eI8xvE+R3i/AFwNpDzJ8T5C+L8nd71v+Y/2fkH4vwLcboyMJyRIM7IEGcUgLOhnFEhTjeIMxrEGR3ijAFxxoQ4Y0GcsSHOOABnIznjQpzxIM74EGcCiDMhxJkI4nSHOBNDnEkAzsZyJoU4k0GcySHOFBBnSogzFcSZGuJMA3GmBTibyJkO4kwPcWaAODNCnJkgzswQZxaIMyvEmQ3gDJYzO8SZA+LMCXHmgjhzQ5weEGceiDMvxOkJcIbI6QVxekOcPhCnL8TpB3H6Q5wBEGcgxBkEcIbKmQ/izA9xFoA4C0KchSDOwhBnEYizKMRZDOAMk7M4xFkC4iwJcZaCOEtDnGUgzrIQZzmIszzAGS5nBYizIsRZCeKsDHFWgTirQpzVIM7qEGcNgDNCzpoQZy2IszbEWQfirAtx1oM460OcDSDOhgBnUzkbQZyNIc4mEGcwxBkCcYZCnGEQZzjEGQFwNpOzKcTZDOJsDnG2gDhbQpytIM7WEGcbiLMtwNlcznYQZ3uIswPE2RHi7ARxdoY4u0CcXSHObgBnCzm7Q5w9IM6eEGcviLM3xNkH4uwLcfaDOPsDnC3lHABxDoQ4B0GcgyHOIRDnUIhzGMQ5HOIcAXC2knMkxDkK4hwNcY6BOMdCnOMgzvEQ5wSIcyLA2VrOSRDnZIhzCsQ5FeKcBnFOhzhnQJwzIc5ZAGcbOWdDnHMgzrkQ5zyIcz7EuQDiXAhxLoI4FwOcbeVcAnEuhTiXQZzLIc4VEOdKiHMVxLka4lwDcLaTcy3EuQ7iXA9xboA4N0KcmyDOzRDnFohzK8DZXs5tEOd2iHMHxLkT4twFce6GOPdAnHshzn0AZwc590OcByDOgxDnIYjzMMR5BOI8CnEegziPA5wd5TwBcZ6EOE9BnKchzjMQ51mI8xzEeR7ivABwdpLzIsR5CeK8DHFegTivQpzXIM7rEOcNiPMmwNlZzlsQ522I8w7EeRfivAdx3oc4H0CcDyHORwBnFzkfQ5xPIM6nEOcziPM5xPkC4nwJcb6COF8DnF3lfANxvoU430Gc7yHODxDnR4jzE8T5GeL8AnB2k/MrxPkN4vwOcf6AOH9CnL8gzt8Q5x+I8y/A2V1OV0aGMxLEGRnijAJxRoU43SDOaBBndIgzBsDZQ86YEGcsiDM2xBkH4owLccaDOONDnAkgzoQAZ085E0Gc7hBnYogzCcSZFOJMBnEmhzhTQJwpAc5ecqaCOFNDnGkgzrQQZzqIMz3EmQHizAhxZgI4e8uZGeLMAnFmhTizQZzZIc4cEGdOiDMXxJkb4OwjpwfEmQfizAtxekKcXhCnN8TpA3H6Qpx+AGdfOf0hzgCIMxDiDII480Gc+SHOAhBnQYizEMDZT87CEGcRiLMoxFkM4iwOcZaAOEtCnKUgztIAZ385y0CcZSHOchBneYizAsRZEeKsBHFWhjirAJwD5KwKcVaDOKtDnDUgzpoQZy2IszbEWQfirAtwDpSzHsRZH+JsAHE2hDgbQZyNIc4mEGcwxBkCcA6SMxTiDIM4wyHOCIizKcTZDOJsDnG2gDhbApyD5WwFcbaGONtAnG0hznYQZ3uIswPE2RHi7ARwDpGzM8TZBeLsCnF2gzi7Q5w9IM6eEGcviLM3wDlUzj4QZ1+Isx/E2R/iHABxDoQ4B0GcgyHOIQDnMDmHQpzDIM7hEOcIiHMkxDkK4hwNcY6BOMcCnMPlHAdxjoc4J0CcEyHOSRDnZIhzCsQ5FeKcBnCOkHM6xDkD4pwJcc6COGdDnHMgzrkQ5zyIcz7AOVLOBRDnQohzEcS5GOJcAnEuhTiXQZzLIc4VAOcoOVdCnKsgztUQ5xqIcy3EuQ7iXA9xboA4NwKco+XcBHFuhji3QJxbIc5tEOd2iHMHxLkT4twFcI6RczfEuQfi3Atx7oM490OcByDOgxDnIYjzMMA5Vs4jEOdRiPMYxHkc4jwBcZ6EOE9BnKchzjMA5zg5z0Kc5yDO8xDnBYjzIsR5CeK8DHFegTivApzj5bwGcV6HOG9AnDchzlsQ522I8w7EeRfivAdwTpDzPsT5AOJ8CHE+gjgfQ5xPIM6nEOcziPM5wDlRzhcQ50uI8xXE+RrifANxvoU430Gc7yHODwDnJDk/QpyfIM7PEOcXiPMrxPkN4vwOcf6AOH8CnJPl/AVx/oY4/0CcfyFOVyaGMxLEGRnijAJxRgU4p8jpBnFGgzijQ5wxIM6YEGcsiDM2xBkH4owLcE6VMx7EGR/iTABxJoQ4E0Gc7hBnYogzCcSZFOCcJmcyiDM5xJkC4kwJcaaCOFNDnGkgzrQQZzqAc7qc6SHODBBnRogzE8SZGeLMAnFmhTizQZzZAc4ZcuaAOHNCnLkgztwQpwfEmQfizAtxekKcXgDnTDm9IU4fiNMX4vSDOP0hzgCIMxDiDII48wGcs+TMD3EWgDgLQpyFIM7CEGcRiLMoxFkM4iwOcM6WswTEWRLiLAVxloY4y0CcZSHOchBneYizAsA5R86KEGcliLMyxFkF4qwKcVaDOKtDnDUgzpoA51w5a0GctSHOOhBnXYizHsRZH+JsAHE2hDgbAZzz5GwMcTaBOIMhzhCIMxTiDIM4wyHOCIizKcA5X85mEGdziLMFxNkS4mwFcbaGONtAnG0hznYA5wI520OcHSDOjhBnJ4izM8TZBeLsCnF2gzi7A5wL5ewBcfaEOHtBnL0hzj4QZ1+Isx/E2R/iHABwLpJzIMQ5COIcDHEOgTiHQpzDIM7hEOcIiHMkwLlYzlEQ52iIcwzEORbiHAdxjoc4J0CcEyHOSQDnEjknQ5xTIM6pEOc0iHM6xDkD4pwJcc6COGcDnEvlnANxzoU450Gc8yHOBRDnQohzEcS5GOJcAnAuk3MpxLkM4lwOca6AOFdCnKsgztUQ5xqIcy3AuVzOdRDneohzA8S5EeLcBHFuhji3QJxbIc5tAOcKObdDnDsgzp0Q5y6IczfEuQfi3Atx7oM49wOcK+U8AHEehDgPQZyHIc4jEOdRiPMYxHkc4jwBcK6S8yTEeQriPA1xnoE4z0Kc5yDO8xDnBYjzIsC5Ws5LEOdliPMKxHkV4rwGcV6HOG9AnDchzlsA5xo5b0OcdyDOuxDnPYjzPsT5AOJ8CHE+gjgfA5xr5XwCcT6FOJ9BnM8hzhcQ50uI8xXE+RrifANwrpPzLcT5DuJ8D3F+gDg/QpyfIM7PEOcXiPMrwLlezm8Q53eI8wfE+RPi/AVx/oY4/0CcfyFOV+b/fOcGOSNBnJEhzigQZ1SI0w3ijAZxRoc4Y0CcMQHOjXLGgjhjQ5xxIM64EGc8iDM+xJkA4kwIcSYCODfJ6Q5xJoY4k0CcSSHOZBBncogzBcSZEuJMBXBuljM1xJkG4kwLcaaDONNDnBkgzowQZyaIMzPAuUXOLBBnVogzG8SZHeLMAXHmhDhzQZy5IU4PgHOrnHkgzrwQpyfE6QVxekOcPhCnL8TpB3H6A5zb5AyAOAMhziCIMx/EmR/iLABxFoQ4C0GchQHO7XIWgTiLQpzFIM7iEGcJiLMkxFkK4iwNcZYBOHfIWRbiLAdxloc4K0CcFSHOShBnZYizCsRZFeDcKWc1iLM6xFkD4qwJcdaCOGtDnHUgzroQZz2Ac5ec9SHOBhBnQ4izEcTZGOJsAnEGQ5whEGcowLlbzjCIMxzijIA4m0KczSDO5hBnC4izJcTZCuDcI2driLMNxNkW4mwHcbaHODtAnB0hzk4QZ2eAc6+cXSDOrhBnN4izO8TZA+LsCXH2gjh7Q5x9AM59cvaFOPtBnP0hzgEQ50CIcxDEORjiHAJxDgU498s5DOIcDnGOgDhHQpyjIM7REOcYiHMsxDkO4Dwg53iIcwLEORHinARxToY4p0CcUyHOaRDndIDzoJwzIM6ZEOcsiHM2xDkH4pwLcc6DOOdDnAsAzkNyLoQ4F0GciyHOJRDnUohzGcS5HOJcAXGuBDgPy7kK4lwNca6BONdCnOsgzvUQ5waIcyPEuQngPCLnZohzC8S5FeLcBnFuhzh3QJw7Ic5dEOdugPOonHsgzr0Q5z6Icz/EeQDiPAhxHoI4D0OcRwDOY3IehTiPQZzHIc4TEOdJiPMUxHka4jwDcZ4FOI/LeQ7iPA9xXoA4L0KclyDOyxDnFYjzKsR5DeA8Ied1iPMGxHkT4rwFcd6GOO9AnHchznsQ532A86ScDyDOhxDnI4jzMcT5BOJ8CnE+gzifQ5wvAM5Tcr6EOF9BnK8hzjcQ51uI8x3E+R7i/ABxfgQ4T8v5CeL8DHF+gTi/QpzfIM7vEOcPiPMnxPkL4Dwj52+I8w/E+RfidGVhOCNBnJEhzigQZ1SI0w3gPCtnNIgzOsQZA+KMCXHGgjhjQ5xxIM64EGc8gPOcnPEhzgQQZ0KIMxHE6Q5xJoY4k0CcSSHOZADneTmTQ5wpIM6UEGcqiDM1xJkG4kwLcaaDONMDnBfkzABxZoQ4M0GcmSHOLBBnVogzG8SZHeLMAXBelDMnxJkL4swNcXpAnHkgzrwQpyfE6QVxegOcl+T0gTh9IU4/iNMf4gyAOAMhziCIMx/EmR/gvCxnAYizIMRZCOIsDHEWgTiLQpzFIM7iEGcJgPOKnCUhzlIQZ2mIswzEWRbiLAdxloc4K0CcFQHOq3JWgjgrQ5xVIM6qEGc1iLM6xFkD4qwJcdYCOK/JWRvirANx1oU460Gc9SHOBhBnQ4izEcTZGOC8LmcTiDMY4gyBOEMhzjCIMxzijIA4m0KczQDOG3I2hzhbQJwtIc5WEGdriLMNxNkW4mwHcbYHOG/K2QHi7AhxdoI4O0OcXSDOrhBnN4izO8TZA+C8JWdPiLMXxNkb4uwDcfaFOPtBnP0hzgEQ50CA87acgyDOwRDnEIhzKMQ5DOIcDnGOgDhHQpyjAM47co6GOMdAnGMhznEQ53iIcwLEORHinARxTgY478o5BeKcCnFOgzinQ5wzIM6ZEOcsiHM2xDkH4Lwn51yIcx7EOR/iXABxLoQ4F0GciyHOJRDnUoDzvpzLIM7lEOcKiHMlxLkK4lwNca6BONdCnOsAzgdyroc4N0CcGyHOTRDnZohzC8S5FeLcBnFuBzgfyrkD4twJce6COHdDnHsgzr0Q5z6Icz/EeQDgfCTnQYjzEMR5GOI8AnEehTiPQZzHIc4TEOdJgPOxnKcgztMQ5xmI8yzEeQ7iPA9xXoA4L0KclwDOJ3JehjivQJxXIc5rEOd1iPMGxHkT4rwFcd4GOJ/KeQfivAtx3oM470OcDyDOhxDnI4jzMcT5BOB8JudTiPMZxPkc4nwBcb6EOF9BnK8hzjcQ51uA87mc7yDO9xDnB4jzI8T5CeL8DHF+gTi/QpzfAM4Xcn6HOH9AnD8hzl8Q52+I8w/E+RfidGVlOCMBnC/ljAxxRoE4o0KcbhBnNIgzOsQZA+KMCXHGAjhfyRkb4owDccaFOONBnPEhzgQQZ0KIMxHE6Q5wvpYzMcSZBOJMCnEmgziTQ5wpIM6UEGcqiDM1wPlGzjQQZ1qIMx3EmR7izABxZoQ4M0GcmSHOLADnWzmzQpzZIM7sEGcOiDMnxJkL4swNcXpAnHkAzndy5oU4PSFOL4jTG+L0gTh9IU4/iNMf4gwAON/LGQhxBkGc+SDO/BBnAYizIMRZCOIsDHEWATg/yFkU4iwGcRaHOEtAnCUhzlIQZ2mIswzEWRbg/ChnOYizPMRZAeKsCHFWgjgrQ5xVIM6qEGc1gPOTnNUhzhoQZ02IsxbEWRvirANx1oU460Gc9QHOz3I2gDgbQpyNIM7GEGcTiDMY4gyBOEMhzjCA84uc4RBnBMTZFOJsBnE2hzhbQJwtIc5WEGdrgPOrnG0gzrYQZzuIsz3E2QHi7AhxdoI4O0OcXQDOb3J2hTi7QZzdIc4eEGdPiLMXxNkb4uwDcfYFOL/L2Q/i7A9xDoA4B0KcgyDOwRDnEIhzKMQ5DOD8IedwiHMExDkS4hwFcY6GOMdAnGMhznEQ53iA86ecEyDOiRDnJIhzMsQ5BeKcCnFOgzinQ5wzAM5fcs6EOGdBnLMhzjkQ51yIcx7EOR/iXABxLgQ4f8u5COJcDHEugTiXQpzLIM7lEOcKiHMlxLkK4Pwj52qIcw3EuRbiXAdxroc4N0CcGyHOTRDnZoDzr5xbIM6tEOc2iHM7xLkD4twJce6COHdDnHsATpe3y7UX4twHce6HOA9AnAchzkMQ52GI8wjEeRTgjCTnMYjzOMR5AuI8CXGegjhPQ5xnIM6zEOc5gDOynOchzgsQ50WI8xLEeRnivAJxXoU4r0Gc1wHOKHLegDhvQpy3IM7bEOcdiPMuxHkP4rwPcT4AOKPK+RDifARxPoY4n0CcTyHOZxDnc4jzBcT5EuB0k/MVxPka4nwDcb6FON9BnO8hzg8Q50eI8xPAGU3OzxDnF4jzK8T5DeL8DnH+gDh/Qpy/IM7fAGd0Of9AnH8hTlc2hjMSxBkZ4owCcUaFON0gzmgAZww5o0OcMSDOmBBnLIgzNsQZB+KMC3HGgzjjA5wx5UwAcSaEOBNBnO4QZ2KIMwnEmRTiTAZxJgc4Y8mZAuJMCXGmgjhTQ5xpIM60EGc6iDM9xJkB4IwtZ0aIMxPEmRnizAJxZoU4s0Gc2SHOHBBnToAzjpy5IM7cEKcHxJkH4swLcXpCnF4QpzfE6QNwxpXTF+L0gzj9Ic4AiDMQ4gyCOPNBnPkhzgIAZzw5C0KchSDOwhBnEYizKMRZDOIsDnGWgDhLApzx5SwFcZaGOMtAnGUhznIQZ3mIswLEWRHirARwJpCzMsRZBeKsCnFWgzirQ5w1IM6aEGctiLM2wJlQzjoQZ12Isx7EWR/ibABxNoQ4G0GcjSHOJgBnIjmDIc4QiDMU4gyDOMMhzgiIsynE2QzibA5wusvZAuJsCXG2gjhbQ5xtIM62EGc7iLM9xNkB4EwsZ0eIsxPE2Rni7AJxdoU4u0Gc3SHOHhBnT4AziZy9IM7eEGcfiLMvxNkP4uwPcQ6AOAdCnIMAzqRyDoY4h0CcQyHOYRDncIhzBMQ5EuIcBXGOBjiTyTkG4hwLcY6DOMdDnBMgzokQ5ySIczLEOQXgTC7nVIhzGsQ5HeKcAXHOhDhnQZyzIc45EOdcgDOFnPMgzvkQ5wKIcyHEuQjiXAxxLoE4l0KcywDOlHIuhzhXQJwrIc5VEOdqiHMNxLkW4lwHca4HOFPJuQHi3AhxboI4N0OcWyDOrRDnNohzO8S5A+BMLedOiHMXxLkb4twDce6FOPdBnPshzgMQ50GAM42chyDOwxDnEYjzKMR5DOI8DnGegDhPQpynAM60cp6GOM9AnGchznMQ53mI8wLEeRHivARxXgY408l5BeK8CnFegzivQ5w3IM6bEOctiPM2xHkH4Ewv512I8x7EeR/ifABxPoQ4H0GcjyHOJxDnU4Azg5zPIM7nEOcLiPMlxPkK4nwNcb6BON9CnO8Azoxyvoc4P0CcHyHOTxDnZ4jzC8T5FeL8BnF+BzgzyfkD4vwJcf6COH9DnH8gzr8Qpys7wxkJ4owMcGaWMwrEGRXidIM4o0Gc0SHOGBBnTIgzFsQZG+DMImcciDMuxBkP4owPcSaAOBNCnIkgTneIMzHAmVXOJBBnUogzGcSZHOJMAXGmhDhTQZypIc40AGc2OdNCnOkgzvQQZwaIMyPEmQnizAxxZoE4swKc2eXMBnFmhzhzQJw5Ic5cEGduiNMD4swDceYFOHPI6QlxekGc3hCnD8TpC3H6QZz+EGcAxBkIcOaUMwjizAdx5oc4C0CcBSHOQhBnYYizCMRZFODMJWcxiLM4xFkC4iwJcZaCOEtDnGUgzrIQZzmAM7ec5SHOChBnRYizEsRZGeKsAnFWhTirQZzVAU4POWtAnDUhzloQZ22Isw7EWRfirAdx1oc4GwCceeRsCHE2gjgbQ5xNIM5giDME4gyFOMMgznCAM6+cERBnU4izGcTZHOJsAXG2hDhbQZytIc42AKennG0hznYQZ3uIswPE2RHi7ARxdoY4u0CcXQFOLzm7QZzdIc4eEGdPiLMXxNkb4uwDcfaFOPsBnN5y9oc4B0CcAyHOQRDnYIhzCMQ5FOIcBnEOBzh95BwBcY6EOEdBnKMhzjEQ51iIcxzEOR7inABw+so5EeKcBHFOhjinQJxTIc5pEOd0iHMGxDkT4PSTcxbEORvinANxzoU450Gc8yHOBRDnQohzEcDpL+diiHMJxLkU4lwGcS6HOFdAnCshzlUQ52qAM0DONRDnWohzHcS5HuLcAHFuhDg3QZybIc4tAGegnFshzm0Q53aIcwfEuRPi3AVx7oY490CcewHOIDn3QZz7Ic4DEOdBiPMQxHkY4jwCcR6FOI8BnPnkPA5xnoA4T0KcpyDO0xDnGYjzLMR5DuI8D3Dml/MCxHkR4rwEcV6GOK9AnFchzmsQ53WI8wbAWUDOmxDnLYjzNsR5B+K8C3HegzjvQ5wPIM6HAGdBOR9BnI8hzicQ51OI8xnE+RzifAFxvoQ4XwGcheR8DXG+gTjfQpzvIM73EOcHiPMjxPkJ4vwMcBaW8wvE+RXi/AZxfoc4f0CcPyHOXxDnb4jzD8BZRM6/EKcrB8MZCeKMDHFGgTijQpxuEGc0iDM6wFlUzhgQZ0yIMxbEGRvijANxxoU440Gc8SHOBABnMTkTQpyJIE53iDMxxJkE4kwKcSaDOJNDnCkAzuJypoQ4U0GcqSHONBBnWogzHcSZHuLMAHFmBDhLyJkJ4swMcWaBOLNCnNkgzuwQZw6IMyfEmQvgLClnbojTA+LMA3HmhTg9IU4viNMb4vSBOH0BzlJy+kGc/hBnAMQZCHEGQZz5IM78EGcBiLMgwFlazkIQZ2GIswjEWRTiLAZxFoc4S0CcJSHOUgBnGTlLQ5xlIM6yEGc5iLM8xFkB4qwIcVaCOCsDnGXlrAJxVoU4q0Gc1SHOGhBnTYizFsRZG+KsA3CWk7MuxFkP4qwPcTaAOBtCnI0gzsYQZxOIMxjgLC9nCMQZCnGGQZzhEGcExNkU4mwGcTaHOFsAnBXkbAlxtoI4W0OcbSDOthBnO4izPcTZAeLsCHBWlLMTxNkZ4uwCcXaFOLtBnN0hzh4QZ0+IsxfAWUnO3hBnH4izL8TZD+LsD3EOgDgHQpyDIM7BAGdlOYdAnEMhzmEQ53CIcwTEORLiHAVxjoY4xwCcVeQcC3GOgzjHQ5wTIM6JEOckiHMyxDkF4pwKcFaVcxrEOR3inAFxzoQ4Z0GcsyHOORDnXIhzHsBZTc75EOcCiHMhxLkI4lwMcS6BOJdCnMsgzuUAZ3U5V0CcKyHOVRDnaohzDcS5FuJcB3Guhzg3AJw15NwIcW6CODdDnFsgzq0Q5zaIczvEuQPi3Alw1pRzF8S5G+LcA3HuhTj3QZz7Ic4DEOdBiPMQwFlLzsMQ5xGI8yjEeQziPA5xnoA4T0KcpyDO0wBnbTnPQJxnIc5zEOd5iPMCxHkR4rwEcV6GOK8AnHXkvApxXoM4r0OcNyDOmxDnLYjzNsR5B+K8C3DWlfMexHkf4nwAcT6EOB9BnI8hzicQ51OI8xnAWU/O5xDnC4jzJcT5CuJ8DXG+gTjfQpzvIM73AGd9OT9AnB8hzk8Q52eI8wvE+RXi/AZxfoc4fwCcDeT8CXH+gjh/Q5x/IM6/EKcrJ8MZCeKMDHFGATgbyhkV4nSDOKNBnNEhzhgQZ0yIMxbEGRvijANwNpIzLsQZD+KMD3EmgDgTQpyJIE53iDMxxJkE4GwsZ1KIMxnEmRziTAFxpoQ4U0GcqSHONBBnWoCziZzpIM70EGcGiDMjxJkJ4swMcWaBOLNCnNkAzmA5s0OcOSDOnBBnLogzN8TpAXHmgTjzQpyeAGeInF4QpzfE6QNx+kKcfhCnP8QZAHEGQpxBAGeonPkgzvwQZwGIsyDEWQjiLAxxFoE4i0KcxQDOMDmLQ5wlIM6SEGcpiLM0xFkG4iwLcZaDOMsDnOFyVoA4K0KclSDOyhBnFYizKsRZDeKsDnHWADgj5KwJcdaCOGtDnHUgzroQZz2Isz7E2QDibAhwNpWzEcTZGOJsAnEGQ5whEGcoxBkGcYZDnBEAZzM5m0KczSDO5hBnC4izJcTZCuJsDXG2gTjbApzN5WwHcbaHODtAnB0hzk4QZ2eIswvE2RXi7AZwtpCzO8TZA+LsCXH2gjh7Q5x9IM6+EGc/iLM/wNlSzgEQ50CIcxDEORjiHAJxDoU4h0GcwyHOEQBnKzlHQpyjIM7REOcYiHMsxDkO4hwPcU6AOCcCnK3lnARxToY4p0CcUyHOaRDndIhzBsQ5E+KcBXC2kXM2xDkH4pwLcc6DOOdDnAsgzoUQ5yKIczHA2VbOJRDnUohzGcS5HOJcAXGuhDhXQZyrIc41AGc7OddCnOsgzvUQ5waIcyPEuQni3AxxboE4twKc7eXcBnFuhzh3QJw7Ic5dEOduiHMPxLkX4twHcHaQcz/EeQDiPAhxHoI4D0OcRyDOoxDnMYjzOMDZUc4TEOdJiPMUxHka4jwDcZ6FOM9BnOchzgsAZyc5L0KclyDOyxDnFYjzKsR5DeK8DnHegDhvApyd5bwFcd6GOO9AnHchznsQ532I8wHE+RDifARwdpHzMcT5BOJ8CnE+gzifQ5wvIM6XEOcriPM1wNlVzjcQ51uI8x3E+R7i/ABxfoQ4P0GcnyHOLwBnNzm/QpzfIM7vEOcPiPMnxPkL4vwNcf6BOP8CnN3ldOViOCNBnJEhzigQZ1SI0w3ijAZxRoc4YwCcPeSMCXHGgjhjQ5xxIM64EGc8iDM+xJkA4kwIcPaUMxHE6Q5xJoY4k0CcSSHOZBBncogzBcSZEuDsJWcqiDM1xJkG4kwLcaaDONNDnBkgzowQZyaAs7ecmSHOLBBnVogzG8SZHeLMAXHmhDhzQZy5Ac4+cnpAnHkgzrwQpyfE6QVxekOcPhCnL8TpB3D2ldMf4gyAOAMhziCIMx/EmR/iLABxFoQ4CwGc/eQsDHEWgTiLQpzFIM7iEGcJiLMkxFkK4iwNcPaXswzEWRbiLAdxloc4K0CcFSHOShBnZYizCsA5QM6qEGc1iLM6xFkD4qwJcdaCOGtDnHUgzroA50A560Gc9SHOBhBnQ4izEcTZGOJsAnEGQ5whAOcgOUMhzjCIMxzijIA4m0KczSDO5hBnC4izJcA5WM5WEGdriLMNxNkW4mwHcbaHODtAnB0hzk4A5xA5O0OcXSDOrhBnN4izO8TZA+LsCXH2gjh7A5xD5ewDcfaFOPtBnP0hzgEQ50CIcxDEORjiHAJwDpNzKMQ5DOIcDnGOgDhHQpyjIM7REOcYiHMswDlcznEQ53iIcwLEORHinARxToY4p0CcUyHOaQDnCDmnQ5wzIM6ZEOcsiHM2xDkH4pwLcc6DOOcDnCPlXABxLoQ4F0GciyHOJRDnUohzGcS5HOJcAXCOknMlxLkK4lwNca6BONdCnOsgzvUQ5waIcyPAOVrOTRDnZohzC8S5FeLcBnFuhzh3QJw7Ic5dAOcYOXdDnHsgzr0Q5z6Icz/EeQDiPAhxHoI4DwOcY+U8AnEehTiPQZzHIc4TEOdJiPMUxHka4jwDcI6T8yzEeQ7iPA9xXoA4L0KclyDOyxDnFYjzKsA5Xs5rEOd1iPMGxHkT4rwFcd6GOO9AnHchznsA5wQ570OcDyDOhxDnI4jzMcT5BOJ8CnE+gzifA5wT5XwBcb6EOF9BnK8hzjcQ51uI8x3E+R7i/ABwTpLzI8T5CeL8DHF+gTi/QpzfIM7vEOcPiPMnwDlZzl8Q52+I8w/E+RfidOVmOCNBnJEhzigQZ1SAc4qcbhBnNIgzOsQZA+KMCXHGgjhjQ5xxIM64AOdUOeNBnPEhzgQQZ0KIMxHE6Q5xJoY4k0CcSQHOaXImgziTQ5wpIM6UEGcqiDM1xJkG4kwLcaYDOKfLmR7izABxZoQ4M0GcmSHOLBBnVogzG8SZHeCcIWcOiDMnxJkL4swNcXpAnHkgzrwQpyfE6QVwzpTTG+L0gTh9IU4/iNMf4gyAOAMhziCIMx/AOUvO/BBnAYizIMRZCOIsDHEWgTiLQpzFIM7iAOdsOUtAnCUhzlIQZ2mIswzEWRbiLAdxloc4KwCcc+SsCHFWgjgrQ5xVIM6qEGc1iLM6xFkD4qwJcM6VsxbEWRvirANx1oU460Gc9SHOBhBnQ4izEcA5T87GEGcTiDMY4gyBOEMhzjCIMxzijIA4mwKc8+VsBnE2hzhbQJwtIc5WEGdriLMNxNkW4mwHcC6Qsz3E2QHi7AhxdoI4O0OcXSDOrhBnN4izO8C5UM4eEGdPiLMXxNkb4uwDcfaFOPtBnP0hzgEA5yI5B0KcgyDOwRDnEIhzKMQ5DOIcDnGOgDhHApyL5RwFcY6GOMdAnGMhznEQ53iIcwLEORHinARwLpFzMsQ5BeKcCnFOgzinQ5wzIM6ZEOcsiHM2wLlUzjkQ51yIcx7EOR/iXABxLoQ4F0GciyHOJQDnMjmXQpzLIM7lEOcKiHMlxLkK4lwNca6BONcCnMvlXAdxroc4N0CcGyHOTRDnZohzC8S5FeLcBnCukHM7xLkD4twJce6COHdDnHsgzr0Q5z6Icz/AuVLOAxDnQYjzEMR5GOI8AnEehTiPQZzHIc4TAOcqOU9CnKcgztMQ5xmI8yzEeQ7iPA9xXoA4LwKcq+W8BHFehjivQJxXIc5rEOd1iPMGxHkT4rwFcK6R8zbEeQfivAtx3oM470OcDyDOhxDnI4jzMcC5Vs4nEOdTiPMZxPkc4nwBcb6EOF9BnK8hzjcA5zo530Kc7yDO9xDnB4jzI8T5CeL8DHF+gTi/Apzr5fwGcX6HOH9AnD8hzl8Q52+I8w/E+RfidHn85zs3yBkJ4owMcUaBOKNCnG4QZzSIMzrEGQPijAlwbpQzFsQZG+KMA3HGhTjjQZzxIc4EEGdCiDMRwLlJTneIMzHEmQTiTApxJoM4k0OcKSDOlBBnKoBzs5ypIc40EGdaiDMdxJke4swAcWaEODNBnJkBzi1yZoE4s0Kc2SDO7BBnDogzJ8SZC+LMDXF6AJxb5cwDceaFOD0hTi+I0xvi9IE4fSFOP4jTH+DcJmcAxBkIcQZBnPkgzvwQZwGIsyDEWQjiLAxwbpezCMRZFOIsBnEWhzhLQJwlIc5SEGdpiLMMwLlDzrIQZzmIszzEWQHirAhxVoI4K0OcVSDOqgDnTjmrQZzVIc4aEGdNiLMWxFkb4qwDcdaFOOsBnLvkrA9xNoA4G0KcjSDOxhBnE4gzGOIMgThDAc7dcoZBnOEQZwTE2RTibAZxNoc4W0CcLSHOVgDnHjlbQ5xtIM62EGc7iLM9xNkB4uwIcXaCODsDnHvl7AJxdoU4u0Gc3SHOHhBnT4izF8TZG+LsA3Duk7MvxNkP4uwPcQ6AOAdCnIMgzsEQ5xCIcyjAuV/OYRDncIhzBMQ5EuIcBXGOhjjHQJxjIc5xAOcBOcdDnBMgzokQ5ySIczLEOQXinApxToM4pwOcB+WcAXHOhDhnQZyzIc45EOdciHMexDkf4lwAcB6ScyHEuQjiXAxxLoE4l0KcyyDO5RDnCohzJcB5WM5VEOdqiHMNxLkW4lwHca6HODdAnBshzk0A5xE5N0OcWyDOrRDnNohzO8S5A+LcCXHugjh3///g/L961t4yIf/5xrIAYzmAsTzAWAFgrAgwVgIYKwOMVUJsf9bEcnP941i/D07X6Tpdp+t0na7TdbpO1+k6Xafr+W+O03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7nvzlO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1up7/5jhdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6Ttfpev6b43SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6Tvf/3Thdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6Ttfpev6b43SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6Xafr+W+O03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7nvzlO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1up7/5jhdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6Ttfpev6b43SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6Xafr+W+O03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7TdbpO1+k6XafrdJ2u03W6TtfpOl2n63SdrtN1uk7X6Tpdp+t0na7nvzlO1+k6XXzXK8q/OpG0Mf/156ohLlc1bXVtDW1NbS1tbW0dbd2Q/+fr6+l5fW0DbUNtI21jbRNtsDbkX69P9K/Xh+p5mDZcG6Ftqm2mba5toW2pbaVtrW2jbattp22v7aDtqO0U8i90lH89/he623+7VfuHW/V/uNX4h1vNf7jV+odb7X+41fmH23+9aRX/2y30X2/M/34L+4db+D/cIv7h1vQfbs3+4db8H24t/uHW8h9urf7h1vofbm3+4db2H27t/uHW/h9uHf51+6+J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XqLXGK+36LXB6yN6XfH6il4/vH6iNxyvv+hNwBsgejPxBoreIrxBorcab7DobcEbInp78YaK3jG8YaJ3Hm+46N3AGyF6D/FGit4rvFGi9xlvtOiFTxwEY0QvBt5Y0UuIN070UuGNF73MeBNELw/eRNH7Fm+S6P2MN1n0fsObInqV8aaK3r9400SvPt500WuBN0P0OuLNFL1eeLNEbzDebNEbgzdH9KbizRW9eXjzRG853nzR24C3QPR24i0UvUN4i0TvNN5i0buCt0T07uItFb1neMtE7z3ectELnSQIVoheFLyVohcXb5XoJcNbLXrp8daIXg68taJXAG+d6P2It170SuBtEL3yeBtF72+8TaJXG2+z6DXB2yJ6bfG2il43vG2i1x9vu+iNwNshehPxdoreLLxdorcYb7forcHbI3pb8faK3j68faJ3HG+/6F3AOyB6N/EOit4jvEOi9xrvsOh9wTsiehGSBsFR0YuJd0z0EuEdF73UeCdELwveSdHLi3dK9L7DOy16v+CdEb3f8c6K3h9450SvOt550WuAd0H0WuJdFL1OeJdErzfeZdEbgndF9MbiXRW9aXjXRG8+3nXRW4F3Q/Q24t0UvV14t0TvMN5t0TuDd0f0ruLdFb17ePdE7znefdH7gPdA9MIkC4KHohcV75HoxcN7LHrJ8Z6IXga8p6KXE++Z6BXEey56RfBeiF5JvJeiVwHvlehVxXstenXw3oheU7y3otcO753odcd7L3oD8D6I3ki8j6I3Ce+T6M3G+yx6S/C+iN5avK+ity3ZfxDP248XSvRO4IUWvYt4YUTvFl5Y0XuMF0703uCFF72veBFEL2LyIIgoerHwIoleYrzIopcGL4roZcWLKnoheNFErzBedNErhhdD9MrgxRS9KnixRK8GXmzRa4gXR/Ra4cUVvc548USvD1580RuKl0D0xuElFL3peIlEbwFeYtFbiZdE9DbhJRW93XjJRO8IXnLRO4uXQvSu4aUUvft4qUTvBV5q0fuIl0b0wqYIgrSiFw0vnejFx0sveinwMoheRryMopcLL5PoFcLLLHpF8bKIXim8rKJXES+b6FXDyy56dfFyiF4zvJyi1x4vl+j1wMstegPx8ojeKLy8ojcZL0T05uDlE72lePlFbx1eAdHbjldQ9A7gFRK9k3jfiN4lvG9F7zbed6L3BK+w6L3F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","debug_symbols":"","file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"56":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/slice.nr"},"61":{"source":"use bignum::params::BigNumParams;\nuse cheon_stehle::encrypt;\nuse std::hash::pedersen_hash as hash;\n\nglobal Size: u32 = 16;\nglobal Side: u32 = 4;\nglobal Limbs: u32 = 9;\nglobal Bits: u32 = 1031;\nglobal Tau: u32 = 1289;\n\nfn tile_has_trap(tile: Field) -> bool {\n    tile == 0\n}\nfn tile_has_agent(tile: Field) -> bool {\n    (tile != 0) & (tile != 1)\n}\n\n#[oracle(oracle_board)]\nunconstrained fn oracle_board(board: [Field; Size]) -> () {}\nunconstrained fn output_board(board: [Field; Size]) -> () {\n    oracle_board(board);\n}\n#[oracle(oracle_detect)]\nunconstrained fn oracle_detect(detect: u32) -> () {}\nunconstrained fn output_detect(detect: u32) -> () {\n    oracle_detect(detect);\n}\n\nfn main(\n    mut board_used: [Field; Size],\n    old_board_salt: Field,\n    new_board_salt: Field,\n    params: pub BigNumParams<Limbs, Bits>,\n    key_set: pub [[Field; Limbs]; Tau + 1],\n    entropy: [bool; Tau],\n    veils_used: [bool; Size],\n    veils_salt: [Field; Size],\n    responses: [bool; 2 * Size],\n) -> pub (Field, Field, [Field; Size], [Field; Limbs]) {\n    let old_board_digest = hash([old_board_salt, hash(board_used)]);\n\n    let mut tiles_used = [false; Size];\n    for i in 0..Size {\n        tiles_used[i] = tile_has_agent(board_used[i]) | tile_has_trap(board_used[i]);\n        if (i > 0) {\n            tiles_used[i] |= tile_has_agent(board_used[i - 1]);\n        }\n        if (i != Size - 1) {\n            tiles_used[i] |= (i % 4 != 3) & tile_has_agent(board_used[i + 1]);\n        }\n        if (i >= Side) {\n            tiles_used[i] |= tile_has_agent(board_used[i - Side]);\n        }\n        if (i < Size - Side) {\n            tiles_used[i] |= tile_has_agent(board_used[i + Side]);\n        }\n    }\n\n    let mut veil_digests_vec = Vec::new();\n    for position in 0..Size {\n        veil_digests_vec.push(veils_used[position] as Field + veils_salt[position]);\n    }\n    let veil_digests = veil_digests_vec.slice.as_array();\n\n    let mut got_hit = false;\n    for position in 0..Size {\n        if responses[position * 2 + tiles_used[position] as u32] != veils_used[position] {\n            got_hit = tile_has_agent(board_used[position]) | tile_has_trap(board_used[position]);\n            board_used[position] = 1; // Void tile\n            let _ = unsafe { output_detect(position) };\n        }\n    }\n\n    let encrypted_report = encrypt(params, key_set, entropy, got_hit).limbs;\n\n    let _ = unsafe { output_board(board_used) };\n    let new_board_digest = hash([new_board_salt, hash(board_used)]);\n\n    (old_board_digest, new_board_digest, veil_digests, encrypted_report)\n}\n","path":"/root/aztec-grant-pss/packages/noir/circuits/answers_updates/src/main.nr"},"95":{"source":"use crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_120: Field = 0x1000000000000000000000000000000;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> Field {\n    let TWO_POW_120 = 0x1000000000000000000000000000000;\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0]\n    } else if N == 2 {\n        validate_in_range::<N, MOD_BITS>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120 + limbs[2] * TWO_POW_120 * TWO_POW_120\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    field: Field,\n) -> [Field; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result = unsafe { __from_field::<N>(field) };\n\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        let TWO_POW_120 = 0x1000000000000000000000000000000;\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let field_val = if N < 2 {\n            result[0]\n        } else if N == 2 {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120\n        } else {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120 + result[2] * TWO_POW_120 * TWO_POW_120\n        };\n        assert(field_val == field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120;\n        r *= TWO_POW_120;\n        modulus_mod_n *= TWO_POW_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += params.modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [Field; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += borrow_flags[0] as Field * TWO_POW_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * TWO_POW_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    validate_in_range::<_, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb =\n            modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * TWO_POW_120);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * TWO_POW_120);\n            assert(result_limb == 0);\n        }\n        let result_limb =\n            modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb =\n            lhs[0] + rhs[0] - subtrahend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] + rhs[N - 1] - subtrahend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] - rhs[N - 1] + addend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/constrained_ops.nr"},"96":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/expressions.nr"},"99":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [Field; N] {\n    // cast the field to a u60 representation\n    let res_u60: U60Repr<N, 2> = U60Repr::from_field(field);\n    let result: [Field; N] = U60Repr::into(res_u60);\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = From::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 1;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = From::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let b_u60: U60Repr<N, 2> = From::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                let idx = (i - 1) / 2;\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quirky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target.shr1();\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/unconstrained_helpers.nr"},"100":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let numerator_msb = remainder_u60.get_msb();\n    let divisor_msb = divisor_u60.get_msb();\n    if divisor_msb > numerator_msb {\n        ([0; N], numerator)\n    } else {\n        let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n        let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n        divisor_u60 = divisor_u60.shl(bit_difference);\n        accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n        if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n            divisor_u60.shr1();\n            accumulator_u60.shr1();\n        }\n        for _ in 0..(N * 120) {\n            if (remainder_u60.gte(b) == false) {\n                break;\n            }\n\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (remainder_u60.gte(divisor_u60)) {\n                remainder_u60 -= divisor_u60;\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient_u60 = quotient_u60 + accumulator_u60;\n            }\n            divisor_u60.shr1(); // >>= 1;\n            accumulator_u60.shr1(); //  >>= 1;\n        }\n\n        (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n    }\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut temporaries: [[Field; N]; M] = std::mem::zeroed();\n    for i in 0..M {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..M {\n        let idx = M - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut temporaries: [[Field; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[Field; N]] = [];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result = result.push_front(T0);\n        } else {\n            result = result.push_front([0; N]);\n        };\n    }\n\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/unconstrained_ops.nr"},"103":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self;\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    fn modulus(self) -> Self;\n    fn modulus_bits() -> u32;\n    fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    fn get_limbs(self) -> [Field; N];\n    fn get_limb(self, idx: u32) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    fn __neg(self) -> Self;\n    // unconstrained\n    fn __add(self, other: Self) -> Self;\n    // unconstrained\n    fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    fn __div(self, other: Self) -> Self;\n    // unconstrained\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    fn __invmod(self) -> Self;\n    // unconstrained\n    fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    fn assert_is_not_equal(self, other: Self);\n    fn validate_in_field(self);\n    fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    fn udiv(numerator: Self, divisor: Self) -> Self;\n    fn umod(numerator: Self, divisor: Self) -> Self;\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn is_zero(self) -> bool;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/runtime_bignum.nr"},"109":{"source":"/// Multiple entires in the `MUL_DE_BRUIJN_BIT` list do not map to a valid output of `v * 0x6c04f118e9966f6b`.\n/// This is a dummy value to fill the gaps in the map.\nglobal n1: u32 = 0xffffffff;\n\nglobal MUL_DE_BRUIJN_BIT: [u32; 128] = [\n    0, // change to 1 if you want bitSize(0) = 1\n    48, n1, n1, 31, n1, 15, 51, n1, 63, 5, n1, n1, n1, 19, n1, 23, 28, n1, n1, n1, 40, 36, 46, n1,\n    13, n1, n1, n1, 34, n1, 58, n1, 60, 2, 43, 55, n1, n1, n1, 50, 62, 4, n1, 18, 27, n1, 39, 45,\n    n1, n1, 33, 57, n1, 1, 54, n1, 49, n1, 17, n1, n1, 32, n1, 53, n1, 16, n1, n1, 52, n1, n1, n1,\n    64, 6, 7, 8, n1, 9, n1, n1, n1, 20, 10, n1, n1, 24, n1, 29, n1, n1, 21, n1, 11, n1, n1, 41, n1,\n    25, 37, n1, 47, n1, 30, 14, n1, n1, n1, n1, 22, n1, n1, 35, 12, n1, n1, n1, 59, 42, n1, n1, 61,\n    3, 26, 38, 44, n1, 56,\n];\n\npub unconstrained fn get_msb64(x: u64) -> u32 {\n    let mut v = x;\n    v |= v >> 1;\n    v |= v >> 2;\n    v |= v >> 4;\n    v |= v >> 8;\n    v |= v >> 16;\n    v |= v >> 32;\n    MUL_DE_BRUIJN_BIT[(std::wrapping_mul(v, 0x6c04f118e9966f6b)) >> 57]\n}\n\n// 1100\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/utils/msb.nr"},"110":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\npub(crate) global TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n//fields to u60rep conversion\n// field elements are 254 bits\n// so there will be 5 limbs\npub(crate) unconstrained fn field_to_u60rep(mut x: Field) -> (u64, u64, u64, u64, u64) {\n    // get the first 60 bits by casting to u64 and then taking the lower 60 bits\n    // we use the fact that this casting drops everything above 64 bits\n    let x_first_u64 = (x as u64);\n    let first: u64 = x_first_u64 % TWO_POW_60;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_60 as Field);\n    let x_second_u64 = (x as u64);\n    let second = x_second_u64 % TWO_POW_60;\n    x = (x - (second as Field)) / (TWO_POW_60 as Field);\n    let x_third_u64 = (x as u64);\n    let third = x_third_u64 % TWO_POW_60;\n    x = (x - (third as Field)) / (TWO_POW_60 as Field);\n    let x_fourth_u64 = (x as u64);\n    let fourth = x_fourth_u64 % TWO_POW_60;\n    x = (x - (fourth as Field)) / (TWO_POW_60 as Field);\n    let x_fifth_u64 = (x as u64);\n    let fifth = x_fifth_u64 % TWO_POW_60;\n    (first, second, third, fourth, fifth)\n}\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\nunconstrained fn __split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\npub fn split_60_bits(x: Field) -> (u64, u64) {\n    // We assert that the two returned limbs fit within 60 bits each\n    // and reconstruct `x` when added together.\n    let (lo, hi) = unsafe { __split_60_bits(x) };\n    if !std::runtime::is_unconstrained() {\n        let lo_field = lo as Field;\n        let hi_field = hi as Field;\n        lo_field.assert_max_bit_size::<60>();\n        hi_field.assert_max_bit_size::<60>();\n        assert_eq(lo_field + (TWO_POW_60 as Field) * hi_field, x);\n    }\n\n    (lo, hi)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n\n        normalized[i] = lo;\n        next = input[i + 1] + hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/utils/split_bits.nr"},"111":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\nuse crate::utils::split_bits::{field_to_u60rep, TWO_POW_60};\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..N {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\n// impl<let N: u32, let NumSegments: u32> std::convert::From<Field> for U60Repr<N, NumSegments> {\n//     fn from(input: Field) -> Self {\n//        let (low, mid, high) =  unsafe { field_to_u60rep(input) } ;\n//         let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n//         let N_u60: u32 = N * NumSegments;\n//         assert(N_u60 >=1, \"N must be at least 1\");\n//         if N_u60 == 1 {\n//             assert((mid ==0) & (high == 0), \"input field is too large to fit in a single limb\");\n//             result.limbs[0] = low;\n//         }\n//         else if N_u60 == 2{\n//             assert(high == 0, \"input field is too large to fit in two limbs\");\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//         }else{\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//             result.limbs[2] = high;\n//         }\n//         result\n//     }\n// }\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn from_field(input: Field) -> Self {\n        let (first, second, third, fourth, fifth) = field_to_u60rep(input);\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        let N_u60: u32 = N * NumSegments;\n        assert(N_u60 >= 1, \"N must be at least 1\");\n        if N_u60 == 1 {\n            assert(\n                (second == 0) & (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in a single limb\",\n            );\n            result.limbs[0] = first;\n        } else if N_u60 == 2 {\n            assert(\n                (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in two limbs\",\n            );\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n        } else if N_u60 == 3 {\n            assert((fourth == 0) & (fifth == 0), \"input field is too large to fit in three limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n        } else if N_u60 == 4 {\n            assert((fifth == 0), \"input field is too large to fit in four limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n        } else {\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n            result.limbs[4] = fifth;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        for i in 0..(N * NumSegments / 2) {\n            result[i] =\n                x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * TWO_POW_60 as Field);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            let idx = (N * NumSegments) - 1 - i;\n            if (b.limbs[idx] == self.limbs[idx]) {\n                continue;\n            }\n\n            result = b.limbs[idx] < self.limbs[idx];\n            early_exit = true;\n            break;\n        }\n        if early_exit {\n            result\n        } else {\n            self.limbs[0] == b.limbs[0]\n        }\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift = (60 - limb_shift) as u8;\n        let mask: u64 = (((1 as u64) << limb_shift) - 1) << remainder_shift;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = value >> limb_shift;\n            let remainder: u64 = (value << remainder_shift) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let mut remainder = 0;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value & 1) << 59;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << limb_shift) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << limb_shift) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/utils/u60_representation.nr"},"113":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\npub fn encrypt<let Tau: u32, let Num: u32, let Bits: u32>(\n    params: BigNumParams<Num, Bits>,\n    key_set: [[Field; Num]; Tau + 1],\n    entropy: [bool; Tau],\n    message: bool,\n) -> RuntimeBigNum<Num, Bits> {\n    let mut terms = Vec::new();\n    for i in 0..Tau {\n        terms.push(\n            if entropy[i] {\n                RuntimeBigNum::from_array(params, key_set[i+1])\n            } else {\n                RuntimeBigNum::new(params)\n            }\n        );\n    }\n    let mut sum = unsafe { terms.slice.reduce(|sum, next| sum.__add(next)) };\n\n    let mut flags = [false; Tau + 1];\n    flags[Tau] = true;\n    terms.push(sum);\n\n    RuntimeBigNum::evaluate_quadratic_expression(\n        params,\n        [[]; 0],\n        [[]; 0],\n        [[]; 0],\n        [[]; 0],\n        terms.slice.as_array(),\n        flags,\n    );\n\n    if message {\n        let _1 = RuntimeBigNum::one(params);\n        let _2 = _1 + _1;\n        sum += RuntimeBigNum::from_array(params, key_set[1]).udiv(_2);\n    }\n    sum\n}\n\npub fn decrypt<let Limbs: u32, let Bits: u32>(\n    decryption_key: RuntimeBigNum<Limbs, Bits>,\n    ciphertext: RuntimeBigNum<Limbs, Bits>,\n) -> bool {\n    let _1 = RuntimeBigNum::one(ciphertext.params);\n    let _2 = _1 + _1;\n\n    let k = decryption_key;\n    let c = ciphertext;\n\n    // round_nearest(2*c/k)%2 == 1\n    (c.udiv(k) * _2 + (k.udiv(_2) + c.umod(k) * _2).udiv(k)).umod(_2) == _1\n}\n\n#[test]\nfn test_encrypt_decrypt() {\n    let dec_key_limbs = [1, 4, 2, 8, 5, 7, 0, 0, 0];\n    let dec_key = RuntimeBigNum::from_array(MC1031_params, dec_key_limbs);\n    let enc_key = [dec_key_limbs; 1289 + 1];\n    let mut entropy = [false; 1289];\n    for i in 0..123 {\n        entropy[(i * 456) % 1289] = true;\n    }\n\n    assert(decrypt(dec_key, encrypt(MC1031_params, enc_key, entropy, true)) == true);\n    assert(decrypt(dec_key, encrypt(MC1031_params, enc_key, entropy, false)) == false);\n}\n\n/* Old implementations using BigNums fixed since compile time */\n// TODO: cleaning up and refactoring in progress\n\n/*\nfn decrypt_noise(p: AGCD, c: AGCD) -> AGCD {\n    let _1: AGCD = BigNum::one();\n    let _2 = _1 + _1;\n\n    // ~ c%(p/2)\n    c.umod(p.udiv(_2))\n}\n\n\n\n// (Harcoded for security parameter=128)\npub fn validate_keypair<let Tau: u32>(\n    common_divisor_entropy: [Field; 8],\n    multiplier_entropy: [[Field; 2]; Tau + 1],\n    additive_entropy: [[Field; 2]; Tau + 1],\n    resulting_samples: [[Field; 9]; Tau + 1],\n) {\n    // Assert that p has 128*7 bits or less\n    let TWO_POW_120 = 0x1_00000_00000_00000_00000_00000_00000;\n    for i in 0..7 {\n        assert(common_divisor_entropy[i].lt(TWO_POW_120));\n    }\n    let TWO_POW_56 = 0x10000_00000_00000;\n    assert(common_divisor_entropy[7].lt(TWO_POW_56));\n\n    let mut decryption_key_limbs = [0; 9];\n    for i in 0..8 {\n        decryption_key_limbs[i] = common_divisor_entropy[i];\n    }\n    let decryption_key: MC1031 = BigNum::from_slice(decryption_key_limbs);\n\n    for i in 0..Tau + 1 {\n        // Assert that q's have 128+7 bits or less\n        assert(multiplier_entropy[i][0].lt(TWO_POW_120));\n        assert(multiplier_entropy[i][1].lt((2 << 15) as Field));\n\n        // Assert that r's have 128 bits or less\n        assert(additive_entropy[i][0].lt(TWO_POW_120));\n        assert(additive_entropy[i][1].lt((2 << 8) as Field));\n\n        let mut multiplier_limbs = [0; 9];\n        multiplier_limbs[0] = multiplier_entropy[i][0];\n        multiplier_limbs[1] = multiplier_entropy[i][1];\n        let multiplier = BigNum::from_slice(multiplier_limbs);\n\n        let mut added_noise_limbs = [0; 9];\n        added_noise_limbs[0] = additive_entropy[i][0];\n        added_noise_limbs[1] = additive_entropy[i][1];\n        let added_noise = BigNum::from_slice(added_noise_limbs);\n        let TWO_POW_127 = BigNum::from_slice([0, 0x80, 0, 0, 0, 0, 0, 0, 0]);\n\n        assert(\n            resulting_samples[i] == (decryption_key * multiplier + added_noise - TWO_POW_127).limbs,\n        );\n    }\n}\n*/\n\n/*\n#[test]\nfn uniform_noise_potential_detector() {\n    let _1: AGCD = BigNum::one();\n    let _2 = _1 + _1;\n\n    let dk = BigNum::from_slice([1, 4, 2, 8, 5, 7, 0, 0, 0]);\n    let ek = [dk + _1; OLD_TAU];\n    let mut entropy = [false; OLD_TAU];\n    for i in 0..15 {\n        entropy[(i * 7) % OLD_TAU] = true;\n    }\n    let real_noise = decrypt_noise(dk, encrypt(ek, entropy, true));\n    let fake_noise = decrypt_noise(dk, BigNum::from_slice([4, 4, 6, 2, 6, 7, 4, 2, 2]));\n    println(f\"real_noise: {real_noise}\");\n    println(f\"fake_noise: {fake_noise}\");\n}\n*/\n\n// Maximum Cyphertext considered (integers modulo 2^1031)\nglobal MC1031_params: BigNumParams<9, 1031> = BigNumParams {\n    modulus: [\n        0xffffffffffffffffffffffffffffff,\n        0xffffffffffffffffffffffffffffff,\n        0xffffffffffffffffffffffffffffff,\n        0xffffffffffffffffffffffffffffff,\n        0xffffffffffffffffffffffffffffff,\n        0xffffffffffffffffffffffffffffff,\n        0xffffffffffffffffffffffffffffff,\n        0xffffffffffffffffffffffffffffff,\n        0x7fffffffffffffffff,\n    ],\n    double_modulus: [\n        0x01fffffffffffffffffffffffffffffe,\n        0x01fffffffffffffffffffffffffffffe,\n        0x01fffffffffffffffffffffffffffffe,\n        0x01fffffffffffffffffffffffffffffe,\n        0x01fffffffffffffffffffffffffffffe,\n        0x01fffffffffffffffffffffffffffffe,\n        0x01fffffffffffffffffffffffffffffe,\n        0x01fffffffffffffffffffffffffffffe,\n        0xfffffffffffffffffe,\n    ],\n    modulus_u60: U60Repr {\n        limbs: [\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x07ff,\n        ],\n    },\n    modulus_u60_x4: U60Repr {\n        limbs: [\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x0fffffffffffffff,\n            0x07ff,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n        ],\n    },\n    redc_param: [0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08000000000000000000],\n    has_multiplicative_inverse: false,\n};\nuse dep::bignum::utils::u60_representation::U60Repr;\n","path":"/root/aztec-grant-pss/packages/noir/libs/cheon_stehle/src/lib.nr"}},"names":["main"],"brillig_names":["decompose_hint","output_detect","__add","__compute_quadratic_expression_with_borrow_flags","__add_with_flags","__udiv_mod","__compute_quadratic_expression_with_borrow_flags","__validate_gt_remainder","output_board","directive_invert"]}