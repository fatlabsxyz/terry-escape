{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":7470377742745264395,"abi":{"parameters":[{"name":"player","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"agents","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"board_salt","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1ZvRbiIxDEX/ZZ55SGLHTvorq6qiLa2QEFSUrrRC/PvOrMgAIVBZdJH9UjVMjrkTO4muhLfd6+z56/1pvnxbfXYPv7bdYvUy3cxXy3607fy/jz4/psth9LmZrjfdA2CedLPla/9fzLtJ9zZfzLoHCrvHSRekAEgBlAKxCTDsAXSxAqgFIPsCJF8BLAWSFMhSwLsmkd2eiM7VhBcTQUyAmGimG1McibM3j2KinXCiywSLiWbKo+NChFQTWUoEJya8mAhiopnzGMv+i8Q1gWKimfOIoyo6U0VigsVEO+e5vAc5qIksJaCd88QjUasCLyaCmGjmnGB8D6wzCCgmmjmnMKrCM1UkJlhMNHPODvcE+5PbZnI21SOXk8pHf0h38I3JwYVy7wUHfDx50JL1aEF3Xy3eH7Sk65Mh5BIZ4HTyINzrFY6ubA/AGGvhQVH2wWr20Wr2o6LskyItbLUSk9VKVHQLRadIi+KL5WolxmC0EiMoyj4q0hKtViJZrURWlH1FjiVmo5VIiu3N1Uokryf7pMixkFXHQmi1EhU5FlLkWMiqYyGrjoUUORZW5FjYqmNhq46FFTkWRkVarDoWtupYWJFjYUWOha06lmTVsSRFjiUpcizJqmNJaLUSFTmWpMixJKuOJVl1LEmRY8mKHEu26liyVceSFTmWjIq0WHUs2apjyYocS1bkWLJVx+KdVcvi3X3vIQipKAc+X8bm3UKJRjGstQBAr/JvCgDNrnk0u+Z0V+XfbLr2bYSl84GrtpV+8LyeLxbz96eThhw3/Gm3H/jD2vU75bAcPjXkHp894Xjq46VehZ8Ln28PP/4unDFX4dtdEMLwoYQnqMP728Oncj1z5jp8+L/h4ebwKZQNlLBObbtzQxi+7LkUqQ4fbw/PJbXpfHHoB8Pnqu77gR8mtlsKgg/j4VG3DrVbCi4Tu370e7qeT58Xs+HMGB5+LV/KEdIPN38+ypNyyHysVy+z16/1bDhujk6aYTOBm0A8vED/SYAJwOO+y6w/w7B/vOu/+S8=","file_map":{"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"62":{"source":"use std::hash::pedersen_hash as hash;\n\nglobal Size: u32 = 16;\n\n#[oracle(oracle_board)]\nunconstrained fn oracle_board(board: [Field; Size]) -> () {}\nunconstrained fn output_board(board: [Field; Size]) -> () {\n    oracle_board(board);\n}\n\nfn main(player: pub u8, agents: [Field; 4], board_salt: Field) -> pub Field {\n    assert(Size == 16);\n    assert(player < 4);\n    assert(agents.reduce(|a, b| a + b) == 4);\n    let mut board = [1 /*Empty*/; Size];\n    let anchor = 0 + (player % 2) + 4 * (player / 2);\n    board[anchor + 0 + 0] += agents[0];\n    board[anchor + 0 + 2] += agents[1];\n    board[anchor + 8 + 0] += agents[2];\n    board[anchor + 8 + 2] += agents[3];\n    let board_digest = hash([board_salt, hash(board)]);\n    let _ = unsafe { output_board(board); };\n    board_digest\n}\n\n","path":"/root/aztec-grant-pss/circuits/initial_deploys/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","output_board","directive_integer_quotient"]}