{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":600190904488125204,"abi":{"parameters":[{"name":"board_used","type":{"kind":"array","length":16,"type":{"kind":"field"}},"visibility":"private"},{"name":"board_salt","type":{"kind":"field"},"visibility":"private"},{"name":"tiles_salt","type":{"kind":"array","length":16,"type":{"kind":"field"}},"visibility":"private"},{"name":"veil_digests","type":{"kind":"array","length":16,"type":{"kind":"field"}},"visibility":"public"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"array","length":16,"type":{"kind":"field"}},{"kind":"field"},{"kind":"field"}]},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1Z3fbhpNDMXfZa9zMfb8sZ1X+VRVJKEVEiIRST6pivLuhYolCIaNXHoifLlhfbC8P/ssMwt5Gx7md68/vy9WPx6fh9v/3obl4/3sZfG42hy9DenPn56fZqvt0fPLbP0y3BYpN8N89TDc1pTfb4Yfi+V8uG30fnNyKqnsTiVrh6d+uxkIqM1A7XyhNifancqUjrQLULsCtdsn2rkcBUgvQNIYIFn+/gIpUNuA2pQuFJ+6QkRIcUaKdxuuCffFtxHFHdFtDqMxKyuXXNeGFBekuF4oPnldDSjOCSne7SW10hffRrA7okt9bbaLaGTHEQU4m7gixRtSXICziRUpbkDxnLwzMpM7goGzKWekeEGKV+Bsyg0pLkhx9c7IbN6IkrxTtRBwNhVGimekeAHOplKR4g0pLt4ZWdQdYcDZVBNSnJDiDJxNNSPFC1K8emdkbe4I8U7VqkgSkA3SkA3SCEhCQzZIQzZIK14im5v61rwMN/esb/1PC9p2EZpP3gOJsiBRFuSsFyTKgkRZkLNe3NSLe9aLe9aL+w5HzNsnikRZkSgr8jOyIlFWJMqK/IysbupV3BHq7RM1b59Y8vaJIVE2JMqGXO4xJMqGRNmQyz3mpt7cazhm3j6h5MaeEpJ7SgxVz1B1JPqUKlS9QdXd9FNSf4iff3Iv3dOZ3d+pliEo1ASFmgpUHQo1QaEmgar7+Sf3Gj6xexGf2L13Rf0t28mWYSjUDIWaoU9AMBRqhkLN0Icg2M9/f+t2OoTcLdPfvJ1smf6W7GTLQDdaKUOhztDneqB7rZShUGfkoz1U/PwX8oewu2WKn/8C5b9A+S9Q/guU/wLlv0D5r37+q5//6ue/+p/U7O99TrZMf0dzOrHmT0z8iak/MfeaHzX/6kfzu3/z3/32twA3NwVjzMaO+ZOBUKSOJ1f6eB6dU79H9k2Ssk6fnHnPes4HRd2c/Cf3cs25lzTykEstJ7nXwHVvgesugeuugetuceve33KPUff+jn6QunPgugf2VQnsqxLYVyWwr0pgX5XAviqBfVUD+6oG9lUN7Ksa2Fc1sK9qYF/VwL6qgX1VA/uqBvZVC+yrFthXLbCvWmBftcC+al/tq5l1zD2LnqRzxipJP9Ip14qBXHPun2CggetuYevOKX1x7pPtx+mM+4nt0zG5Tgw48TXn/gkGOXDdS+C618B1b4HrLoHrroHrbnHrTilu3Smwr1JgX6XAvkqBfZUC+yoF9lUK7KsU2FcpsK9yYF/lwL7KgX2VA/sqB/ZVDuyrHNhXObCvcmBf5cC+mgP7ag7sqzmwr+av9tWJ7YDNwd16sVwufn4//u8eb2d+QJ4+SkEp170cSee9D348lfjw1G/nfkL+38nb5fI5j/LFjuTP3FH75Pdf5mr5WJ4ul9cRKDngaSfPWPl8sbzy/gtl5fjSnrm788mPDaS1HcvXy+X339PT0+K0fyhvR9y/b47+n60Xs7vlfNvJ2xdfV/djY28OX349ja+Mrf+0fryfP7yu59shcND/W8Rzusl1I7uR/g0=","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"61":{"source":"use std::hash::pedersen_hash as hash;\n\nglobal Size: u32 = 16;\nglobal Side: u32 = 4;\n\nfn tile_has_trap(tile: Field) -> bool {\n    tile == 0\n}\nfn tile_has_agent(tile: Field) -> bool {\n    (tile != 0) & (tile != 1)\n}\n\nfn main(\n    board_used: [Field; Size],\n    board_salt: Field,\n    tiles_salt: [Field; Size],\n    veil_digests: pub [Field; Size],\n) -> pub ([Field; Size], Field, Field) {\n    let mut tiles_used = [false; Size];\n    for i in 0..Size {\n        tiles_used[i] = tile_has_agent(board_used[i]) | tile_has_trap(board_used[i]);\n        if (i > 0) {\n            tiles_used[i] |= tile_has_agent(board_used[i - 1]);\n        }\n        if (i != Size - 1) {\n            tiles_used[i] |= (i % 4 != 3) & tile_has_agent(board_used[i + 1]);\n        }\n        if (i >= Side) {\n            tiles_used[i] |= tile_has_agent(board_used[i - Side]);\n        }\n        if (i < Size - Side) {\n            tiles_used[i] |= tile_has_agent(board_used[i + Side]);\n        }\n    }\n\n    let mut tile_digests_vec = Vec::new();\n    for position in 0..Size {\n        //tile_digests_vec.push(hash([tiles_used.get(position) as Field, tiles_salt[position]]))\n        tile_digests_vec.push(tiles_salt[position] + tiles_used[position] as Field) // UH bug\n    }\n    let tile_digests = tile_digests_vec.slice.as_array();\n\n    let board_digest = hash([board_salt, hash(board_used)]);\n    let veils_digest = hash(veil_digests);\n\n    (tile_digests, board_digest, veils_digest)\n}\n","path":"/root/aztec-grant-pss/packages/noir/circuits/combine_queries/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_invert"]}