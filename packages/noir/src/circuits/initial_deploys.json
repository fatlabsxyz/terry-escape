{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":17219677513316886319,"abi":{"parameters":[{"name":"player","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"agents","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"board_salt","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1ZvRbiIxDEX/ZZ7nIYkdO+mvrKqKtrRCQlBRutKq6r/vzIoMbSZQWXSR/YII5JibsZPoSvi9e1zevz3frTZP29fu5td7t94+LPar7WYYvXf+30evL4vNOHrdL3b77gYw991y8zi8i/mj755W62V3Q/7jtu+CFAApgFIgNgGGA4AuVgC1AGRfgOQrgKVAkgJZCnjXJLI7ENG5mvBiIogJEBPNdGOKEzFbeRQT7YQTnSZYTDRTHh0XIqSayFIiODHhxUQQE82cx1j2XySuCRQTzZxHnFTRTBWJCRYT7Zznsg5yUBNZSkA754knolYFXkwEMdHMOcG0DqwzCCgmmjmnMKnCmSoSEywmmjlnhweC/Zfbpp9N9cjlpPLRH9MdXGNycKHce8EBf548asl6tKC7rhbvj1rS+ckQclEBMBfu9QpHF4pwjFgLD4qyD1azj1azHxVlnxRpYauVmKxWoqJbKDpFWhRfLGcrMQajlRhBUfZRkZZotRLJaiWyouwrciwxG61EUmxvzlYieT3ZJ0WOhaw6FkKrlajIsZAix0JWHQtZdSykyLGwIsfCVh0LW3UsrMixMCrSYtWxsFXHwoocCytyLGzVsSSrjiUpcixJkWNJVh1LQquVqMixJEWOJVl1LMmqY0mKHEtW5FiyVceSrTqWrMixZFSkxapjyVYdS1bkWLIix5KtOhbvrFoW7657D0FIRTlwmolp3i2UaBLDWgsA9Cr/pgDQ7DOPZp85XVX5N5uufRth6Xzgqm1lGNzvVuv16vnuS0OOG1/a7Qf++OyGnXI8UMZlnj17wuept6d6FX4ufL48/PS/cMZchW93QQjDl7pigjq8vzx8KtczZ67Dh/8bHi4On0LZQAnr1LY7N4Thy55Lkerw8fLwXFKb5g+HfjB8rup+GPhxYrsJIfgwHR5161C7CeE08TGMfi92q8X9ejmeGeOXb5uHcoQMw/2fl/JNOWRedtuH5ePbbjkeN59OmnEzgeshHhcwfBKgB7g9dJlB7hGHXx1++S8=","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"61":{"source":"use std::hash::pedersen_hash as hash;\n\nglobal Size: u32 = 16;\n\n#[oracle(oracle_board)]\nunconstrained fn oracle_board(board: [Field; Size]) -> () {}\nunconstrained fn output_board(board: [Field; Size]) -> () {\n    oracle_board(board);\n}\n\nfn main(player: pub u8, agents: [Field; 4], board_salt: Field) -> pub Field {\n    assert(Size == 16);\n    assert(player < 4);\n    assert(agents.reduce(|a, b| a + b) == 4);\n    let mut board = [1 /*Empty*/; Size];\n    let anchor = 0 + (player % 2) + 4 * (player / 2);\n    board[anchor + 0 + 0] += agents[0];\n    board[anchor + 0 + 2] += agents[1];\n    board[anchor + 8 + 0] += agents[2];\n    board[anchor + 8 + 2] += agents[3];\n    let board_digest = hash([board_salt, hash(board)]);\n    let _ = unsafe { output_board(board); };\n    board_digest\n}\n\n","path":"/root/box/terry-escape/packages/noir/circuits/initial_deploys/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","output_board","directive_integer_quotient"]}