# Terry Escape - Simple single-service Dockerfile
# Use this if you want to run frontend and backend separately

# ============================================
# Build stage
# ============================================
FROM node:22-alpine AS builder

RUN apk add --no-cache bash python3 py3-pip
RUN corepack enable && corepack prepare pnpm@10.4.1 --activate

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml tsconfig.base.json ./
COPY packages ./packages

# Install and build
RUN pnpm install --frozen-lockfile || pnpm install
RUN pnpm run build || true

# ============================================
# Gamemaster (Backend) Image
# ============================================
FROM node:22-alpine AS gamemaster

RUN apk add --no-cache bash
RUN npm install -g tsx

WORKDIR /app/packages/gamemaster

# Copy only what's needed for gamemaster
COPY --from=builder /app/packages/gamemaster ./
COPY --from=builder /app/packages/client /app/packages/client
COPY --from=builder /app/node_modules /app/node_modules

ENV NODE_ENV=production
ENV JWT_SECRET=change-me-in-production
ENV PORT=2448

EXPOSE 2448

CMD ["tsx", "src/index.ts"]

# ============================================
# Frontend Image
# ============================================
FROM node:22-alpine AS frontend

RUN apk add --no-cache bash
RUN corepack enable && corepack prepare pnpm@10.4.1 --activate

WORKDIR /app/packages/frontend

# Copy only what's needed for frontend
COPY --from=builder /app/packages/frontend ./
COPY --from=builder /app/node_modules /app/node_modules

ENV NODE_ENV=production
ENV PORT=8000

EXPOSE 8000

CMD ["pnpm", "start"]